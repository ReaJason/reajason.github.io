<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>突如其来政策</title>
    <link href="/2022/09/21/HardExperience/"/>
    <url>/2022/09/21/HardExperience/</url>
    
    <content type="html"><![CDATA[<p>9 月份以来，每次出门到村口那会时，就有一个广播一直播报着『三层及三层及以上不允许出租』。刚好我就住在三楼，由于上次也抓过这件事情，最后不了了之，所以我也没把这件事放在心上。不过到了快中旬的时候，隔壁以及对面都搬走了，三楼基本只剩我和两外一家了，我也还是没慌，和房东聊了聊，说是我找到新的住所也可以搬。</p><p>9-18周日得知，9-20将进行强制搬离，我想这件事情搞大了，于是我开始找房子，和总监请了两天假（周一、周二）。我先是在村里面逛了一大圈，基本是没有房了，走在路上碰到热心的村民询问也和我说这边基本没了。</p><p>18号在村委会前的公告牌找了一些房源信息，微信聊了有物业有中介，物业直租的就是煜都物业那边的酒店式公寓，那地方很偏，没有集市没有买菜的地方，非常不方便，而且房屋很贵，2300+往上走。基本全是新建的房，像是专门为了这次大清理做的一样，我突然就想起了，吃政策的红利，以我固执的心理，我是不可能让他们赚到我的钱的，所以我就说再找找就溜了。</p><p>中介手里确实有几套还不错的房，不错的是位置，就在离上班不远的位置，上下班通勤非常方便。缺点就是中介费有点贵（一个月房租的钱），四居室的合租基本是不考虑的，人数太多，一个厕所根本不够用，上下班时间冲突就更加了。在豆瓣、小红书、抖音上找了一些，简单来说小红书上基本就是中介或者物业啥的，没有房东发房源在那上面，其他区域不知道，北京大兴黄村镇是真没有。抖音的话有房东但是参考价值不大，有很多村那种便宜的房但是距离实在是太遥远了。豆瓣因为之前也用过就挺熟悉的，也找了好几个房东聊了房子。</p><p>9-19日，我准备用一天的时间找房，一大早在村里面转了一圈，打了好几个地方都是没房了。中午去了煜都物业那边看了几个2300+的房子，有了逼不得已的待选项，实在强制搬离没有找到房子的话就只能搬到这边来了。下午的计划就是去找一下中介那边看房，因为中介那边有1699，1799，2099的合租房，既然便宜一点也没什么房源的情况下也不失是一个考虑的点，毕竟离公司很近，能走路上班，就是中介费贵了点（一个月真的太贵了，抢钱了属于是）。但是就在我刚吃完中饭的时候，房东来找我了。因为三层及三层以上，房东这边只有六间，之前那些找到房子的租客，陆陆续续搬离了，上午的时候，倒数第二家搬了，只剩我一个。房东敲我门看起来比我还着急，然后我说我打算今天把房子找好，明天一定就搬。房东强调着，那个时候就晚了，今天搬，我能喊村里政府喊的搬家公司搬家，但是你明天走的话性质就不一样，那个时候就是清房子了，是强制搬走了。重复了很多遍，目的就是让我今天下午搬走。面对突如其来的困难，在我待选项中出现了一个选项，就是辞职回家……，所有的这些都不在我的计划之内，我当时也确实没有找到合适的房子，就愣在那里了。房东就建议我搬去兄弟那里去，我说北京没有认识的兄弟，只有同事。最后房东想起了楼下还有两家住户常年不在这边，空着房子，就给一家租户打了个微信视频说了情况让我先去他那暂住一段时间，再找找房子，找到就搬出去。在那个租户同意的一瞬间，我对着房东的手机那边低声说了一句谢谢哥，就开始有点哽咽强忍泪水。之后我就把自己的行李打包往下搬了，我还是不太想让人看到我的眼泪，就一直等每人的时候哭出来，擦擦再继续走。真的非常感谢房东，压力一下子要小了很多。</p><p>晚上的时候去看了豆瓣找到的一间西红门 2200 次卧的合租房。虽然房租是之前的两倍，但是比之前看到的几家好多了。隔壁室友也是同级的，在西直门上班，他 7 点多出门，我 8 点多上班，这样上班时间刚好错开，而且通勤时间和以前一样 —— 骑单车三十多分钟的路程。这边有两个商场、一个公园，走两个路口是地铁口，交通方便，民水民电。看完后和房东聊了合同相关事宜，协商好明天晚上搬过来并且签合同。</p><p>晚上回到住的地方，躺在床上却睡不着，一直想着房租的事情，毕竟对于我当前的收入来说，2200 还是太贵了，就好比是直接给房东打工，每个月攒不住钱了。押一付三，前几个月留的钱也基本都得用到这上面了，有点后悔这么快和房东敲定，要不花时间再找找？但是很快我换了一个思路，第一，再花时间找房子无疑是非常消耗精力的，第二，我来北京这边其实一直是抱着学习的心态，工资一直都非常低，转正高了点但是也攒不了多少钱，调整自己的心态学习就完事了，隐忍这一年明年使劲搞钱。这样想着，我安心地睡着了。</p><p>9-20号，一大早起来就开始研究货拉拉怎么喊车，看了半天喊了一个中包只运货不需要搬家的，结果下午的时候打电话告诉我因为某某原因让我推掉订单（其实就是不想过来了）。然后下午发了好几个订单一直没有司机接，原因也很简单，就是村里面的路非常不好走，只有一条窄窄的道，基本是来车了，人啊，自行车，摩托就都过不了了，所以也挺无奈的。原定八点左右去租的房子那边，时间来到五点多了，也所剩无几了，就索性试试搬家的服务，点了一个需要司机协助搬的货拉拉，结果没两分钟就有司机接单了。等司机过来之后，和我说看错了，以为不在村里面，结果还是过来了，因为一直没有司机接时间又非常紧，所以我一直在说谢谢，然后协助司机把车停在靠路边的位置（到了晚饭点了，车子多了起来，很多自行车，电摩都不愿意让车，一直往前钻，挺气人的）。</p><p>大概六点多的时候我收拾的差不多了，这个货拉拉的订单是七点整的，但是我害怕到时候越晚车越多直接出不去了，所以就喊司机师傅帮忙就开始搬东西准备走了，因为今天开始规定货拉拉搬家的车不能进村，所以车不能从村口开出去，只能倒出去，走另外一条路。一切顺利，我走在车的后面指挥者很快就倒出去了。</p><p>准备出发的时候，有个阿姨买完菜回来，看到我搬家就问了一句，“你们是搬去哪里，房租多少”。我说：“西红门那边，2200”，只见阿姨低身叹气说道：“好贵”，离开了。上了车之后，师傅就问了我房租的事情，还问了我工作的事情，我们就聊开了起来。</p><p>我和师傅说我刚毕业一年，一个人来的北京，还讲了我第一次来北京的火车上发生的事情，就是有一个大哥借了我的充电宝，然后和我说了一句话我可能很久都不会忘，就我说我是亲戚介绍来这边工作的，他就说“如果我是你的亲戚，我一定不会让你来北京。”。师傅听到后分享了一些自己的个人经历，他 21 岁来北京，现在 41 了，整整 20 年的青春奉献给了北京。做了 17 年的水果店生意，每天晚上 12 点进货，早上 4、5 点起来摆摊的生活，一个月车贷、房贷压得喘不过气来，生物钟也开始紊乱，白天没有精神，晚上非常有精神，最近几年才干起货拉拉的工作，生物钟也慢慢正常了起来，想做的时候就拉一下，不想做就回家。我时时做下嗯嗯的回应，时时说着“真的每一个工作都不容易”的感慨。</p><p>师傅也分享了一些个人见解，他聊到了北京的现状，认为北京过不了几年就会没落，从他口中得知很多企业都撤离了北京，除了互联网公司，绝大多数岗位不再需要更多的人，到时候本地人也只能去外地工作。他得知我在互联网工作就说了对互联网工作的看法，认为做互联网工作以后无法转型去做别的需要体力劳动，身体吃不消没力气，经常加班熬夜，岁数大点就承受不住，自然而然就被淘汰了。确实是这样子，因此我也时常下意识地锻炼一下身体。至少每天坚持骑车上下班。生活不易，猫猫叹气。</p><p>路上有说有笑，一下就到了目的地。因为还没到和房东约好的时间，所以我就让师傅帮忙把东西放到楼下就走了。师傅临走前，从他车里递给我两只他刚买的香蕉，就急忙开车走了。我站在原地看着师傅的车渐渐远去，一只手拿着师傅给我的香蕉，一只手举着高高的竖了个大拇指。</p>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次失败的项目经验</title>
    <link href="/2022/07/11/FailureProjectExperience/"/>
    <url>/2022/07/11/FailureProjectExperience/</url>
    
    <content type="html"><![CDATA[<h2 id="项目内容"><a href="#项目内容" class="headerlink" title="项目内容"></a>项目内容</h2><p>对内部员工使用的 OA（Office Automation 办公自动化） 系统进行为期一个月（2022-06 ~ 2022-07）的样式调整，统一样式，两周用于测试。</p><p>项目人数三人，一个跟着当前项目工作了一年的后端开发（bt），一个刚转正两个月的萌新（我），一个刚招来的前端开发（sd）。</p><p>项目样式调整前工作，几个复杂界面的 UI 设计图以及一个开发进度安排。</p><h2 id="系统概述"><a href="#系统概述" class="headerlink" title="系统概述"></a>系统概述</h2><p>当前系统使用 SpringBoot + Thymeleaf+ Bootstrap4 + jQuery 打造而成。HTML 页面中充斥着对 DOM 节点的操作，各种难以维护的代码逻辑，随处可见的复制粘贴原封不动的代码，没有封装，没有模块化，没有抽离成单独的 JS 文件或单独的 HTML 文件或 CSS 文件。CSS 大多内嵌在 DOM 上，大量重复的 CSS 样式堆叠在页面最上方显得单个文件行数格外的多。没有统一的代码风格，没有统一的模块使用，例如表格控件使用了 jQuery DataTable 和 Bootstrap DateTable，弹框更多，整个代码框架显得非常凌乱。</p><p>简而言之，这是一个老旧项目，维护起来有一定的困难。</p><h2 id="项目开发"><a href="#项目开发" class="headerlink" title="项目开发"></a>项目开发</h2><p>由于前期根本没有做系统的整体框架调研，直接开始埋头改代码，因此在第一周的时间里面只简单改了列表页和编辑页，边改边调，问题非常地多。个人认为在修改之前应该面对现有的问题（即样式统一调整）给出多个解决方案（例如表格、弹窗、消息统一使用哪个库，哪种修改策略能使风险降低 —— 风险评估） —— 往往第一个解决方案不是最好的。</p><p>刚好前一个月读完了代码大全，因此第一周一直就是一个心态，不要急着写代码不要急着写代码不要急着写代码。事实证明确实如此，由于没有统一就开始修改，导致反复多次进行修改，拉长了战线，也降低了成员的积极性。先想好了怎么做再去做往往比边做边想更有效率。</p><p>第一周结束之后，稍微有了一个统一的修改模板。第二周我开始了修改框架源码的道路，由于模态框使用了 artDialog 也有 bootstrap 的 modal，统一为 bootstrap 的，因此我修改了 artDialog 渲染弹窗的模板，它使用的是 table 布局，自定义类名只能加在原有类名最前面，因为内部使用 split 来获取 DOM 的映射关系，放在后面就会更改 DOM 的名字导致不起作用。</p><p>第二周结束，我们大致修改了两三个大菜单下的页面，组长检查了修改的页面提了很多问题，因此我们边改边继续着接下来的大菜单。这一周我研究了 jQuery DataTable 的 fixColumns 插件的源码，原因就是当前表格在固定最后一列的时候表头在 x 轴滚动条滑动的同时会跟着滑动，急需解决。然后我查看官网发现官网已经给出了解决办法，因此我提议更新当前插件的版本，并且修改了源码（读取表格的滚动条，并在表头最后生成一个滚动条宽度一致的块）。这周分给我系统管理菜单下的用户管理、部门管理和岗位管理。树结构用的 zTree，研究了半天发现简直就是个垃圾，不如自己写一个，可以这么说，我觉得我实习写的树结构都比它好使。这一周的开发效率挺高的，因为有了前两周的修改经验，而且修改的模板也逐渐趋于统一。每一周结束检查的时候，组长都会提一些修改建议，点也是越来越细，需要修改的问题也越来越多。PS：有些页面表格使用 td 拼接，与逻辑交织在一起导致无法修改，修改风险 max，因此会选择最小侵入式修改（简单改改类名和 CSS）。</p><p>最后一周，我写了两个工具类，一个是计算表格高度使得适配整个页面而不出现滚动条。第二个是在 AdminLTE3 IFrame 插件基础上，添加新增 tab 栏，关闭 tab 栏等方法，这样子在 iframe 内也能支持点击新建 tab 栏了。还写了一个公共方法，在搜索栏太高的情况下，添加收起和展开搜索框的功能，成就感还是蛮大的。</p><p>还有一个重要的事情，那就是代码合并，由于我们进行样式调整的同时，仍然在开发新功能，导致代码合并冲突非常多，而且这次采用的合并策略是最后进行一次合并而不是持续集成。不过最后组长一个人进行这个事项，降低了我们的工作复杂度，但是一个人真的太难了，最后我们也是在合并好的代码后检查，不对的和新开发的地方进行修改调整。</p><p>还有两周测试时间，测试提交问题，我们进行修改。</p><h2 id="总结与展望"><a href="#总结与展望" class="headerlink" title="总结与展望"></a>总结与展望</h2><p> In my opinion，本次主要的问题有：</p><ol><li>没有做系统调研就评估了工作量，显然评估错误，页面过多有些过于复杂，导致不能在保证项目完成的前提下，照顾到每一处细节。</li><li>在代码修改之间没有提出统一的调整模板而是边改边统一，导致进度缓慢以及提高了复杂度。</li><li>没有做风险评估，修改过程全靠开发者来评估风险以及承担风险，或许能引入代码审查和结对编程来降低复杂度，但是这样提高了成本。</li><li>代码集成策略不应是最后一次进行集成，而应在每周上线，合并 master 分支代码，降低复杂度</li></ol><p>软件工程的目的就是降低复杂度。一个好的管理者或是领头羊对于一个团队来说真的非常重要。最近在读《<a href="https://qiangmzsx.github.io/Software-Engineering-at-Google/#/?id=software-engineering-at-google">Software-Engineering-at-Google</a>》，感觉很多都还不是很懂。好好学习，天天向上，将来我也要有自己的团队。</p>]]></content>
    
    
    <categories>
      
      <category>Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Code Completion 代码大全读书笔记</title>
    <link href="/2022/05/05/CodeCompletion/"/>
    <url>/2022/05/05/CodeCompletion/</url>
    
    <content type="html"><![CDATA[<h2 id="软件构建"><a href="#软件构建" class="headerlink" title="软件构建"></a>软件构建</h2><p>开发软件是一个复杂的过程：</p><ul><li>定义问题（problem definition）</li><li>需求分析（requirements development）</li><li>规划构建（construction planning）</li><li>软件架构（software architecture）</li><li>详细设计（detailed design）</li><li>编码与测试（coding and debugging）</li><li>单元测试（unit testing）</li><li>集成测试（integration testing）</li><li>集成（integration）</li><li>系统测试（system testing）</li><li>保障维护（corrective maintenance）</li></ul><p>构建活动中具体任务：</p><ul><li>验证有关的基础工作已经完成，因此构建活动可以顺利地进行下去</li><li>确定如何测试所写的代码</li><li>设计并编写类（class）和子程序（routine）</li><li>创建并命名变量（variable）和具名常量（named constant）</li><li>选择控制结构（control structrue），组织语句块</li><li>对你的代码进行单元测试和集成测试，并排除其中的错误</li><li>评审开发团队其他成员的底层设计和代码，并让他们评审你的工作</li><li>润饰代码，仔细进行代码的格式化和注释</li><li>将单独开发的多个软件组集成为一体</li><li>调整代码（tuning code），让它更快，更节省资源</li></ul><p>构建重要的原因：</p><ul><li>构建活动是软件开发的主要组成部分</li><li>构建活动是软件开发的核心活动</li><li>把主要精力集中于构建活动，可以大大提高程序员的生产率</li><li>构建活动的产物——源代码，往往是对软件的唯一精确描述</li><li>构建活动是唯一一项确保会完成的工作</li></ul><h3 id="Key-Points"><a href="#Key-Points" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>软件构建是软件开发的核心活动：构建活动是每个项目中唯一一项必不可少的工作</li><li>软件构建的主要活动包括：详细设计、编码、测试、集成、开发者测试（包括单元测试和集成测试）</li><li>构建也常被称作『编码』和『编程』</li><li>构建活动的质量对软件的质量有着实质性的影响</li><li>对『如何进行构建』的理解程度，决定程序员的优秀程度</li></ul><h2 id="隐喻软件开发"><a href="#隐喻软件开发" class="headerlink" title="隐喻软件开发"></a>隐喻软件开发</h2><p>隐喻的价值绝不应被低估。隐喻的优点在于其可预期的效果：能被所有的人理解。不必要的沟通和误解也因此大为减低，学习与教授更为快速。实际上，隐喻是对概念进行内在化（internalizing）和抽象（abstracting）的一种途径，它让人们在更高的层面上思考问题，从而避免低层次的错误。</p><h3 id="Key-Points-1"><a href="#Key-Points-1" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>隐喻是启示而不是算法。因此它们往往有一点随意（sloopy）</li><li>隐喻把把软件开发过程与其他你熟悉的活动联系在一起，帮助你更好理解</li><li>有些隐喻比其他一些隐喻更贴切</li><li>通过把软件的构建过程比作是房屋的建设过程，我们可以发现，仔细的准备是必要的，而大型项目和小型项目之间也是有差异的</li><li>通过把软件开发中的实践比作是智慧工具箱中的工具，我们又发现，每位程序员有许多工具，但并不存在任何一个能适用于所有工作的工具，因地制宜地选择正确工具是成为能有效编程的程序员的关键</li><li>不同的隐喻彼此并不排斥，应当使用对你最有益处的某种隐喻组合</li></ul><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>准备工作的中心目标就是降低风险</p><p>优秀的程序员永远是紧缺的。人生苦短，当有大量更好的选择在你面前的时候，在一个蛮荒的软件企业中工作是不明智的</p><p>发现错误的实践要尽可能接近引入该错误的时间。需求的缺陷就有可能在系统中潜伏长时间，代价更加昂贵。</p><p>问题定义应该用客户的语言来书写，而且应该从客户的角度描述问题。</p><p>明确的需求有助于确保是用户驾驭系统的功能。重视需求有助于减少开始编程开发之后的系统变更情况。充分详尽地描述需求是项目成功的关键，它甚至很可能比有效的架构建技术更加重要。</p><h3 id="稳定需求的神话"><a href="#稳定需求的神话" class="headerlink" title="稳定需求的神话"></a>稳定需求的神话</h3><p>稳定的需求是软件开发的圣杯。对一个典型项目来说，在编写代码之前，客户无法可靠地描述他们想要的是什么，开发过程能够帮助客户更好地理解自己的需求，这是需求变更的主要来源。</p><h3 id="构建期间处理需求变更"><a href="#构建期间处理需求变更" class="headerlink" title="构建期间处理需求变更"></a>构建期间处理需求变更</h3><ul><li>使用需求核对表评估需求的质量。需求不够好就停止工作，直到做好再继续前进</li><li>确保每一个人都知道需求变更的代价。『进度』和『成本』这两个字眼比咖啡和洗冷水澡都要提神</li><li>建立一套变更控制的程序。</li><li>使用能适应变更的开发方法。缩短开发周期，以便更快地响应用户的需求</li><li>放弃这个项目。如果需求特别糟糕或者极不稳定，就取消这个项目</li><li>注意项目的商业案例，那些记得『考虑自己的决定所带来的商业影响』的程序员的身价与黄金相当</li></ul><h3 id="架构的典型组成部分"><a href="#架构的典型组成部分" class="headerlink" title="架构的典型组成部分"></a>架构的典型组成部分</h3><h4 id="程序组织"><a href="#程序组织" class="headerlink" title="程序组织"></a>程序组织</h4><p>系统架构首先要以概括的形式对有关系统做一个综述。架构应该定义程序的主要构造块。应该明确定义各个构造块的责任。每个构造块应该负责某一个区域的事情，并且对其他构造块负责的区域知道得越少越好。</p><h4 id="主要的类"><a href="#主要的类" class="headerlink" title="主要的类"></a>主要的类</h4><p>架构应该详细定义所用的主要的类。对那些构成系统 80% 的行为的 20% 的类进行详细说明</p><h4 id="数据设计"><a href="#数据设计" class="headerlink" title="数据设计"></a>数据设计</h4><p>架构应该描述所用到的主要文件和数据表的设计。数据通常只应该由一个子系统或一个类直接访问。架构应详细定义所用数据库的高层组织结构和内容。</p><h4 id="业务规则"><a href="#业务规则" class="headerlink" title="业务规则"></a>业务规则</h4><p>如果架构依赖于特定的业务规则，那么它就应该详细描述这些规则，并描述这些规则对系统设计的影响</p><h4 id="用户界面设计"><a href="#用户界面设计" class="headerlink" title="用户界面设计"></a>用户界面设计</h4><p>用户界面常常在需求阶段进行详细说明。架构应该模块化，以便替换新用户界面时不影响业务规则和程序的输出部分。</p><h4 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h4><p>架构应该描述一份管理稀缺资源的计划。稀缺资源包括数据库连接、线程、句柄登。</p><h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>架构应该描述实现设计层面和代码层面的安全性的方法。</p><h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><p>如果需要关注性能，就应该在需求中详细定义性能目标。</p><h4 id="可伸缩性"><a href="#可伸缩性" class="headerlink" title="可伸缩性"></a>可伸缩性</h4><p>可伸缩性是指系统增长以满足未来需求的能力。架构应该描述系统如何应对用户数量、服务器数量、网络节点数量、数据库记录数、数据库记录长度、交易量等的增长。</p><h4 id="互用性"><a href="#互用性" class="headerlink" title="互用性"></a>互用性</h4><p>如果预计这个系统会与其他软件或硬件共享数据或资源，架构应该描述如何完成这一任务</p><h4 id="国际化-x2F-本地化"><a href="#国际化-x2F-本地化" class="headerlink" title="国际化&#x2F;本地化"></a>国际化&#x2F;本地化</h4><p>架构应该表现出已经考虑过典型字符串问题和字符集的问题。</p><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><p>架构应该详细定义读取策略是先做、后做还是即时做。应该描述那一层上检测 IO 错误</p><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>最好在架构层面对待错误处理问题</p><h4 id="容错性"><a href="#容错性" class="headerlink" title="容错性"></a>容错性</h4><p>架构应该详细定义所期望的容错种类</p><h4 id="可行性"><a href="#可行性" class="headerlink" title="可行性"></a>可行性</h4><p>架构应该论证系统的可行性</p><h4 id="过度工程"><a href="#过度工程" class="headerlink" title="过度工程"></a>过度工程</h4><p>健壮性是指系统再检测到错误后继续运行的能力。详细定义一种过度工程的方法尤其重要</p><h4 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h4><p>架构应该说明如何对复用的软件加工，使之符合其他架构目标</p><h4 id="变更策略"><a href="#变更策略" class="headerlink" title="变更策略"></a>变更策略</h4><p>让架构更灵活，能够适应可能出现的变化。架构应当清除地描述处理变更的策略。</p><h4 id="架构的总体质量"><a href="#架构的总体质量" class="headerlink" title="架构的总体质量"></a>架构的总体质量</h4><p>架构应该是带有少许特别附加物的精炼且完整的概念体系。架构的目标应该清晰地表述。架构应该描述所有主要决策的动机。架构应该明确地指出有风险的区域。架构应该包含多个视图。</p><h3 id="花费时长"><a href="#花费时长" class="headerlink" title="花费时长"></a>花费时长</h3><p>一个运作良好的项目会在需求、架构以及其他前期计划方面投入 10%<del>20% 的工作量和 20%</del>30% 的时间。</p><h3 id="Key-Points-2"><a href="#Key-Points-2" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>构建活动的准备工作的根本目标在于降低风险。要确认你的准备活动是在降低风险，而非增加风险</li><li>如果你想要开发高质量的软件，软件开发过程必须由始至终关注质量。</li><li>程序员的一部分工作是教育老板和合作者，告诉他们软件开发过程中，包括再开始编程前进行充分准备的重要性</li><li>你所从事的软件项目类型对构建活动的前期准备有重大影响</li><li>如果没有明确的问题定义，那么你可能会在构建期间解决错误的问题</li><li>如果没有做完良好的需求分析工作，你可能没能察觉待解决问题的重要细节。如果需求变更发生在构建之后的阶段，其代价是再项目早期更改需求的 20 至 100 倍</li><li>如果没有做完良好的架构设计，你可能会在构建期间用错误的方法解决正确的问题。架构变更的代价随着为错误的架构编写的代码数量增加而增加</li><li>理解项目的前期准备所采用的方法，并相应地选择构建方法</li></ul><h2 id="构建决策"><a href="#构建决策" class="headerlink" title="构建决策"></a>构建决策</h2><h3 id="选择编程语言"><a href="#选择编程语言" class="headerlink" title="选择编程语言"></a>选择编程语言</h3><p>编程语言的选择从多个方面影响生产率和代码质量。编程语言影响程序员的思维。</p><h3 id="编程约定"><a href="#编程约定" class="headerlink" title="编程约定"></a>编程约定</h3><p>实现必须与架构保持一致，并且这种一致性是内在的、固有的。这正是变量名称、类的名称、子程序名称、格式约定、注释约定等这些针对构建活动的指导方针的关键所在。</p><p>如果你使用的语言缺乏你希望用的构件，或者倾向于出现其他种类的问题，那就应该试着去弥补它。发现你自己的编码约定、标准、类库以及其他改进措施。</p><h3 id="Key-Points-3"><a href="#Key-Points-3" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>每种编程语言都有其优点和缺点。要知道你使用语言的明确优点和缺点</li><li>在开始编程之前，做好一些约定。改变代码使之符合这些约定是近乎不可能的</li><li>构建的实践方法的种类比任何单个项目能用到的要多。有意识地选择最适合你的项目的实践方法</li><li>记得深入一种语言去编程，不要仅再一种语言上编程</li><li>确定在技术在浪潮中的位置，并相应调整计划和预期目标</li></ul><h2 id="软件构建中的设计"><a href="#软件构建中的设计" class="headerlink" title="软件构建中的设计"></a>软件构建中的设计</h2><h3 id="设计中的挑战"><a href="#设计中的挑战" class="headerlink" title="设计中的挑战"></a>设计中的挑战</h3><p>你必须首先把这个问题解决一遍以便能够明确地定义它，然后再次解决该问题，从未形成一个可行的方案。</p><p>犯错正是设计的关键所在，在设计阶段犯错并加以改正，其代价要比在编码后才发现同样的错误并彻底修改低得多。</p><p>设计者工作的一个关键内容就是去衡量彼此冲突的各项设计特性，并尽力在其中寻求平衡。</p><p>设计的要点，一部分是在创造可能发生的事情，而另一部分又是在限制可能发生的事情。</p><p>设计是在不断地设计评估、非正式讨论、写试验代码以及修改试验代码中演化和完善的</p><h3 id="关键的设计概念"><a href="#关键的设计概念" class="headerlink" title="关键的设计概念"></a>关键的设计概念</h3><p>管理复杂度是软件开发中最为重要的技术话题。在软件架构的层次上，可以通过把整个系统分解为多个子系统来降低问题的复杂度。保持子程序的短小精悍也能帮助减少思考的负担。从问题的领域着手，而不是从底层实现细节入手编程，在最抽象的层次上工作也能减少人脑力负担。</p><p>应对复杂度：</p><ul><li>把任何人在同一时间需要处理的本质复杂度降到最低</li><li>不要让偶然复杂度无谓地快速增长</li></ul><h3 id="理想的设计特征"><a href="#理想的设计特征" class="headerlink" title="理想的设计特征"></a>理想的设计特征</h3><ul><li>最小的复杂度（Minimal complexity）：做出简单易于理解的设计</li><li>易于维护（Ease of maintenance）：设计时为做维护工作的程序员着想</li><li>松散耦合（loose coupling）：设计出相互关联尽可能最少的类</li><li>可扩展性（extensibility）：能增强系统的功能而无须破坏其底层结构</li><li>可重用性（reusability）：设计的系统的组成部分能在其他系统中重复使用</li><li>高扇入（high fan-in）：设计出的系统很好地利用较低层的工具类</li><li>低扇出（low fan-out）：让一个类少量或适中地使用其他类</li><li>可移植性（portability）：设计的系统能方便地移植到其他系统中</li><li>精简性（leanness）：设计出的系统没有多余的部分</li><li>层次性（stratification）：尽量保持系统各个分解层的层次性，使得能在任意的层面上观察系统而不需要进入其他层次</li><li>标准技术（Standard techniques）：尽量用标准化的、常用的方法，是整个系统给人以一种熟悉的感觉</li></ul><h3 id="设计的层次"><a href="#设计的层次" class="headerlink" title="设计的层次"></a>设计的层次</h3><p><strong>第一层：软件系统</strong></p><p>往往从子系统或包这些类的更高层次上来思考更有益处</p><p><strong>第二层：分解为子系统或包</strong></p><p>这一层次上设计的主要目的是识别出所有的子系统，不同子系统之间相互通信的规则，限制子系统之间的通信能让每个子系统更有存在意义。</p><p>常用的子系统：</p><ul><li>业务规则：计算机系统中编入的法律、规则、政策以及过程</li><li>用户界面：创建一个子系统将用户界面组件同其他部分分隔起来，以便于用户界面的演化不会破坏程序的其余部分</li><li>数据库访问：将数据库的访问实现细节隐藏起来，减少程序的复杂度</li><li>对系统的依赖性：把对操作系统的依赖因素归到一个子系统中，就如同把对硬件的依赖因素封装起来一样</li></ul><p><strong>第三层：分解为类</strong></p><p>这一层次上设计包括识别出系统中所有的类。把所有子系统进行适当的分解，并确保分解出的细节恰到好处，能够用单个的类实现。</p><p><strong>第四层：分解成子程序</strong></p><p>完整地定义类内部的子程序，常常会有助于更好地理解类的接口。</p><p><strong>第五层：子程序内部的设计</strong></p><p>设计工作包括编写伪代码、选择算法、组织子程序内部的代码块，以及用编程语言编写代码</p><h3 id="设计构造块"><a href="#设计构造块" class="headerlink" title="设计构造块"></a>设计构造块</h3><p>使用对象进行设计的步骤：</p><ol><li>辨识对象及其属性（方法和数据），深入挖掘问题领域可能会得出更好的设计方案</li><li>确定可以对各个对象进行的操作</li><li>确定各个对象对其他对象进行的操作，包含还是继承</li><li>确定对象的哪些部分对其他对象可见</li><li>定义每个对象的公开接口</li></ol><p><strong>形成一致的抽象</strong></p><p>以复杂度的观点，抽象的主要好处就在于它使你能忽略无关的细节。抽象是我们用来得以处理现实世界中复杂度的一种重要手段</p><p><strong>封装实现细节</strong></p><p>封装帮助你管理复杂度的方法是不让你看到那些复杂度</p><p><strong>当继承能简化设计就继承</strong></p><p><strong>信息隐藏</strong></p><p>信息隐藏是结构化设计与面向对象设计的基础之一。信息隐藏在不断增上、大量变化的环境中尤其有用。在设计一个类的时候，一项关键性的决策就是决定类的哪些特性应该对外可见，而哪些特性应该隐藏起来。类的接口应该尽可能少地暴露其内部工作机制。隐藏设计决策对于减少『改动所影响的代码量』而言是至关重要的</p><p>信息隐藏主要分为两大类：</p><ul><li>隐藏复杂度，这样你就不用再去应付它，除非你要特别关注的时候</li><li>隐藏变化源，每当发生变化的时候，影响就能被限制在局部范围内</li></ul><p>信息隐藏的障碍：</p><ul><li>信息过度分散</li><li>循环依赖</li><li>把类数据误以为全局数据</li><li>可以觉察的性能损耗</li></ul><p>找出容易改变的区域：</p><ul><li>找出看起来容易变化的项目</li><li>把容易变化的项目分离出来</li><li>把看起来容易变化的项目隔离开来</li><li>业务规则</li><li>对硬件的依赖性</li><li>输入和输出</li><li>非标准的语言特性</li><li>困难设计区域和构建区域</li><li>状态变量</li><li>数据量的限制</li></ul><p><strong>保持松散耦合</strong></p><p>耦合度表示类与类之间或者子程序之间关系的紧密程度。</p><p>耦合标准：</p><ul><li>规模</li><li>可见性</li><li>灵活性</li></ul><p>耦合种类：</p><ul><li>简单数据参数耦合</li><li>简单对象耦合</li><li>对象参数耦合</li><li>语义上的耦合</li></ul><p>松散耦合的关键之处在于，一个有效得到模块提供一层附加的抽象。</p><p><strong>查阅常用的设计模式</strong></p><ul><li>设计模式通过提供现成的抽象来减少复杂度</li><li>设计模式通过把常见解决方案的细节予以制度化来减少出错</li><li>设计模式通过提供多种设计方案而带来启发性的价值</li><li>设计模式通过把设计对话提升到一个更高的层次上来简化交流</li></ul><p><strong>使用启发式方法的原则</strong></p><p>最有效的原则是不要卡在单一的方法上。</p><h3 id="设计实践"><a href="#设计实践" class="headerlink" title="设计实践"></a>设计实践</h3><p><strong>迭代</strong></p><p>当首次尝试得出一个看上去足够好的设计方案后，不要停下来，第二个尝试几乎肯定会好于第一个，而你也会从每次尝试中有所收获，这有助于改善整体设计。</p><p><strong>分而治之</strong></p><p>把程序分解成不同的关注区域，然后分别处理每一个区域。增量式设计是一种管理复杂度的强大工具</p><p><strong>自上而下</strong></p><p>从某个高层次抽象开始。</p><p><strong>自下而上</strong></p><p>设计始于细节，向一般性延伸。</p><p><strong>建立试验性原型</strong></p><p>建立原型指的是『写出用于回答特定设计问题的、量最少并且能够随时扔掉的代码』这项活动。</p><p><strong>合作设计</strong></p><p>保证质量，推荐高度结构化的检查实践，正式检察</p><h3 id="Key-Points-4"><a href="#Key-Points-4" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>软件的首要技术使命就是管理复杂度。以简单性作为努力目标的设计方案对此最有帮助</li><li>简单性可以通过两个方式来获取，一是减少在同一时间所关注的本质性复杂度的量，二是避免生成不必要的偶然复杂度</li><li>设计是一种启发式的过程。固执于某一种单一方法会损害创新能力，从而损害你的程序</li><li>好的设计都是迭代的。你尝试设计的可能性越多，你的最终设计方法就会变得越好</li><li>信息隐藏是个非常有价值的概念，通常询问我应该隐藏些什么，能够解决很多的困难的设计问题</li></ul><h2 id="可以工作的类"><a href="#可以工作的类" class="headerlink" title="可以工作的类"></a>可以工作的类</h2><p>类是由一组数据和子程序构成的集合，这些数据和子程序共同拥有一组内聚的、明确定义的职责。</p><h3 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h3><p>抽象数据类型（ADT,abstract data type）是指一些数据以及对这些数据所进行的操作的集合。</p><ul><li>隐藏实现细节</li><li>改动不会影响整个程序</li><li>让接口提供更多信息</li><li>更容易提高性能</li><li>让程序的正确性显而易见</li><li>程序更具有自我说明性</li><li>无须在程序内到处传递数据</li><li>像现实世界一样操作实体</li></ul><h3 id="良好的类接口"><a href="#良好的类接口" class="headerlink" title="良好的类接口"></a>良好的类接口</h3><p>好的抽象：</p><ul><li>类的接口应该展现一致的抽象层次</li><li>一定要理解类所实现的抽象是什么</li><li>提供成对的服务</li><li>把不相关的信息转移到其他类中</li><li>尽可能让接口可编程，而不是语义表达</li><li>谨防在修改时破坏接口的抽象</li><li>不要添加与接口抽象不一致的共用成员</li><li>同时考虑抽象性和内聚性</li></ul><h3 id="良好的封装"><a href="#良好的封装" class="headerlink" title="良好的封装"></a>良好的封装</h3><ul><li>尽可能地限制类和成员的可访问性</li><li>不要公开暴露成员数据</li><li>避免把私有的实现细节放入类的接口中</li><li>不要对类的使用者做出任何假设</li><li>避免使用友元类</li><li>不要因为一个子程序里面仅使用公用子程序，就把它归入公开接口</li><li>让阅读代码比编写代码更方便</li><li>要格外警惕语义上破坏封装性</li><li>留意过于紧密的耦合关系</li></ul><h3 id="设计和实现的问题"><a href="#设计和实现的问题" class="headerlink" title="设计和实现的问题"></a>设计和实现的问题</h3><p><strong>has a，包含关系</strong></p><p>通过包含来实现『has a 』的关系</p><p>警惕有超过约七个数据成员的类</p><p><strong>is a，继承关系</strong></p><p>用 public 继承来实现『is a』的关系</p><p>要么使用继承并进行详细说明，要么不用它</p><p>遵循 Liskov 替换原则</p><p>确保只继承需要继承的部分</p><p>不要覆盖一个不可覆盖的成员函数</p><p>把共用的接口、数据及操作放到继承树中尽可能高的位置</p><p>只有一个实例的类是值得怀疑的</p><p>只有一个派生类的基类是值得怀疑的</p><p>派生后覆盖某个子程序，但其中没有做任何操作，也是值得怀疑的</p><p>避免让继承体系过深</p><p>尽量使用多态，避免大量的类型检查</p><p>让所有数据都是 private 而不是 protected</p><p>程序员在决定使用多重继承之前，应该仔细地考虑其他替代方案，并谨慎地评估它可能对系统复杂度和可理解性产生的影响</p><p><strong>成员函数和数据成员</strong></p><p>让类中子程序的数量尽可能少</p><p>禁止隐式地产生你不需要的成员函数和运算符</p><p>减少类所调用的不同子程序的数量</p><p>对其他类的子程序的间接调用要尽可能少</p><p>尽量减少类和类之间相互合作的范围</p><p>应该在所有的构造函数中初始化所有的数据成员</p><p>用私有构造函数来强制实现单件属性</p><p>优先采用深层拷贝，除非论证可行才采用浅拷贝</p><h3 id="创建类的原因"><a href="#创建类的原因" class="headerlink" title="创建类的原因"></a>创建类的原因</h3><ul><li>为现实世界中的对象建模</li><li>为抽象的对象建模</li><li>降低复杂度</li><li>隔离复杂度</li><li>隐藏实现细节</li><li>限制变动的影响范围</li><li>隐藏全局数据</li><li>让参数传递更顺畅</li><li>建立中心控制点</li><li>让代码更易于重用</li><li>为程序族做计划</li><li>把相关操作包装到一起</li><li>实现某种特定的重构</li></ul><p>避免创建的类：</p><ul><li>避免创建万能类</li><li>消除无关紧要的类，只包含数据不包含行为</li><li>避免用动词命名类</li></ul><h3 id="Key-Points-5"><a href="#Key-Points-5" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>类的接口应提供一致的抽象。很多问题都是由于违背该原则而引起的</li><li>类的接口应隐藏一些信息，如某个系统接口，某项设计决策，一些实现细节</li><li>包含往往比继承更为可取，除非你要对『is a』关系建模</li><li>继承是一种有用的工具，但它却会增加复杂度，这有违软件的首要技术使命（管理复杂度）</li><li>类是管理复杂度的首要工具。要在设计类时给予足够的关注才能实现这一目标</li></ul><h2 id="高质量的子程序"><a href="#高质量的子程序" class="headerlink" title="高质量的子程序"></a>高质量的子程序</h2><p>子程序（routine）是实现一个特定的目的而编写的一个可被调用的方法或过程。使用子程序的好处就是它避免了重复代码，从而使程序更易于开发、调试、编档和维护。</p><h3 id="创建子程序的正当理由"><a href="#创建子程序的正当理由" class="headerlink" title="创建子程序的正当理由"></a>创建子程序的正当理由</h3><ul><li>降低复杂度</li><li>引入中间、易懂的抽象</li><li>避免代码重复</li><li>支持子类化，保持可覆盖的子程序简单</li><li>隐藏顺序</li><li>隐藏指针操作</li><li>提高可移植性</li><li>简化复杂的布尔判断</li><li>改善性能</li><li>确保所有子程序都很小</li></ul><h3 id="在子程序层上设计"><a href="#在子程序层上设计" class="headerlink" title="在子程序层上设计"></a>在子程序层上设计</h3><p><strong>功能的内聚性</strong></p><p>是最强也是最好的一种内聚性，让一个子程序仅执行一项操作</p><p><strong>顺序上的内聚性</strong></p><p>子程序包含按特定顺序执行的操作，这些步骤共享数据，且只有在全部执行完毕之后才完成一项完整的功能。</p><p><strong>通信上的内聚性</strong></p><p>一个子程序中不同操作使用了同样的数据，但不存在其他任何联系。</p><p><strong>临时的内聚性</strong></p><p>含有一些因为需要同时执行才放到一起操作的子程序</p><p>不可取的内聚性：</p><ul><li>过程上的内聚性，一个子程序操作是按特定的顺序进行的。</li><li>逻辑上的内聚性，若干操作被放到同一子程序中，通过传入的控制标志选择执行一项操作。</li><li>巧合地内聚性，子程序中各个操作之间没有任何可以看到的关联。</li></ul><h3 id="好的子程序的名字"><a href="#好的子程序的名字" class="headerlink" title="好的子程序的名字"></a>好的子程序的名字</h3><p>描述子程序所做的所有事情</p><p>避免使用无意义的、模糊或表述不清的动词</p><p>不要仅通过数字来形成不同的子程序名字</p><p>根据需要确定子程序名字的长度</p><p>给函数命名时要对返回值有所描述</p><p>给过程起名时使用语气强烈的动词加宾语的形式</p><p>准确使用对仗词</p><p>为常用操作确立命名规则</p><h3 id="子程序的长度"><a href="#子程序的长度" class="headerlink" title="子程序的长度"></a>子程序的长度</h3><p>编写超过200行的子程序之后可读性会遇到问题。</p><h3 id="如何使用子程序的参数"><a href="#如何使用子程序的参数" class="headerlink" title="如何使用子程序的参数"></a>如何使用子程序的参数</h3><p>按照输入-修改-输出的顺序排列参数</p><p>使用所有的参数。往子程序传递参数就一定要使用这个参数</p><p>把状态或出错变量放在最后</p><p>不要把子程序的参数用作工作变量</p><p>在接口中对参数的假定加以说明</p><p>把子程序的参数个数限制在大约7个以内</p><p>考虑对参数采用某种表示输入、修改、输出的命名规则</p><p>为子程序传递用以维持其接口抽象的变量或对象</p><p>使用具名参数</p><h3 id="Key-Points-6"><a href="#Key-Points-6" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>创建子程序最主要的目的是提高程序的可管理性，当然也有其他好的理由，其中节省代码空间只是一种次要原因，提高可读性、可靠性和可修改性等原因都更重要一些</li><li>有时候，把一些简单的操作写成独立的子程序也非常有价值</li><li>子程序可以按照其内聚性分为很多类，而你应该在大多数子程序具有功能上的内聚性</li><li>子程序的名字是它的质量的指示器。糟糕的名字都意味着程序需要修改</li><li>只有在某个子程序的主要目的是返回其名字所描述的特定结果时，才应该使用函数</li></ul><h2 id="防御式编程"><a href="#防御式编程" class="headerlink" title="防御式编程"></a>防御式编程</h2><p>防御式编程的主要思想是：子程序应该不因传入错误数据而被破坏，哪怕是由其他子程序产生的错误数据。</p><h3 id="保护程序免遭非法输入数据的破坏"><a href="#保护程序免遭非法输入数据的破坏" class="headerlink" title="保护程序免遭非法输入数据的破坏"></a>保护程序免遭非法输入数据的破坏</h3><ul><li>检查所以来源于外部的数据的值</li><li>检查子程序所有输入参数的值</li><li>决定如何处理错误的输入数据</li></ul><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>断言对于大型的复杂程序或可靠性要求极高的程序来说尤其有用。断言主要用于开发和维护阶段。</p><ul><li>用错误处理代码来处理预期会发生的状况，用断言来处理绝不应该发生的状况</li><li>避免把需要执行的代码放到断言中</li><li>用断言来注解并验证前条件和后条件</li><li>对于高健壮性的代码，应该先使用断言再处理错误</li></ul><h3 id="错误处理技术"><a href="#错误处理技术" class="headerlink" title="错误处理技术"></a>错误处理技术</h3><ul><li>返回中立值，计算返回 0，字符串返回空串等。</li><li>换用下一个正确的数据</li><li>返回与前次相同的数据</li><li>换用最接近的合法值</li><li>把警告信息记录到日志文件中</li><li>返回一个错误码</li><li>调用错误处理子程序或对象</li><li>当错误发生时显示出错消息</li><li>用最妥当的方式再局部处理错误</li><li>关闭程序</li></ul><p>正确性意味着永不返回不准确的结果，哪怕不返回结果也比返回不准确的结果好。</p><p>健壮性意味着不断尝试采取某些措施，以保证软件可以持续地运转下去，哪怕有时做出一些不够准确的结果。</p><p>应该在整个程序里采用一致的方式处理非法参数。对错误进行处理的方式会直接关系到软件嫩否满足在正确性、健壮性和其他非功能性指标方面的要求。一旦确定了某种方法，就要始终如一地贯彻这一方法。</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>异常是把代码中的错误或异常事件传递给调用代码的一种特殊手段。</p><ul><li>用异常通知程序的其他部分，发生了不可忽略的错误</li><li>只有在真正例外的情况下才抛出异常</li><li>不能用异常来推卸责任</li><li>避免在构造函数和析构函数中抛出异常，除非你在同一地方把它们捕获</li><li>在恰当的抽象层次抛出异常</li><li>在异常消息中加入关于导致异常发生的全部信息</li><li>避免使用空的 catch 语句</li><li>了解所用函数库可能抛出的异常</li><li>考虑创建一个集中的异常报告机制</li><li>把项目对异常的使用标准化</li><li>考虑异常的替代方案</li></ul><h3 id="隔离程序"><a href="#隔离程序" class="headerlink" title="隔离程序"></a>隔离程序</h3><p>在输入数据时将其转换为恰当的类型。隔栏外部的程序使用错误处理技术，隔栏内部的程序使用断言技术。</p><h3 id="辅助调试的代码"><a href="#辅助调试的代码" class="headerlink" title="辅助调试的代码"></a>辅助调试的代码</h3><p>应该在开发期间牺牲一些速度和对资源的使用，来换取一些可以让开发更顺畅的内置工具。</p><p>如果你一旦遇到问题马上就编写或使用钱一个项目用过的某个调试助手的话，它会自始至终在整个项目中帮助你。</p><p>在开发阶段让异常显现出来，而在产品代码运行时让它能够自我恢复的处理异常方法称为进攻式编程。</p><h3 id="保留防御式代码"><a href="#保留防御式代码" class="headerlink" title="保留防御式代码"></a>保留防御式代码</h3><p>保留那些检查重要错误的代码</p><p>去掉检查细微错误的代码</p><p>去掉可以导致程序硬性崩溃的代码</p><p>保留可以让程序稳妥地崩溃的代码</p><p>为你的技术支持人员记录错误信息</p><p>确认留在代码中的错误消息是友好的，常用且有效的方法就是通知用户发生了内部错误，再留下可供反馈的电子邮箱或其他联系方式即可。</p><h3 id="Key-Points-7"><a href="#Key-Points-7" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>最终产品代码中对错误处理的方式要比“垃圾进，垃圾出”复杂得多</li><li>防御式编程可以让错误更容易发现、更容易修改，并减少错误对产品代码的破坏</li><li>断言可以帮助人尽早发现错误，尤其是大型系统和高可靠性系统中，以及快速变化的代码中</li><li>关于如何处理错误输入的决策是一项关键的错误处理决策，也是一项关键的高层设计决策</li><li>异常提供了一种与代码正常流程角度不同的错误处理手段，应该在异常和其他错误处理手段之间进行权衡比较</li><li>针对产品代码的限制并不适用于开发中的软件。你可以在开发中添加有助于更快地排查错误的代码。</li></ul><h2 id="伪代码编程过程"><a href="#伪代码编程过程" class="headerlink" title="伪代码编程过程"></a>伪代码编程过程</h2><h3 id="创建类和子程序的步骤"><a href="#创建类和子程序的步骤" class="headerlink" title="创建类和子程序的步骤"></a>创建类和子程序的步骤</h3><p>创建类：</p><ul><li>创建类的总体设计。定义类的特定职责，定义类所要隐藏的信息，以及精确地定义类的接口所代表的抽象概念；指出这个类关键的公用方法，标识并设计出类所需用到的重要数据成员。</li><li>创建类的子程序。</li><li>复审并测试整个类。</li></ul><p>创建子程序：设计子程序-检查设计-编写子程序的代码-检查代码</p><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><p>伪代码是指某种用来描述算法、子程序、类或完整程序的工作逻辑的、非形式的、类似于英语的记法。伪代码编程过程则是一种通过书写伪代码而高效地创建程序代码的专门方法。</p><p>有效使用伪代码的指导原则：</p><ul><li>用类似英语的语句来精确描述特定的操作</li><li>避免使用目标编程语言中的语法元素。伪代码能让你在一个比代码本身略高的层次上进行设计。</li><li>在本意的层面上编写伪代码。用伪代码去描述解决问题的方法的意图而不是去写目标语言中如何实现。</li><li>在一个足够低的层次上编写伪代码，以便可以近乎自动地从它生成代码。</li></ul><p>使用伪代码的好处：</p><ul><li>伪代码使得评审更容易</li><li>伪代码支持反复迭代精化的思想</li><li>伪代码使变更更加容易</li><li>伪代码能使给代码作注释的工作量减到最少</li><li>伪代码比其他形式的设计文档更容易维护</li></ul><h3 id="通过伪代码编程过程创建子程序"><a href="#通过伪代码编程过程创建子程序" class="headerlink" title="通过伪代码编程过程创建子程序"></a>通过伪代码编程过程创建子程序</h3><p><strong>设计子程序</strong></p><ul><li>检查先决条件。检查子程序的工作是否定义好了，是否与整体设计相匹配，是否真正必需。</li><li>定义子程序解决的问题。陈述出该子程序将要解决的问题，叙述要足够详细，以便能去创建这个子程序。</li><li>为子程序命名</li><li>决定如何测试子程序</li><li>在标准库中搜寻可用的功能。提高代码的质量和生产率就是重用好的代码</li><li>考虑错误处理。考虑子程序所有可能出错的环节</li><li>考虑效率问题</li><li>研究算法和数据类型</li><li>编写伪代码。首先简要用于一句话类写下子程序的目的作为头部注释再编写高层次的伪代码。</li><li>考虑数据</li><li>检查伪代码</li><li>在伪代码中试验一些想法，留下最好的想法</li></ul><p><strong>编写子程序的代码</strong></p><ul><li>写出子程序的声明。并将头部注释写到编程语言中的注释。</li><li>把伪代码转变为高层次的注释</li><li>在每条注释下面填充代码</li><li>检查代码是否需要进一步分解</li></ul><p><strong>检查代码</strong></p><ul><li>在脑海中检查程序的错误</li><li>编译子程序</li><li>在调试器中逐行执行代码</li><li>测试代码</li><li>消除程序中的错误</li></ul><p><strong>收尾工作</strong></p><ul><li>检查子程序的接口。确认所有的输入、输出数据都参与了计算，并且所有的参数都用到了</li><li>检查整体的设计质量。子程序只做了一件事情，子程序是松散耦合的，子程序采用了防御式设计</li><li>检查子程序中的变量。检查是否存在不准确的变量名称、未被用到的对象、未经声明的变量，以及未经正确初始化的对象等</li><li>检查子程序的语句和逻辑。检查是否存在偏差1这样的错误、死循环、错误的嵌套以及资源泄露</li><li>检查子程序的布局。代码格式化</li><li>检查子程序的文档。</li><li>除去冗余的注释。</li></ul><h3 id="伪代码编程过程的替代方案"><a href="#伪代码编程过程的替代方案" class="headerlink" title="伪代码编程过程的替代方案"></a>伪代码编程过程的替代方案</h3><ul><li>测试先行开发。在任何代码之前先要写出测试用例</li><li>重构。通过对代码进行一系列保持语义的变换和调整来提高代码质量</li><li>契约式设计。认为每一段程序哦都有前条件和后条件</li><li>东拼西凑。</li></ul><h3 id="Key-Points-8"><a href="#Key-Points-8" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>创建类和子程序通常都是一个迭代的过程。在创建子程序的过程中获得的认识常常会反过来影响类的设计</li><li>编写好的伪代码需要使用易懂的英语，避免使用特定编程语言中才有的特性，同时要在意图层面上写为代码</li><li>伪代码编程过程是一个行之有效的做详细设计的工具，它同时让编码工作更容易。伪代码会直接转为注释，从而确保了注释的准确性和实用性。</li><li>不要只停留在你所想到的第一个设计方案上。反复使用伪代码做出多种方案，然后选出其中最佳的一种方案再开始编码</li><li>每一步完成后都要检查你的工作成果，还要鼓励其他人帮你来检查。这样你就会在投入精力最少的时候，用最低的成本发现错误。</li></ul><h2 id="使用变量的一般事项"><a href="#使用变量的一般事项" class="headerlink" title="使用变量的一般事项"></a>使用变量的一般事项</h2><h3 id="数据认知"><a href="#数据认知" class="headerlink" title="数据认知"></a>数据认知</h3><p>创建有效数据的第一步是了解所要创建数据的种类。</p><h3 id="掌握变量定义"><a href="#掌握变量定义" class="headerlink" title="掌握变量定义"></a>掌握变量定义</h3><p><strong>隐式声明</strong></p><p>隐式变量声明对于任何一种语言来说都是最具危险性的特性之一。</p><ul><li>关闭隐式声明</li><li>声明全部的变量</li><li>遵循某种命名规则</li><li>检查变量名</li></ul><h3 id="变量初始化规则"><a href="#变量初始化规则" class="headerlink" title="变量初始化规则"></a>变量初始化规则</h3><ul><li>在声明变量的时候初始化</li><li>在靠近变量第一次使用的位置初始化它</li><li>在靠近第一次使用变量的位置声明并定义该变量</li><li>在可能的情况下使用 final 或者 const</li><li>特别注意计数器和累加器</li><li>在类的构造函数里初始化该类的数据成员</li><li>检查是否需要重新初始化</li><li>一次性初始化具名常量，用可执行代码来初始化变量</li><li>使用编译器设置自动初始所有变量</li><li>利用编译器的警告信息</li><li>检查输入参数的合法性</li><li>使用内存访问检查工具来检查错误的指针</li><li>在程序开始时初始化工作内存</li></ul><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p><strong>使变量引用局部化</strong></p><p>一般而言，把对一个变量的引用局部化，即把引用点尽可能集中在一起总是一种很好的做法。</p><p><strong>尽可能缩短变量的存活时间</strong></p><p>这样变量被错误或无意修改的可能性就降低了。使你能对自己的代码有更准确的认识。减少了初始化错误的可能性。使代码更具可读性。重构也会非常容易。</p><p><strong>减少作用域的一般原则</strong></p><ul><li>在循环开始之前再去初始化该循环里使用的变量。</li><li>直到变量即将被使用时再为其赋值</li><li>把相关语句放在一起或提取成单独的子程序</li><li>开始时采用最严格的可见性，然后根据需要扩展变量的作用域</li></ul><h3 id="持续性"><a href="#持续性" class="headerlink" title="持续性"></a>持续性</h3><p>变量的生命周期有时是难以预料的。</p><ul><li>在程序中加入调试代码或者断言来检查那些关键变量的合理取值</li><li>准备抛弃变量是为其赋上不合理的数值，比如将对象赋为 null</li><li>养成在使用所有数据之前声明和初始化的习惯</li></ul><h3 id="绑定时间"><a href="#绑定时间" class="headerlink" title="绑定时间"></a>绑定时间</h3><ul><li>编码时，硬编码</li><li>编译时，具名常量</li><li>加载时，从外部文件获取</li><li>对象实例化时，窗体创建读取数据</li><li>即时，窗体重绘时读取</li></ul><p>一般而言，绑定事件越早，灵活性就越差，但复杂度也就会越低。</p><h3 id="数据类型和控制结构之间的关系"><a href="#数据类型和控制结构之间的关系" class="headerlink" title="数据类型和控制结构之间的关系"></a>数据类型和控制结构之间的关系</h3><ul><li>序列型数据翻译为程序中的顺序语句。</li><li>选择性数据翻译为程序中的 if 和 case 语句</li><li>迭代型数据翻译成程序中的 for、repeat、while 等循环结构</li></ul><h3 id="为变量指定单一用途"><a href="#为变量指定单一用途" class="headerlink" title="为变量指定单一用途"></a>为变量指定单一用途</h3><p>每个变量只用于单一用途</p><p>避免让代码具有隐含含义</p><p>确保使用了所有已声明的变量</p><h3 id="Key-Points-9"><a href="#Key-Points-9" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>数据初始化过程很容易出错，所以请用本章的初始化方法来避免由于非预期的初始化而造成的错误</li><li>最小化每个变量的作用域。把同一变量的引用点集中在一起。把变量限定在子程序或类的范围内。避免使用全局数据</li><li>把使用相同变量的语句尽可能集中在一起</li><li>早期绑定会减低灵活性，但有助于减少复杂度。晚期绑定可以增加灵活性，同时增加复杂度</li><li>把每个变量用于唯一的用途</li></ul><h2 id="变量名的力量"><a href="#变量名的力量" class="headerlink" title="变量名的力量"></a>变量名的力量</h2><h3 id="选择好变量名的注意事项"><a href="#选择好变量名的注意事项" class="headerlink" title="选择好变量名的注意事项"></a>选择好变量名的注意事项</h3><p>为变量命名时最重要的考虑事项是该名字要完全、准确地描述出该变量所代表的事物。通常对变量的描述就是最佳的变量名。不过太长很不实用。</p><p>一个好记的名字反映的通常是问题而不是解决方案。通常表达的是 waht 而不是 how。</p><p>平均长度在 10 到 16 个字符的时候，调试所花的气力最小，不是让我们把变量名控制在这一范围而是如果发现代码中有很多更短的名字，那么需要检查确保名字含义足够清晰。</p><p>将诸如 Total、Sum、Average、Max、Min 等限定词放在名字的最后。</p><p>使用对仗词。</p><h3 id="为特定类型的数据命名"><a href="#为特定类型的数据命名" class="headerlink" title="为特定类型的数据命名"></a>为特定类型的数据命名</h3><p><strong>为循环下标命名</strong></p><p>如果一个变量在循环之外使用，那么应该取一个比 i、j 或 k 更有意义的名字。</p><p><strong>为状态变量命名</strong></p><p>为状态变量取一个比 flag 更好的名字。为了清楚起见，标记应该用枚举类型、具名常量。</p><p><strong>为临时变量命名</strong></p><p>temp 丝毫没有反应该变量的功能</p><p><strong>为布尔变量命名</strong></p><p>使用典型的布尔变量名。done：表示已完成，error：表示有错误发生，found：表示值已找到，success 或 ok：表示操作成功。</p><p>给布尔变量赋予隐含真假含义的名字。is 前缀的变量名降低了简单逻辑表达式的可读性。</p><p>使用肯定的布尔变量名</p><p><strong>为枚举类型命名</strong></p><p>使用组前缀来表明该类型的成员同属于一个组</p><p><strong>为常量命名</strong></p><p>应该根据变量所表示的含义，而不是该常量所具有的数值为该抽象事物命名</p><h3 id="命名规则的力量"><a href="#命名规则的力量" class="headerlink" title="命名规则的力量"></a>命名规则的力量</h3><p>命名规则带来的好处：</p><ul><li>要求你更多地按规矩行事</li><li>有助于在项目之间传递知识</li><li>有助于你在新项目中更快速地学习代码</li><li>有助于减少名字增生</li><li>弥补编程语言的不足之处</li><li>强调相关变量之间的关系</li></ul><p>规则的存在为你的代码增加了结构，减少了你需要考虑的事情</p><p><strong>何时采用命名规则</strong></p><ul><li>当多个程序员开发一个项目时</li><li>当计划把一个项目转交给另一位程序员来修改和维护时</li><li>当你写程序规模太大，而必须分而治之时</li><li>当你写的程序生命期足够长，可能在一个月或几个月之后重新启动时</li><li>当一个项目中存在一些不常见术语时</li></ul><h3 id="非正式命名规则"><a href="#非正式命名规则" class="headerlink" title="非正式命名规则"></a>非正式命名规则</h3><p>与语言无关的命名规则指导：</p><ul><li>区分变量名和子程序名</li><li>区分类和对象，类名大写，对象名使用明确的名字如：<code>Widget employeeWidget</code></li><li>标识全局变量，比如加上 g_ 前缀</li><li>标识成员变量，比如加上 m_ 前缀</li><li>标识类型声明，比如加上 t_ 前缀</li><li>标识具名常量，比如加上 c_ 前缀</li><li>标识枚举类型的元素，比如加上 e_ 前缀或特定类型的前缀</li><li>在不能保证输入参数只读的语言里标识只读参数，增加 const 前缀</li><li>格式化命名提高可读性，使用 _ 分割</li></ul><h3 id="标准前缀"><a href="#标准前缀" class="headerlink" title="标准前缀"></a>标准前缀</h3><p>ch：字符</p><p>doc：文档</p><p>pa：段落</p><p>src：屏幕区域</p><p>sel：选中范围</p><p>wn：窗体</p><p>c：数量</p><p>first：数组第一个元素</p><p>g：全局变量</p><p>i：数组下标</p><p>last：数组最后一个元素</p><p>lim：lim 等于 last + 1</p><p>m：类一级的变量</p><p>max：绝对的最后一个元素</p><p>min：绝对的第一个元素</p><p>p：指针</p><h3 id="创建具有可读性的短名字"><a href="#创建具有可读性的短名字" class="headerlink" title="创建具有可读性的短名字"></a>创建具有可读性的短名字</h3><p>缩写的一般指导原则：</p><ul><li>使用标准的缩写</li><li>去掉所有非前置元音，如 computer 变成 cmptr，screen 变成 scrn</li><li>去掉虚词 and，or the 等</li><li>使用每个单词的第一个或前几个字母</li><li>统一在单词的第几个字母后截断</li><li>保留每个单词的第一个或最后一个字母</li><li>使用名字中的每一个重要单词，最多不超过三个</li><li>去除无用的后缀，如 img，ed 等</li><li>保留不要改变变量的含义</li></ul><p>名字对代码读者的意义要比对作者更重要</p><h3 id="应该避免的名字"><a href="#应该避免的名字" class="headerlink" title="应该避免的名字"></a>应该避免的名字</h3><ul><li>避免使用令人误解的名字或缩写。确保名字的含义是明确的</li><li>避免使用具有相似含义的名字</li><li>避免使用具有不同含义却有相似名字的变量</li><li>避免使用发音 相近的名字</li><li>避免在名字中使用数字</li><li>避免在名字中拼错单词</li><li>避免使用英语中常常拼错的单词</li><li>不要仅靠大小写来区分变量名</li><li>避免使用多种自然语言</li><li>避免使用标准类型、变量和子程序的名字</li><li>不要使用与变量含义完全无关的名字</li><li>避免在名字中包含易混淆的字符</li></ul><h3 id="Key-Points-10"><a href="#Key-Points-10" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>好的变量名是提高程序可读性的一项关键要素。对特殊种类的变量，比如循环下标和状态变量，需要加以特殊的考虑。</li><li>名字要尽可能地具体。那些模糊或者太通用以至于能够用于多种目的的名字通常不是很好</li><li>命名规则应该能够区分局部数据、类数据和全局数据。它们还应该区分类型名、具名常量、枚举常量和变量名</li><li>现代编程语言很少用到缩写</li><li>代码阅读的次数远远多于编写的次数。确保你所取得名字更侧重于阅读方便而不是编写方便</li></ul><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="数值概论"><a href="#数值概论" class="headerlink" title="数值概论"></a>数值概论</h3><p><strong>避免使用“神秘数值”</strong></p><p>神秘数值是在程序中出现的、没有经过解释的数值文字量。应该使用具名常量或其他手段代替神秘数值。</p><p>一条很好的经验法则是，程序主体中仅能出现的文字量就是 0 和 1。任何其他文字量都应该换成更有描述性的表示。</p><p><strong>预防除零错误</strong></p><p>使用除法符号就都有考虑分母是否可能为零</p><p><strong>使类型转换变得明显</strong></p><p><strong>避免混合类型的比较</strong></p><p><strong>注意编译器的警告</strong></p><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><ul><li>检查整数除法</li><li>检查整数溢出</li><li>检查中间结果溢出</li></ul><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><ul><li>避免数量级相差巨大的数之间的加减运算</li><li>避免等量判断，而是相减小于一定值</li><li>处理舍入误差问题</li></ul><h3 id="字符和字符串"><a href="#字符和字符串" class="headerlink" title="字符和字符串"></a>字符和字符串</h3><ul><li>避免使用神秘字符和神秘字符串</li><li>避免 off-by-one 错误</li><li>在程序生命期中尽早决定国际化&#x2F;本土化策略</li><li>多语言使用 Unicode</li></ul><h3 id="布尔变量"><a href="#布尔变量" class="headerlink" title="布尔变量"></a>布尔变量</h3><ul><li>用布尔变量对程序加以文档说明</li><li>用布尔变量来简化复杂的判断</li></ul><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><ul><li>用枚举类型来提高可读性</li><li>用枚举类型提高可靠性</li><li>用枚举类型简化修改</li><li>用枚举类型作为布尔变量的替换方案</li><li>检查非法数值</li><li>定义枚举第一项以及最后一项，以便于循环边界</li><li>把枚举的第一个元素留作非法值</li></ul><h3 id="具名常量"><a href="#具名常量" class="headerlink" title="具名常量"></a>具名常量</h3><ul><li>在数据声明中使用具名常量</li><li>避免使用文字量，即使是安全的</li><li>用具有适当作用域的变量或类来模拟具名常量</li><li>统一地使用具名常量</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li>确认所有数组下标没有越界</li><li>考虑使用容器取代数组或将数组作为顺序化结构来处理</li><li>检查数组的边界点</li><li>多维数组，确认下标的使用顺序是正确的</li><li>提防小标串话，即嵌套循环小标使用错误</li></ul><h3 id="创建自己的类型"><a href="#创建自己的类型" class="headerlink" title="创建自己的类型"></a>创建自己的类型</h3><ul><li>给所创建的类型取功能导向的名字</li><li>避免使用预定义类型</li><li>不要重定义一个预定义的类型</li><li>定义替代类型以便于移植</li><li>考虑创建一个类而不是使用 typeof</li></ul><h3 id="Key-Points-11"><a href="#Key-Points-11" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>使用特定的数据结构就意味着要记住适用于各个类型的很多独立的原则。</li><li>如果语言支持，创建自定义类型会使得程序更容易修改，并更具有自描述性</li><li>当使用 typeof 或者其等价方式创建一个简单类型的时候，考虑是否更应该创建一个新的类</li></ul><h2 id="不常见的数据类型"><a href="#不常见的数据类型" class="headerlink" title="不常见的数据类型"></a>不常见的数据类型</h2><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><h3 id="全局数据"><a href="#全局数据" class="headerlink" title="全局数据"></a>全局数据</h3><p>全局数据可以在程序中任意一个位置访问。</p><p>全局数据使用可能遇到的问题：</p><ul><li>无意间修改了全局数据</li><li>与全局数据有关的奇异和令人激动的别名问题</li><li>与全局数据有关的代码重入问题</li><li>全局数据阻碍代码重用</li><li>与全局数据有关的非确定的初始化顺序事宜</li><li>全局数据破坏了模块化和智力上的可管理性</li></ul><p>使用全局数据的理由：</p><ul><li>保存全局数值</li><li>模拟具名常量</li><li>模拟枚举类型</li><li>消除流浪数据</li></ul><p>用访问器子程序来取代全局数据，把数据隐藏到类里面。</p><p>降低使用全局数据的风险：</p><ul><li>创建一种命名规则来突出全局变量</li><li>为全部的全局变量创建一份注释良好的清单</li><li>不要用全局变量存放中间结果</li><li>不要把所有的数据都放在一个大对象中并到处传递</li></ul><h3 id="Key-Points-12"><a href="#Key-Points-12" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>结构体可以使程序更简单、更容易理解，以及更容易维护</li><li>每当你打算使用结构体时，考虑使用类是不是会工作得更好</li><li>指针很容易出现问题。用访问器子程序或类以及防御式编程实践来保护自己的代码</li><li>避免使用全局变量，比是因为它们很危险，而是你可以用其他更好的方法来取代它们</li><li>如果你不得不使用全局变量，那么通过访问器子程序来使用它。访问器子程序能为你带来全局变量所能带来得一切优点。</li></ul><h2 id="组织直线型代码"><a href="#组织直线型代码" class="headerlink" title="组织直线型代码"></a>组织直线型代码</h2><h3 id="必须有明确顺序的语句"><a href="#必须有明确顺序的语句" class="headerlink" title="必须有明确顺序的语句"></a>必须有明确顺序的语句</h3><ul><li>设法组织代码，使依赖关系变得更加明显</li><li>使子程序名能突显依赖关系</li><li>利用子程序参数明确显示依赖关系</li><li>用注释对不清晰的依赖关系进行说明</li><li>用断言或者错误处理代码来检查依赖关系</li></ul><h3 id="顺序无关的语句"><a href="#顺序无关的语句" class="headerlink" title="顺序无关的语句"></a>顺序无关的语句</h3><p>作为一条普遍性原则，要让程序易于自上而下阅读，而不是让读者得目光跳来跳去。</p><p>把相关的语句组织在一起，你有可能发现它们之间有很强的联系，你可能希望把这些关联度很强的代码独立成子程序</p><h3 id="Key-Points-13"><a href="#Key-Points-13" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>组织直线型代码的最主要原则是按照依赖关系进行排列</li><li>可以用好的子程序名、参数列表、注释，以及如果代码足够重要，内存管理变量来让依赖关系变得更加明显</li><li>如果代码之间没有顺序依赖关系，那就设法使相关的语句尽可能地接近</li></ul><h2 id="使用条件语句"><a href="#使用条件语句" class="headerlink" title="使用条件语句"></a>使用条件语句</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><p><strong>if-then 语句</strong></p><ul><li>首先写正常代码路径，再处理不常见情况</li><li>确保对于等量的分支是正确的</li><li>把正常情况的处理放在 if 后面而不要放在 else 后面</li><li>让 if 子句后面跟随一个有意义的语句</li><li>考虑 else 语句。空的 else 语句带上注释解释为啥 else 语句没必要更具可读性</li><li>测试 else 子句的正确性</li><li>检查 if 和 else 子句是不是弄反了</li></ul><p><strong>if-then-else 语句</strong></p><ul><li>利用布尔函数调用简化复杂的检测</li><li>把最常见的情况放在最前面</li><li>确保所有情况都考虑到了</li><li>使用 case 代替 if-then-else 语句，因为更容易编写与阅读</li></ul><h3 id="case-语句"><a href="#case-语句" class="headerlink" title="case 语句"></a>case 语句</h3><p><strong>为 case 选择最有效的排列顺序</strong></p><ul><li>按字母顺序或按数字顺序排列各种情况</li><li>把正常的情况放在前面</li><li>按执行效率排列 case 语句</li></ul><p><strong>使用 case 诀窍</strong></p><ul><li>简化每种情况对应的操作。如果代码复杂就应该写一个子程序然后在 case 语句中调用</li><li>不要为了使用 case 语句而特意制造一个变量</li><li>把 default 子句只用于检查真正的默认情况</li><li>利用 default 子句检查错误</li><li>避免代码越过一条 case 子句的末尾，使用 break</li></ul><h3 id="Key-Points-14"><a href="#Key-Points-14" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>对于简单的 if-else 语句，请注意 if 子句和 else 子句的顺序，特别是用它类处理大量错误的时候，要确认正确的情况是最清晰的</li><li>对于 if-then-else 语句串和 case 语句，选择一种最有利于阅读的排序</li><li>为了捕捉错误，可以使用 case 语句中的 default 子句，或者使用 if-then-else 语句最后一个 else 语句</li><li>各种控制结构并不是生来平等的，请为代码的每个部分选用最合适的控制结构</li></ul><h2 id="控制循环"><a href="#控制循环" class="headerlink" title="控制循环"></a>控制循环</h2><h3 id="选择循环的种类"><a href="#选择循环的种类" class="headerlink" title="选择循环的种类"></a>选择循环的种类</h3><ul><li>计数循环（counted loop），执行的次数是一定的</li><li>连续求值的循环（continuously evaluated loop），预先不知道将要执行多少次，它会每次迭代时检查是否应该结束</li><li>无限循环（endless loop），一旦启动就会一直执行下去</li><li>迭代器循环（iterator loop），对容器类里面的每个元素执行一次操作</li></ul><p><strong>什么时候用 while 循环</strong></p><p>执行每通过这种循环一次，while 只做一次循环终止的检测，而且有关 while 循环的最主要事项就是决定在循环开始处还是结尾处检测。</p><p><strong>什么时候使用带退出的循环</strong></p><p>带退出的循环就是终止条件出现在循环中间而不是开始或者末尾的循环。</p><p>如果把循环条件检测放在循环开始或结束处，那就需要一个半循环的代码。</p><p>把所有退出条件放在一处并且用注释来阐明操作意图</p><p><strong>何时使用 for 循环</strong></p><p>如果需要一个执行次数固定的循环，for 循环就是一个很好的选择。可以在 for 循环来执行哪些不需要循环控制的简单操作。</p><p>如果存在一个必须使执行从循环中跳出的条件，就应改为 while 循环，类似地，不要在 for 循环里通过直接修改下标值的方式迫使它终止。</p><p><strong>何时使用 foreach 循环</strong></p><p>很适用于对数组或者其他容器的各项元素执行操作。</p><h3 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h3><p>减少能影响该循环各种因素的数量。把控制尽可能地放在循环体外。</p><p><strong>进入循环</strong></p><ul><li>只从一个位置进入循环</li><li>把初始化代码紧放在循环前面</li><li>用 while(true) 表示无限循环</li><li>在适当的情况下多用 for 循环</li><li>在 while 循环更适用的时候，不要使用 for 循环</li></ul><p><strong>处理好循环体</strong></p><ul><li>用 { } 把循环中的语句括起来</li><li>避免空循环</li><li>把循环内务操作要么放在循环开始，要么放在循环末尾，内务操作即 i++ 这样控制循环的语句</li><li>一个循环只做一件事</li></ul><p><strong>退出循环</strong></p><ul><li>设法确认循环能够终止</li><li>使循环终止条件看起来很明显</li><li>不要为了终止循环而胡乱改动 for 循环下标</li><li>避免出现依赖于循环下标最终取值的代码</li><li>考虑使用安全计数器</li></ul><p><strong>提前退出循环</strong></p><ul><li>考虑在 while 循环中使用 break 语句而不是布尔标记</li><li>小心那些有很多 break 散步其中的循环</li><li>在循环开始处用 continue 进行判断，如果 continue 出现在循环末尾就应该改用 if</li><li>使用带标号 break 结构</li><li>使用 break 和 continue 时要小心谨慎</li></ul><p><strong>检查端点</strong></p><p>对于一个简单的循环，在创建循环的时候应该检查开始的情况、任意选择中间情况、以及最终的情况，确认不会出现错误。</p><p>如果包含复杂的计算，就应该拿出计算器来手动检查计算是否准确。</p><p>通过在头脑中模拟和手工运算而获益多多。</p><p><strong>使用循环变量</strong></p><ul><li>用整数或枚举类型表示数组和循环的边界</li><li>在嵌套循环中使用有意义的变量名来提高可读性</li><li>用有意义的名字来避免循环下标串话</li><li>把循环下标变量的作用域限制在本循环内</li></ul><p><strong>循环的长度</strong></p><ul><li>循环要尽可能地短，以便能够一目了然</li><li>把嵌套限制在 3 层以内</li><li>把长循环的内容移到子程序里</li><li>要让长循环格外清晰</li></ul><h3 id="轻松创建循环"><a href="#轻松创建循环" class="headerlink" title="轻松创建循环"></a>轻松创建循环</h3><p>从具体事件入手，在同一时间只考虑一件事，以及从简单的部分开始创建循环。在开发更通用、更复杂的循环过程中，你迈的步子要小，并且每一步的目的要容易理解。这样你可以减少在同一时间需要关注的代码量，从而减少出错的可能。</p><h3 id="循环和数组的关系"><a href="#循环和数组的关系" class="headerlink" title="循环和数组的关系"></a>循环和数组的关系</h3><p>大多数情况，循环就是用来操纵数组的，但是循环结构和数组不是天生就相互关联的。</p><p>有些解决方案时特定的语言，你所用的语言将在相当大的程度上影响到你的解决方案</p><h3 id="Key-Points-15"><a href="#Key-Points-15" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>循环很复杂。保持循环简单将有助于别人阅读你的代码</li><li>保持循环简单的技巧包括：避免使用怪异的循环、减少嵌套层次、让入口和出口一目了然、把内务操作放在一处</li><li>循环下标很容易被滥用。因此命名要准确，并且把它们各自仅用于一个用途</li><li>仔细地考虑循环，确认它在每一种情况下都运行正常，并且在所有可能的条件下都能退出。</li></ul><h2 id="不常见的控制结构"><a href="#不常见的控制结构" class="headerlink" title="不常见的控制结构"></a>不常见的控制结构</h2><h3 id="子程序中的多处返回"><a href="#子程序中的多处返回" class="headerlink" title="子程序中的多处返回"></a>子程序中的多处返回</h3><p>return 语句的指导原则：</p><ul><li>如果能增强可读性，那么就使用 return</li><li>用防卫子句来简化复杂的错误处理</li><li>减少每个子程序中 return 的数量，只有增强可读性的时候才去使用</li></ul><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>编写递归子程序的关键目标之一就是要防止产生无穷递归。</p><p>编写递归的技巧：</p><ul><li>确认递归能够停止</li><li>使用安全计数器防止出现无穷递归</li><li>把递归限制在一个子程序内</li><li>留心栈空间</li><li>不要用递归取计算阶乘或斐波那契数列</li></ul><p>在用递归之前考虑替代方案，用递归能做到的，同样也能用栈和循环做到</p><h3 id="针对不常见控制结构的观点"><a href="#针对不常见控制结构的观点" class="headerlink" title="针对不常见控制结构的观点"></a>针对不常见控制结构的观点</h3><p>软件开发这一领域是在限制程序员对代码的使用中得到发展的</p><h3 id="Key-Points-16"><a href="#Key-Points-16" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>多个 return 可以增强子程序的可读性和维护性，同时可以避免产生很深的嵌套逻辑。但是使用它的时候要多加小心</li><li>递归能过够很优雅地解决一小部分问题。对它的使用也要倍加小心</li></ul><h2 id="表驱动法"><a href="#表驱动法" class="headerlink" title="表驱动法"></a>表驱动法</h2><p>表驱动法是一种编程模式，从表里面查找信息而不使用逻辑语句。</p><h3 id="表驱动法使用总则"><a href="#表驱动法使用总则" class="headerlink" title="表驱动法使用总则"></a>表驱动法使用总则</h3><ul><li>从表中如何查询条目的问题</li><li>从表中查询记录的方法，直接访问、索引访问、阶梯访问</li></ul><h3 id="直接访问表"><a href="#直接访问表" class="headerlink" title="直接访问表"></a>直接访问表</h3><p>直接访问代替了更为复杂的逻辑控制结构，直接在表中找到想要的信息</p><h3 id="索引访问表"><a href="#索引访问表" class="headerlink" title="索引访问表"></a>索引访问表</h3><p>使用索引的时候，先用一个基本类型的数据从索引表中查出一个键，再用键查询感兴趣的数据。</p><h3 id="阶梯访问表"><a href="#阶梯访问表" class="headerlink" title="阶梯访问表"></a>阶梯访问表</h3><p>表中的记录对于不同的数据范围有效，而不是对不同的数据点有效</p><h3 id="Key-Points-17"><a href="#Key-Points-17" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>表提供了一种复杂的逻辑和继承结构的替代方案。如果你发现自己对某个应用程序的逻辑或者继承树感到困惑，那么问问自己是否可以通过一个查询表加以简化</li><li>使用表的一项关键决策是决定如何1去访问表。可以采取直接访问、索引访问和阶梯访问</li><li>使用表的另一个关键决策是决定应该把什么内容放入表中</li></ul><h2 id="一般控制问题"><a href="#一般控制问题" class="headerlink" title="一般控制问题"></a>一般控制问题</h2><h3 id="布尔表达式"><a href="#布尔表达式" class="headerlink" title="布尔表达式"></a>布尔表达式</h3><p>除了最简单的、要求语句按顺序执行的控制结构之外，所有的控制结构都依赖于布尔表达式的求值</p><p>在布尔表达式中应该用标识符 true 和 false，而不是用 0 和 1 等数值。</p><p>隐式地比较布尔值与 true 和 false。如 <code>a &gt; b</code> 而不是 <code>(a &gt; b) = true</code></p><p>简化复杂的表达式：</p><ul><li>拆分复杂的判断并引入新的布尔变量</li><li>把复杂的表达式做成布尔函数</li><li>用决策来替换复杂的条件。使用决策表（decision-table）查询操作</li></ul><p>编写肯定形式的布尔表达式：</p><ul><li>在 if 语句中，把判断条件从否定形式转换为肯定形式，并且互换 if 和 else 子句中代码</li><li>用狄摩根定理简化否定的布尔判断</li></ul><table><thead><tr><th>原表达式</th><th>等价表达式</th></tr></thead><tbody><tr><td>not A and not B</td><td>not (A or B)</td></tr><tr><td>not A and B</td><td>not (A or not B)</td></tr><tr><td>A and not B</td><td>not (not A or B)</td></tr><tr><td>A and B</td><td>not (not A or not B)</td></tr><tr><td>not A or not B</td><td>not (A and B)</td></tr><tr><td>not A or B</td><td>not (A and not B)</td></tr><tr><td>A or not B</td><td>not (not A and B)</td></tr><tr><td>A or B</td><td>not (not A and not B)</td></tr></tbody></table><p>用括号使布尔表达式更清晰，把布尔表达式整个括在括号里是一种很好的习惯。</p><p>理解布尔表达式是如何求值的</p><p>按照数轴的顺序编写数值表达式</p><p>与 0 比较的指导：</p><ul><li>隐式地比较逻辑变量</li><li>把数和 0 相比较</li><li>把指针与 null 比较</li></ul><p><strong>布尔表达式的常见问题</strong></p><ul><li>在 C 家族语言中，应该把常量放在比较的左端</li><li>C++ 中可以考虑创建预处理替换 &amp;&amp; || 和 &#x3D;&#x3D;</li><li>在 java 中，理解 &#x3D;&#x3D; 和 a.equals(b) 的差异</li></ul><h3 id="复合语句块"><a href="#复合语句块" class="headerlink" title="复合语句块"></a>复合语句块</h3><p>把括号对一起写出，以免漏掉</p><p>用括号把条件表达清楚</p><h3 id="空语句"><a href="#空语句" class="headerlink" title="空语句"></a>空语句</h3><p>小心使用空语句</p><p>为空语句创建一个 DoNothing() 预处理或者内联函数</p><p>考虑如果换用一个非空循环体，是否让代码更清晰</p><h3 id="驯服危险的深层嵌套"><a href="#驯服危险的深层嵌套" class="headerlink" title="驯服危险的深层嵌套"></a>驯服危险的深层嵌套</h3><p>通过重复检测条件中的某一部分来简化嵌套的 if 语句</p><p>用 break 块来简化嵌套 if</p><p>把嵌套 if 转换为一组 if-then-else 语句</p><p>把嵌套 if 转换为 case 语句</p><p>把深层嵌套的代码抽取出来放进单独的子程序</p><p>使用一种更面向对象的方法</p><p>重新设计深层嵌套的代码</p><h3 id="结构化编程"><a href="#结构化编程" class="headerlink" title="结构化编程"></a>结构化编程</h3><p>核心思想：一个应用程序应该只采用单入单出的控制结构（也称单一入口、单一出口的控制结构）。</p><p>一个结构化的程序将按照一种有序且有规则的方式执行，不会做不可预知的随便跳转。</p><p>三个组成部分：</p><ul><li>顺序：一组按照先后顺序执行的语句</li><li>选择：有选择的执行语句的控制结构</li><li>迭代：一种使一组语句多次执行的控制结构</li></ul><p>结构化编程的额中心论点是，任何一种控制流都可以由顺序、选择和迭代这三种结构生成。</p><h3 id="控制结构与复杂度"><a href="#控制结构与复杂度" class="headerlink" title="控制结构与复杂度"></a>控制结构与复杂度</h3><p>程序的复杂度在很大程度上决定了理解程序所需要花费的精力。</p><p><strong>降低复杂度的一般原则</strong></p><p>通过脑力联系提高自身的脑力游戏水平</p><p>降低应用程序的复杂度以及为了理解它所需的专心程度</p><p>度量复杂度：Tom McCabe 方法</p><p>通过计算子程序中的决策点的数量来衡量复杂度。从 1 开始计算，遇到 if、while、repeat、for、and、or 都加 1，case 语句中每一种情况都加 1。</p><p>决策点在 0 - 5 子程序可能还不错，6 - 10 得想办法简化子程序。10+ 把子程序的某一部分拆分成零一个子程序并调用。</p><h3 id="Key-Points-18"><a href="#Key-Points-18" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>使布尔表达式简单可读，将非常有助于提高你的代码的质量</li><li>深层次的嵌套使得子程序变得难以理解。你可以避免这么做</li><li>结构化编程是一种简单并且适用的得思想，你可以通过把顺序、选择和循环三者组合起来开发出任何程序</li><li>将复杂度降低到最低水平是编写高质量代码的关键</li></ul><h2 id="软件质量概述"><a href="#软件质量概述" class="headerlink" title="软件质量概述"></a>软件质量概述</h2><h3 id="软件质量的特性"><a href="#软件质量的特性" class="headerlink" title="软件质量的特性"></a>软件质量的特性</h3><p>外在特性，产品的用户能够感受到的部分：</p><ul><li>正确性（Correctness）指系统规范、设计和实现方面的错误的稀少程度</li><li>可用性（Usability）指用户学习和使用一个系统的容易程度</li><li>效率（Efficiency）指软件是否尽可能少地占用系统资源、包括内存和执行时间</li><li>可靠性（Reliablity）在指定的必须条件下，一个系统完成所需要功能的能力</li><li>完整性（Integrity）指系统阻止对程序或数据进行未经验证或者不正确访问的能力。</li><li>适应性（Adaptability）指为特定的应用或者环境设计的系统，在不修改的情况下，能够在其他应用或者环境中使用的范围</li><li>精确性（Accuracy）指对于一个已经开发出的系统，输出结果的误差程度，尤其在输出的是数量值的时候。</li><li>健壮性（Robustness）指的是系统在接收无效输入或者处于压力环境时继续正常运行的能力</li></ul><p>内在特性：</p><ul><li>可维护性（Maintainability）指是否能够很容易对系统进行修改，改变或者增加功能，提高性能以及修正缺陷</li><li>灵活性（Flexibility）指假如一个系统是为特定用途或者环境而设计的，那么当该系统被用于其他目的或者环境的时候，需要对系统做修改的程度</li><li>可移植性（Portability）指为了在原来设计的特定环境之外运行，对系统所进行修改的难易程度</li><li>可重用性（Reusability）指系统的某些部分可被应用到其它系统中的程度以及此项工作的难易程度</li><li>可读性（Readability）指阅读并理解系统代码的难易程度，尤其是在细节语句的额层次上</li><li>可测试性（Testability）指的是可以进行何种程度的单元测试或者系统测试，以及在何种程度上验证系统是否符合需求</li><li>可理解性（Understandability）指在系统组织的细节语句的层次上理解整个系统的难易程度</li></ul><h3 id="改善软件质量的技术"><a href="#改善软件质量的技术" class="headerlink" title="改善软件质量的技术"></a>改善软件质量的技术</h3><p>软件质量保证是一个需要预先计划、系统性的活动，其目的就是为了确保系统具备人们所期望的特性。</p><ul><li>软件质量目标，明确定义软件质量的目标</li><li>明确定义质量保证工作</li><li>测试策略</li><li>软件工程指南</li><li>非正式技术复查</li><li>正式技术复查</li><li>外部审查</li></ul><p><strong>开发过程</strong></p><ul><li>对变更进行控制的过程，有效地管理变更更是实现高质量的一个关键</li><li>结果的量化，量化结果能告诉你就计划成功与否</li><li>制作原型（Prototyping）制作原型是指开发出系统中关键功能的实际模型</li></ul><p><strong>设置目标</strong></p><p>明确设置质量目标是开发高质量软件的一个简单而清晰的步骤，但它常常被忽视。</p><h3 id="不同质量保障技术的相对效能"><a href="#不同质量保障技术的相对效能" class="headerlink" title="不同质量保障技术的相对效能"></a>不同质量保障技术的相对效能</h3><p><strong>缺陷检测率</strong></p><p>测定所找到的缺陷占该项目当时所有存在缺陷的百分比，是评估各种缺陷检测方法的一种途径。</p><p>综合使用多种技术才能达到更大的缺陷排除率，即使是单元测试加集成测试组合组合在一起也只能达到 30%~35% 之间的检测率。</p><p>阅读代码每小时能够检测出的缺陷要比测试高出 80% 左右。且检查比测试的成本更小。</p><p><strong>修正缺陷的成本</strong></p><p>越早发现错误的检测方法可以降低修正缺陷的成本。</p><p>一个有限的软件质量项目的底线。必须包括在开发的所有阶段联合使用多种技术</p><ul><li>对所有需求、架构以及系统关键部分的设计进行正式检查</li><li>建模或者创建原型</li><li>代码阅读或者检查</li><li>执行测试</li></ul><h3 id="什么时候进行质量保证"><a href="#什么时候进行质量保证" class="headerlink" title="什么时候进行质量保证"></a>什么时候进行质量保证</h3><p>需求或架构上的错误往往会产生更为广泛的影响。尽早捕捉错误才能有效地节省成本。</p><p>缺陷可能在任何阶段渗透到软件中。因此需要在早期阶段就开始强调质量保证工作，并且将其贯彻到项目的余下部分中。</p><h3 id="软件质量的普遍原理"><a href="#软件质量的普遍原理" class="headerlink" title="软件质量的普遍原理"></a>软件质量的普遍原理</h3><p>软件质量的普遍原理就是改善质量以降低开发成本</p><p>提高生产效率和改善质量的最佳途径就是减少花在代码返工上的时间，无论返工的代码是由需求、设计改变还是调试引起的。</p><p>绝大多数项目的最大规模的一种活动就是调试以及修正那些无法正常工作的代码。</p><p>把时间投入到前期工作中，能让程序员在后期工作中节省更多时间。</p><h3 id="Key-Points-19"><a href="#Key-Points-19" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>开发高质量代码最终并没有要求你付出更多，只是你需要对资源进行重新分配，以低廉的成本来防止缺陷，从而避免代价高昂的修整工作</li><li>并非所有质量保证目标都可以全部实现。明确哪些目标是你希望达到的，并就这些目标和团队成员进行沟通</li><li>没有任何一种错误检查方法能够解决全部问题，测试本身并不是排除错误的最有效方法。成功的质量保证计划应该使用多种不同的技术来检查各种不同类型的错误</li><li>在构建期间应该使用一些有效的质量保证技术，但在之前，一些具有同样强大功能的质量保证技术也是必不可少的，错误发现越早，它与其余代码的纠缠就越少，由此造成的损失也越小</li><li>软件领域的质量保证是面向过程的。软件开发与制造业不一样，在这里并不存在影响最终产品重复阶段。因此，最终产品的质量收到开发软件所用的过程的控制。</li></ul><h2 id="协同构建"><a href="#协同构建" class="headerlink" title="协同构建"></a>协同构建</h2><h3 id="协同开发实践概要"><a href="#协同开发实践概要" class="headerlink" title="协同开发实践概要"></a>协同开发实践概要</h3><p>协同构建包括结对编程、正式检查、非正式技术复查、文档阅读，以及其他让开发人员共同承担创建代码及其他工作产品责任的技术。</p><p>协同构建的首要目的就是改善软件的质量。</p><p>在减少软件中的缺陷数量的同时，开发周期也能得到缩短。</p><p>复查能让程序员得到关于他们自己代码的反馈，复查是培养新人以提高其代码质量的好机会。</p><p>一个采用正式检查的团队报告称，复查可以快速地将所有开发者的水平提高到最优秀的开发者的高度。</p><h3 id="结对编程"><a href="#结对编程" class="headerlink" title="结对编程"></a>结对编程</h3><p>在进行结对编程时候，一位程序员敲代码，另外一位注意有没有出现错误，并考虑某些策略性的问题。</p><p>结对编程的关键：</p><ul><li>用编码规范来支持结对编程</li><li>不要让结对编程变成旁观</li><li>不要强迫在简单的问题上使用结对编程</li><li>有规律地对结对人员和分配的工作任务进行轮换</li><li>鼓励双方跟上对方的步伐</li><li>确认两个人都能够看到显示器</li><li>不要强迫程序员与自己关系紧张的人结对</li><li>避免新手组合</li><li>指定一个组长</li></ul><p>结对编程的好处：</p><ul><li>结对能使人们在压力之下保持更好的状态</li><li>能够改善代码质量。代码的可读性和可理解性都倾向于上升至团队中最优秀程序员的水平</li><li>能缩短进度时间表。更快地编写代码，处所更少，这样后期修正缺陷的时间会更少</li><li>传播公司文化，知道初级程序员，以及培养集体归属感</li></ul><h3 id="正式检查"><a href="#正式检查" class="headerlink" title="正式检查"></a>正式检查</h3><p>详查（正式检查）是一张特殊的复查。</p><h3 id="Key-Points-20"><a href="#Key-Points-20" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>协同开发实践往往能比测试发现更多的缺陷，并且更有效率</li><li>协同开发实践所发现错误的类型通常跟测试所发现的不同，这意味着你需要同时使用详查和测试来保证你软件的质量</li><li>正式检查通过运用核对表、准备工作、明确定义的角色以及对方法的持续改善，将缺陷侦测的效率提升至最高</li><li>结对编程拥有和详查相同的成本，并能产生质量相当的代码。</li><li>正式检查可以应用在出代码之外的很多工作成果上</li><li>走查和代码阅读的详查的替代方案</li></ul><h2 id="开发者测试"><a href="#开发者测试" class="headerlink" title="开发者测试"></a>开发者测试</h2><p>测试是最常见的改善质量的活动。</p><ul><li>单元测试（Unit testing）是将一个程序员或者一个开发团队所编写的，一个完整的类、子程序或者小程序，从完整的系统中隔离出来进行测试</li><li>组件测试（Component testing）是将一个类、包、小程序或者其他程序元素，从一个更加完整的系统中隔离出来进行测试，这些被测代码涉及到多个程序员或者多个团队</li><li>集成测试（Integration testing）是对两个或更多的类、包、组件或者子系统进行的联合测试，这些组件由多个程序员或者开发团队所创建。</li><li>回归测试（Regression testing）是指重复执行以前的测试用例，以便在原先通过了相同测试集合的软件中查找缺陷</li><li>系统测试（System testing）是在最终的配置下运行整个软件。以便测试安全、性能、资源消耗、时序方面的问题。</li></ul><p>测试通常分为两大类，黑盒测试和白盒测试，黑盒测试指的是测试者无法了解测试对象内部工作机制的测试。白盒测试指的是测试者清楚待测试对象内部工作机制的测试。</p><p>测试是一种检查错误的方法，而调试意味着错误已经被发现。</p><p>开发者测试的推荐方法：</p><ul><li>对每一项相关的需求进行测试，以确保需求都已经被实现。</li><li>对每一个相关的设计关注点进行测试，以确保设计已经被实现</li><li>用基础测试来扩充针对需求和设计的详细测试用例</li><li>使用一个检查表，记录你在本项目所犯以及在过去项目所犯的错误类型</li></ul><p>开发者测试的局限性：</p><ul><li>开发者测试倾向于干净测试</li><li>开发者测试对覆盖率有过于乐观的估计</li><li>开发者测试往往会忽略一些更复杂的测试覆盖率类型</li></ul><h3 id="测试技巧锦囊"><a href="#测试技巧锦囊" class="headerlink" title="测试技巧锦囊"></a>测试技巧锦囊</h3><p><strong>结构化基础测试</strong></p><p>你需要去测试程序中的每一条语句至少一次</p><p><strong>数据流测试</strong></p><p>编写数据流测试用例的关键是要对所有可能的定义，使用路径进行测试。</p><p><strong>等价类划分</strong></p><p>如果两个用例能揭示的错误完全相同，那么只有一个就够了。</p><p><strong>猜测错误</strong></p><p>猜测程序会在哪里出错的基础之上建立测试用例。</p><p><strong>边界值分析</strong></p><p>写一些测试用例来测试边界值条件</p><h3 id="典型错误"><a href="#典型错误" class="headerlink" title="典型错误"></a>典型错误</h3><ul><li>大多数错误的影响范围是相当有限的</li><li>许多错误发生在构建的范畴之外</li><li>大多数的构建期错误是编程人员的失误造成的</li><li>笔误（拼写错误）是一个常见的问题根源</li><li>错误理解设计</li><li>大多数错误都很容易修正</li><li>总结所在组织中对付错误的经验</li></ul><p>减少测试用例当中的错误量：</p><ul><li>检查工作，对测试数据进行检查</li><li>开发软件的时候就要计划好测试用例</li><li>保留测试用例</li><li>将单元测试纳入测试框架</li></ul><h3 id="改善测试过程"><a href="#改善测试过程" class="headerlink" title="改善测试过程"></a>改善测试过程</h3><p><strong>有计划的测试</strong></p><p>有效测试的关键之一就是在待测试项目开始之初就拟定测试计划</p><p><strong>回归测试</strong></p><p>回归测试每次都应该使用相同的测试用例，添加新的测试用例的同时，也应保留旧的测试用例</p><p><strong>自动化测试</strong></p><p>管理回归测试唯一可行的方法就是将其变成一种自动化的过程</p><h3 id="保留测试记录"><a href="#保留测试记录" class="headerlink" title="保留测试记录"></a>保留测试记录</h3><ul><li>却显得管理方面描述</li><li>问题的完整描述</li><li>复现错误所需要的步骤</li><li>绕过该问题的建议</li><li>相关的缺陷</li><li>问题的严重程度</li><li>缺陷根源：需求、设计、编码还是测试</li><li>对编码缺陷分类</li><li>修正错误所需改变的类和子程序</li><li>缺陷所影响的代码行数</li><li>查找该错误所花的小时数</li><li>修正错误所花费的小时数</li></ul><h3 id="Key-Points-21"><a href="#Key-Points-21" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>开发人员测试是完整测试策略的一个关键部分。独立测试也很重要</li><li>同编码之后编写测试用例相比较，编码开始之前编写测试用例，工作量和花费的时间差不多，但是后者可以缩短缺陷-侦测-调试-修正的周期</li><li>测试仍然只是良好软件质量计划的一部分。高质量的开发方法和测试一样重要，尽可能减少需求和设计阶段的缺陷</li><li>错误往往集中在少量几个容易出错的类和子程序上</li><li>测试数据表本身出错的密度往往比被测代码还要高</li><li>自动化测试总体来说是很有用的，也是进行回归测试的基础</li><li>改善测试过程的最好办法就是将其规范化，并对其进行评估，然后用评估中获得的经验教训改善这个过程</li></ul><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>调试是确定错误根本原因并纠正此错误的过程。</p><h3 id="调试概述"><a href="#调试概述" class="headerlink" title="调试概述"></a>调试概述</h3><p>调试本身并不是改进代码质量的方法，而是诊断代码缺陷的一种方法。</p><p>开发高质量软件产品的最佳突进是精确描述需求、完善设计，并使用高质量的代码编写规范。</p><p>程序中的错误为你提供了学习很多东西的绝好机会，错误的好处：</p><ul><li>理解你正在编写的程序</li><li>明确你犯了哪种类型的错误</li><li>从代码阅读者的角度分析代码质量</li><li>审视自己解决问题的方法</li><li>审视自己修正缺陷的方法</li></ul><h3 id="寻找缺陷"><a href="#寻找缺陷" class="headerlink" title="寻找缺陷"></a>寻找缺陷</h3><p>调试包括了寻找缺陷和修正缺陷。寻找缺陷并且理解缺陷通常占到了整个调试工作的 90%</p><p>寻找缺陷的有效方法：</p><ol><li>将错误状态稳定下来，即让缺陷可以稳定地重现</li><li>确定错误的来源<ul><li>收集产生缺陷的相关数据</li><li>分析所收集的数据，并构造对缺陷的假设</li><li>确定怎么去证实或证伪这个假设</li><li>对假设做出最终结论</li></ul></li><li>修补缺陷</li><li>对所修补的地方进行测试</li><li>查看是否有类似的错误</li></ol><p><strong>把错误的发生稳定下来</strong></p><p>生成能产生错误的最小化测试用例。简化测试用例的目标是使它尽可能简单，其任何方面的修改都会改变相关错误的行为。</p><p><strong>寻找缺陷的建议</strong></p><ul><li>在构造假设时考虑所有的可用数据</li><li>提炼产生错误的测试用例</li><li>在自己的单元测试族中测试代码</li><li>利用可用的工具</li><li>采用多种不同的方法重现错误</li><li>用更多的数据生成更多的假设</li><li>利用否定性测试用例的结果</li><li>对可能的假设尝试头脑风暴</li><li>在桌上放一个记事本，把需要尝试的事情逐条列出</li><li>缩小嫌疑代码的范围</li><li>对之前出现过的缺陷和子程序保持警惕</li><li>检查最近修改过的代码</li><li>扩展嫌疑代码的范围</li><li>增量式继承</li><li>检查常见的缺陷</li><li>抛开问题休息一下</li></ul><p><strong>蛮力测试</strong></p><ul><li>对崩溃代码的设计和编码进行彻底检查</li><li>抛弃有问题的代码，从头开始设计和编程</li><li>抛弃整个程序，从头开始设计和编程</li><li>编译代码时生成全部的调试信息</li><li>在最为苛刻的警告级别下编译代码</li><li>全面执行单元测试</li><li>开发自动化测试工具</li><li>在调试期中手动遍历一个大循环，直至发现错误条件</li><li>在代码中打印、显示和其他日志记录语句</li><li>在另一个不同的的编译器来编译代码</li><li>在另一个不同的环境里编译和运行程序</li><li>复制最终用户的完整系统配置信息</li><li>将新的代码分小段进行集成，对每段集成的代码段进行完整的测试</li></ul><p><strong>语法错误</strong></p><ul><li>不要过分信任编译器信息中的行号</li><li>不要迷信编译器信息</li><li>不要轻信编译器的第二条信息</li><li>分而治之</li><li>找出没有配对的注释或者引号</li></ul><h3 id="修正缺陷"><a href="#修正缺陷" class="headerlink" title="修正缺陷"></a>修正缺陷</h3><p>第一次对缺陷进行修正时候，有超过 50% 的几率出错，减少出错几率的建议：</p><ul><li>在动手之前先理解问题</li><li>理解程序本身而不仅仅是问题</li><li>验证对错误的分析</li><li>放松一下</li><li>保存最初的源代码</li><li>治本而不是指标</li><li>修改代码时一定要有恰当的理由</li><li>一次只做一个改动</li><li>检查自己的改动</li><li>增加能暴露问题的单元测试</li><li>搜索类似的缺陷</li></ul><h3 id="调试中的心理因素"><a href="#调试中的心理因素" class="headerlink" title="调试中的心理因素"></a>调试中的心理因素</h3><p>规范的格式、恰当的注释、良好的变量和子程序命名方式，以及其他编程风格要素都有助于构建编程的良好基础。</p><p>心理距离可以定义为区分两事物的难易程度。</p><h3 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h3><ul><li>源代码比较工具，diff</li><li>编译器的警告信息<ul><li>将编译器的警告级别设置为最高级，尽可能不放过任何一个警告</li><li>用对待错误的态度来处理警告</li><li>在项目组范围内使用统一的编译设置</li></ul></li><li>增强的语法检查和逻辑检查</li><li>执行性能剖测器</li><li>测试框架</li><li>调试器</li></ul><h3 id="Key-Points-22"><a href="#Key-Points-22" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>调试同整个软件开发的成败信息相关，最好的解决之道是避免缺陷的产生，花时间提高自己的调试技巧还是很划算的</li><li>专注于调试工作，让每一个测试都能朝着正确的方向前进一步</li><li>在动手解决问题之前，要理解问题的根本。胡乱猜测错误的来源和随机修改都会让你的程序陷入比刚开始调试时更为糟糕的境地</li><li>将编译器警告级别设置为最严格，把警告信息所报告的错误都修正</li><li>调试工具对软件开发而言是强有力的支持手段，记得在调试的时候开动脑筋</li></ul><h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><h3 id="软件演化的类型"><a href="#软件演化的类型" class="headerlink" title="软件演化的类型"></a>软件演化的类型</h3><p>区分软件演化类型的关键，就是程序的质量在这一过程中是提高了还是降低了。</p><p>另一个就是演化是源于程序构建过程中得修改，还是维护过程中的修改。</p><p>演化一开始就充满危险，但同时也是使你软件开发接近完美的天赐良机。</p><p>软件演化的基本准则就是，演化应当提升程序的内在质量</p><h3 id="重构简介"><a href="#重构简介" class="headerlink" title="重构简介"></a>重构简介</h3><p>重构就是在不改变软件外部行为的前提下，对其内部结构进行改变，是指更容易理解并便于修改。</p><p><strong>重构的理由</strong></p><ul><li>代码重复</li><li>冗长的子程序</li><li>循环过长或嵌套过深</li><li>内聚性太差的类，一个类有太多彼此无关的任务，应该拆分成多个类</li><li>类的接口未能提供层次一致的抽象</li><li>拥有太多参数的参数列表</li><li>类的内部修改往往被局限于某个部分</li><li>变化导致对多个类的相同修改</li><li>对继承体系的同样修改</li><li>case 语句需要做相同的修改</li><li>同时使用的相关数据并未以类的方式进行组织</li><li>成员函数使用其他类的特征比使用自身类的特征还要多</li><li>过多使用基本数据类型</li><li>某个类无所事事</li><li>一系列传递流浪数据的子程序，流浪数据指数据传给某个子程序只为了让改子程序传递给另一个子程序。</li><li>中间人对象无事可做</li><li>某个类同其它类关系过于亲密</li><li>子程序命名不恰当</li><li>数据成员被设置为公用</li><li>某个派生类仅使用了基类很少一部分成员函数</li><li>注释被用于解释难懂的代码，不要为拙劣的代码编写文档，应该重写</li><li>使用了全局变量</li><li>在子程序调用前后设置了代码，在调用后使用收尾代码，应考虑是否能放入子程序中执行</li><li>程序中的一些代码似乎是在将来某个时候才会用到的。</li></ul><h3 id="特定的重构"><a href="#特定的重构" class="headerlink" title="特定的重构"></a>特定的重构</h3><p><strong>数据级的重构</strong></p><ul><li>用具名常量代替神秘数值</li><li>使变量的名字更为清晰且传递更多信息</li><li>将表达式内联化</li><li>用函数来代替表达式</li><li>引入中间变量</li><li>用多个单一用途变量代替某个多用途变量</li><li>在局部用途中使用局部变量而不是参数</li><li>将基础数据类型转化为类</li><li>将一组类型码转化为类或枚举类型</li><li>将一组类型码转换为一个基类及其相应派生类</li><li>将数组转换为对象</li><li>把群集封装起来</li><li>用数据类来代替传统记录</li></ul><p><strong>语句级的重构</strong></p><ul><li>分解布尔表达式</li><li>将复杂表达式转换成命名准确的布尔函数</li><li>合并条件语句不同部分中的重复代码片段</li><li>使用 break 或 return 而不是循环控制变量</li><li>在嵌套的 if-then-else 语句中一旦知道答案就立即返回，而不是去赋一个返回值</li><li>用多态来代替条件语句，尤其是重复的 case 语句</li><li>创建和使用 null 对象而不是去检测空值</li></ul><p><strong>子程序级重构</strong></p><ul><li>提取子程序或者方法</li><li>将子程序的代码内联化</li><li>用简单的算法代替复杂算法</li><li>增加参数</li><li>删除参数</li><li>将查询操作从修改操作中独立出来</li><li>合并相似的子程序，通过参数区分它们的功能</li><li>将行为取决于参数的子程序拆分开来，即子程序根据输入执行不同的行为，应该拆分成多个子程序</li><li>传递整个对象而非特定成员</li><li>传递特定成员而非整个对象</li><li>包装向下转型的操作，子程序返回对象时，应返回最精确的对象类型</li></ul><p><strong>类实现的重构</strong></p><ul><li>将值对象转为引用对象</li><li>将引用对象转为值对象</li><li>用数据初始化代替虚函数</li><li>改变成员函数或成员数据的位置</li><li>将特殊代码提取为派生类</li><li>将相似的代码结合起来放置到基类中</li></ul><p><strong>类接口的重构</strong></p><ul><li>将成员函数放到另一个类中</li><li>将一个类变成两个</li><li>删除类</li><li>去掉中间人</li><li>用继承代替委托</li><li>引入外部的成员函数</li><li>引入扩展类</li><li>对暴露在外的成员变量进行封装</li><li>对于不能修改的类成员，删除相关的 Set 成员函数</li><li>隐藏那些不会在类之外被用到的成员函数</li><li>封装不使用的成员函数</li><li>合并那些实现非常类似的基类和派生类</li></ul><p><strong>系统级重构</strong></p><ul><li>为无法控制的数据创建明确的索引源</li><li>将单向的类联系改为双向的类联系</li><li>将双向的类联系改为单向的类联系</li><li>用 Factory Method 模式而不是简单地构造函数</li><li>用异常取代错误代码，或者做相反方向的变换</li></ul><h3 id="安全的重构"><a href="#安全的重构" class="headerlink" title="安全的重构"></a>安全的重构</h3><ul><li>保存初始代码</li><li>重构的步伐请小些</li><li>同一时间只做一项重构</li><li>把要做的事情一条条列出来</li><li>设置一个停车场</li><li>多使用检查点</li><li>利用编译器警告信息</li><li>重新测试</li><li>增加测试用例</li><li>检查对代码的修改</li><li>根据重构风险级别来调正重构方法</li></ul><p>不易重构的情况：</p><ul><li>不要把重构当作先写后改的代名词</li><li>避免用重构代替重写</li></ul><h3 id="重构策略"><a href="#重构策略" class="headerlink" title="重构策略"></a>重构策略</h3><ul><li>在增加子程序时进行重构</li><li>在添加类的时候进行重构</li><li>在修补缺陷的时候进行重构</li><li>关注易于出错的模块</li><li>关注高度复杂的模块</li><li>在维护环境下，改善你手中正在处理的代码</li><li>定义清除干净代码和拙劣代码之间的边界，尝试把代码移过这条边界</li></ul><h3 id="Key-Points-23"><a href="#Key-Points-23" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>修改是程序一生都要面对的事情，不仅包括在最初的开发阶段，还包括在首次发布之后</li><li>在修改中软件的质量要么改进，要么恶化。软件演化的首要法则就是代码演化应该提升程序的内在质量</li><li>重构成功的关键在于程序员应当学会关注那些标志代码需要重构的众多的额警告</li><li>重构成功的最后要点在于要有安全的重构策略，一些重构方法会比其他重构方法要好</li><li>开发阶段的重构是提升程序质量的最佳时机，因为你可以立刻让刚刚产生的改变梦想变成现实。请珍惜开发阶段的天赐良机</li></ul><h2 id="代码调整策略"><a href="#代码调整策略" class="headerlink" title="代码调整策略"></a>代码调整策略</h2><h3 id="性能概述"><a href="#性能概述" class="headerlink" title="性能概述"></a>性能概述</h3><p>性能同代码速度之间存在着很松散的关系。</p><p>思考效率问题：</p><ul><li>程序需求</li><li>程序的设计</li><li>类和子程序的设计</li><li>程序同操作系统的交互</li><li>代码编译</li><li>硬件</li><li>代码调整</li></ul><h3 id="代码调整简介"><a href="#代码调整简介" class="headerlink" title="代码调整简介"></a>代码调整简介</h3><p>代码调整不是改进性能的最为有效的方法，完善程序架构、修改类的设计，选择更好的算法常常能带来更大幅度的性能提升。</p><p>Pareto 法则：你可以用 20% 的努力取得 80% 的成效。程序中 20% 的子程序耗费了 80% 的执行时间</p><p>一些错误的言论：</p><ul><li>在高级语言中，减少代码的行数就可以提升所生成机器代码的运算速度或者减少其资源占用——错误！</li><li>特定运算可能比其他的快，代码规模也较小——错误！</li><li>应当随时随地进行优化——错误！不成熟优化的主要缺陷在于它缺乏前瞻性</li><li>程序的运行速度同其正确性同等重要——错误！</li></ul><p>Jackson 的优化法则：法则一，不要对代码进行优化。法则二（仅限于高手），不要优化，除非你已经有一个非常清晰，而且未经优化的解决方案</p><h3 id="蜜糖和哥斯拉"><a href="#蜜糖和哥斯拉" class="headerlink" title="蜜糖和哥斯拉"></a>蜜糖和哥斯拉</h3><p>在调整代码时，你会发现程序某个部分运行起来如同是寒冬罐子里的蜜糖一般黏乎乎的，体积如哥斯拉一样。</p><p>常见的低效率之源：</p><ul><li>输入&#x2F;输出操作</li><li>分页</li><li>系统调用</li><li>解释型语言</li><li>错误</li></ul><h3 id="性能测量"><a href="#性能测量" class="headerlink" title="性能测量"></a>性能测量</h3><p>你应当测量代码性能，找出代码中的热点。一旦发现就进行代码优化，再一次测量，看看到底有多少改进，性能问题在很多方面都是违反直觉的。</p><p>性能测量应该精确，应当用分配给程序的 CPU 时钟来计算，而不是日期时钟。</p><h3 id="反复调整"><a href="#反复调整" class="headerlink" title="反复调整"></a>反复调整</h3><p>你可以将多种方法有效结合起来，在优化时反复尝试，直到发现有用的方法。</p><h3 id="代码调整方法总结"><a href="#代码调整方法总结" class="headerlink" title="代码调整方法总结"></a>代码调整方法总结</h3><ol><li>用设计良好的代码来开发软件，从而使程序易于理解和修改</li><li>如果程序性能很差<ul><li>保存代码的可运行版本</li><li>对系统进行分析测量，找出热点</li><li>判断性能拙劣是否源于设计、数据类型或者算法上的缺陷，确定是否应该进行代码调整</li><li>对上步所确定的瓶颈代码进行调整</li><li>每次调整后对性能提升进行测量</li><li>如果调整的代码没有改进代码的性能就恢复代码最初的样子</li></ul></li><li>重复第二步</li></ol><h3 id="Key-Points-24"><a href="#Key-Points-24" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>性能只是软件整体质量的一个方面，通常不是最重要的。精细的代码调整也只是实现整体性能的一种方法，通常不是决定性的。相对于代码本身的效率而言，程序的架构、细节设计以及数据结构和算法选择对程序的运行速度和资源占用的影响通常会更大</li><li>定量测量是实现性能最优化的关键。定量测量需要找出能真正决定程序性能的部分，在修改之后，应当通过重复测量来明确修改是提高还是降低了软件的性能</li><li>绝大多数程序员都有那么一小部分代码耗费了绝大部分的运行时间，如果你不测量，你不会知道是哪一部分代码</li><li>代码调整需要反复尝试没这样才能获得理想的性能提高</li><li>为性能优化工作做好准备的最佳方式就是在最初阶段编写清晰的代码，从而使代码在后续工作中易于理解和修改</li></ul><h2 id="代码调整技术"><a href="#代码调整技术" class="headerlink" title="代码调整技术"></a>代码调整技术</h2><h3 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h3><p>很多程序都是由逻辑操作构成的。</p><ul><li><p>在知道答案后停止判断，减少代码循环判断次数，使用短路求值</p></li><li><p>按照出现频率来调整判断顺序，让程序更容易进入常见情况的处理</p></li><li><p>相似逻辑结构之间没在不同的语言情况下不同，没有什么能替代测量得出的结论</p></li><li><p>用查询表替代复杂表达式</p></li><li><p>使用惰性求值，等到需要的时候再计算</p></li></ul><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>循环会被执行很多次，由此它是程序热点最常见的藏身之处</p><ul><li>将判断外提</li><li>合并，将相同循环合并。减少循环多次</li><li>展开，减少维护循环所需要做的工作</li><li>尽可能减少在循环内部做的工作</li><li>哨兵值</li><li>把最忙的循环放在最内侧</li><li>削减强度</li></ul><h3 id="数据变换"><a href="#数据变换" class="headerlink" title="数据变换"></a>数据变换</h3><ul><li>使用整型数而不是浮点数</li><li>数组维度尽可能少</li><li>尽可能减少数组引用</li><li>使用辅助索引</li><li>使用缓存机制</li></ul><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><ul><li>利用代数恒等式</li><li>削弱运算强度</li><li>编译期初始化</li><li>小心系统函数</li><li>使用正确的常量类型</li><li>预先算出结果</li><li>删除公共子表达式</li></ul><h3 id="子程序"><a href="#子程序" class="headerlink" title="子程序"></a>子程序</h3><ul><li>将子程序重写为内联</li></ul><h3 id="用低级语言重写代码"><a href="#用低级语言重写代码" class="headerlink" title="用低级语言重写代码"></a>用低级语言重写代码</h3><h3 id="变得越多，事情反而越没变"><a href="#变得越多，事情反而越没变" class="headerlink" title="变得越多，事情反而越没变"></a>变得越多，事情反而越没变</h3><h3 id="Key-Points-25"><a href="#Key-Points-25" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>优化结果在不同的语言、编译器和环境下有很大差异。如果没有对每一次优化进行测量，你将无法判断优化到底有无作用</li><li>第一次优化通常不会是最好的，即使找到了效果不错的，在不要停下扩大战果的步伐</li><li>代码调整这一话题有点类似于核能，富有争议，真只会让承认冲动。请务必谨慎行事</li></ul><h2 id="程序规模对构建的影响"><a href="#程序规模对构建的影响" class="headerlink" title="程序规模对构建的影响"></a>程序规模对构建的影响</h2><h3 id="交流与规模"><a href="#交流与规模" class="headerlink" title="交流与规模"></a>交流与规模</h3><p>随着项目成员数目的增加，交流路径的数量也随着增加，并且是乘性的。</p><p>改善交流效率的常用方法是采用正式的文档。</p><h3 id="项目规模的范围"><a href="#项目规模的范围" class="headerlink" title="项目规模的范围"></a>项目规模的范围</h3><p>大项目的用人数量占全部程序员数量的很大比重</p><h3 id="项目规模对错误的影响"><a href="#项目规模对错误的影响" class="headerlink" title="项目规模对错误的影响"></a>项目规模对错误的影响</h3><p>随着项目规模的增大，通常更大一部分要归咎于需求和设计</p><p>随着项目规模的增长，错误的数量也会随之显著增长，特大型项目的每千行错误数量甚至会达到小项目的四倍。</p><h3 id="项目规模对生产率的影响"><a href="#项目规模对生产率的影响" class="headerlink" title="项目规模对生产率的影响"></a>项目规模对生产率的影响</h3><p>随着项目规模和团队规模的增大，组织方式对生产率的影响也随之增大</p><h3 id="项目规模对开发活动的影响"><a href="#项目规模对开发活动的影响" class="headerlink" title="项目规模对开发活动的影响"></a>项目规模对开发活动的影响</h3><p>随着项目规模的扩大，构建活动在整个工作量中所占比重逐渐减小。</p><p>项目越大，复杂度也越大，也就越要求有意识地去关注方法论。</p><h3 id="Key-Points-26"><a href="#Key-Points-26" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>随着项目规模的扩大，交流需要加以支持。大多数方法论的关键点都在于减少交流中的问题，而一项方法论的存亡关键也应取决于它能否促进交流</li><li>在其他条件都相等的时候，大项目的生产率会低于小项目</li><li>在其他条件都相等的时候，大项目的每千行代码错误率会高于小项目</li><li>在小项目里的看起来理所当然的活动在大项目中必须仔细地计划。随着项目规模的扩大，构建活动的主导地位逐渐降低</li><li>放大轻量级的方法论要好于缩小重量级的方法论，最有效的方法是使用适量级方法论</li></ul><h2 id="管理构建"><a href="#管理构建" class="headerlink" title="管理构建"></a>管理构建</h2><p>质量目标和项目规模都会显著影响这个软项目的管理方式</p><h3 id="鼓励良好的编码实践"><a href="#鼓励良好的编码实践" class="headerlink" title="鼓励良好的编码实践"></a>鼓励良好的编码实践</h3><p>制定标准应该由项目中所受人尊敬的架构师来做，这样人们通常会接受他指定的标准</p><p>标准有助于减少项目中随意出现的诸多分歧</p><p>鼓励良好的编码实践的技术：</p><ul><li>给项目的每一部分分派两个人。两人完成一部分，则至少有两人认为这段代码是工作的</li><li>逐行复查代码。代码复查包括程序员本人和至少两名评审员</li><li>要求代码签名</li><li>安排一些好的代码示例供人参考</li><li>强调代码是共有财产</li><li>奖励好代码</li></ul><h3 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h3><p>配置管理是系统化地定义项目工件和处理变化，以使项目一直保持其完整性的实践活动</p><p><strong>需求变更和设计变更</strong></p><ul><li>遵循某种系统化的变更控制手续</li><li>成组地处理变更请求。记录所有的想法和建议，直到有时间处理，把它当作整体看待，从中选中最有益的变更加以实施</li><li>评估每项变更的成本</li><li>提放大量的变更请求</li><li>成立变更控制委员会或者类似机构</li><li>警惕官僚主义，但也不会因为害怕官僚主义而排斥有效的变更控制</li></ul><p><strong>软件代码变更</strong></p><ul><li>版本控制软件</li></ul><h3 id="评估构建进度表"><a href="#评估构建进度表" class="headerlink" title="评估构建进度表"></a>评估构建进度表</h3><p>评估项目的规模和完成项目所需的工作量是软件项目管理中最具挑战性的方面之一。</p><p>评估的方法：</p><ul><li>使用评估软件</li><li>使用算法方法</li><li>聘请外界的评估专家评估有关项目</li><li>为评估举行排练会议</li><li>评估项目的每一部分，然后加起来</li><li>让成员评估各自的任务，然后加起来</li><li>参考以往的项目经验</li><li>保留以往项目的评估</li></ul><p>一套评估项目的好方法：</p><ul><li>建立目标</li><li>为评估预留时间，并且做出计划</li><li>清楚地说明软件需求</li><li>在底层细节层面进行评估</li><li>使用若干不同的评估方法，并且比较其结果</li><li>定期做重新评估</li></ul><p>将阻止的项目经验记录下来，然后用它评估未来的项目需要花费的时间。</p><h3 id="度量"><a href="#度量" class="headerlink" title="度量"></a>度量</h3><p>任何一种项目特征都是可以用某种方法来度量的，而且总比不度量好得多</p><p>留心度量的副作用</p><p>反对度量就是认为最好不要去了解项目中到底发生了什么</p><h3 id="把程序员当人看"><a href="#把程序员当人看" class="headerlink" title="把程序员当人看"></a>把程序员当人看</h3><p>程序员不仅在编程上花时间，也要花时间去开会、培训、阅读邮件以及纯粹思考</p><p>不同程序员在天分和努力程度方面的差别巨大，这一点与其他所有领域都一样</p><p>并未发现程序员的经验与其代码质量或生产率之间有什么关联</p><p>不同的编程团队在软件质量和生产率上也存在着相当大的差异</p><p>物理环境对生产率有着巨大的影响</p><h3 id="管理你的管理者"><a href="#管理你的管理者" class="headerlink" title="管理你的管理者"></a>管理你的管理者</h3><p>技术出色并且其技术与时俱进的管理者实属凤毛麟角</p><p>应对管理者的方法：</p><ul><li>把你希望做什么的念头先藏起来，等你的管理者提起</li><li>把做事情的正确方法传授给你的管理者</li><li>关注你的管理者的兴趣，按照他的真正意图去做</li><li>拒绝按照你的管理者所说的去做，坚持用正确的方法做自己的事</li><li>换工作</li></ul><h3 id="Key-Points-27"><a href="#Key-Points-27" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>好的编码实践可以通过贯彻标准或者使用更为灵活的方法来达到</li><li>配置管理，如果应用得当，会使程序员的工作变得轻松</li><li>好的软件评估是一项重大挑战，成功的关键包括采用多种方法，随着项目的开展而修缮评估结果，以及很好地利用数据创建评估等</li><li>度量是构建管理成功的关键。你可以采取措施度量项目的任何方面，而这要比根本不度量好得多。准确的度量是指定准确的进度表、质量控制和改进开发过程的关键</li><li>程序员和管理人员都是人，把他们当人看的时候工作得最好</li></ul><h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><p>集成指的是一种软件开发行为：将一些独立的软件组件组合为一个完整的系统</p><h3 id="集成方式的重要性"><a href="#集成方式的重要性" class="headerlink" title="集成方式的重要性"></a>集成方式的重要性</h3><p>如果你按错误得顺序构建并集成软件，那么会难于编码，难于测试，难于调试。</p><p>周到的集成，所获得的益处：</p><ul><li>更容易诊断缺陷</li><li>缺陷更少</li><li>脚手架更少</li><li>花费更少的时间获得第一个能够工作的产品</li><li>更短的整体开发进度表</li><li>更好的顾客关系</li><li>增强士气</li><li>增加项目完成的机会</li><li>更可靠地估计进度表</li><li>更准确的现状报告</li><li>改善代码质量</li><li>较少的文档</li></ul><h3 id="集成频率"><a href="#集成频率" class="headerlink" title="集成频率"></a>集成频率</h3><p><strong>阶段式集成</strong></p><ol><li>设计、编码、测试、调试各个类，这一步称为单元开发</li><li>将这些类组合为一个庞大的系统</li><li>测试并调试整个系统</li></ol><p>最终类组合在一起可能会涌现大量错误，绝大多数情况下另一种方法更好</p><p><strong>增量集成</strong></p><ol><li>开发一个小的系统功能部件。</li><li>设计、编码、测试、调试某个类。</li><li>将这个新的类集成到系统骨架上。</li></ol><p>增量集成的益处：</p><ul><li>易于定位错误</li><li>及早在项目里取得系统级的成果</li><li>改善对进度的控制</li><li>改善客户关系</li><li>更加充分地测试系统中的各个单元</li><li>能在更短的开发进度计划内建造出整个系统</li></ul><h3 id="增量集成的策略"><a href="#增量集成的策略" class="headerlink" title="增量集成的策略"></a>增量集成的策略</h3><p>最佳解决方案总是为了满足特定项目的特定需求而制定的</p><p><strong>自顶向下集成</strong></p><p>首先编写并集成位于继承体系顶部的类，编写一些存根类，随着从上而下地继承各个类，这些存根类逐渐替换为实际的类。</p><p>自底向上集成</p><p>三明治集成</p><p>风险导向的集成</p><p>功能导向的集成</p><p>T-型集成</p><h3 id="Daily-Build-与冒烟测试"><a href="#Daily-Build-与冒烟测试" class="headerlink" title="Daily Build 与冒烟测试"></a>Daily Build 与冒烟测试</h3><p>每天都将各个源文件编译组合成一个可执行程序，然后对程序进行冒烟测试，即执行一种相对简单的检查，看看产品在运行时是否冒烟。</p><h3 id="Key-Points-28"><a href="#Key-Points-28" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>构建的先后次序对集成的步骤会影响设计、编码、测试各类的顺序</li><li>一个经过充分思考的集成顺序能减少测试的工作量，并使调试变得容易</li><li>增量集成有若干变型，而且除非项目是微不足道的，任何一种形式的增量集成都比阶段式集成好</li><li>针对每个特定的项目，最佳的集成步骤通常是自顶向下、自底向上、风向导向及其他集成方法的某种组合，T-型集成和竖直分块集成通常都能工作地很好</li><li>daily build 能减少集成的问题，提升开发人员的士气，并提供非常有用的项目管理信息</li></ul><h2 id="编程工具"><a href="#编程工具" class="headerlink" title="编程工具"></a>编程工具</h2><p>使用最前沿的工具集，并熟悉你所用的工具，能使生产力增加 50% 还不止</p><h3 id="设计工具"><a href="#设计工具" class="headerlink" title="设计工具"></a>设计工具</h3><p>那些能创建设计图表的图形化工具</p><h3 id="源代码工具"><a href="#源代码工具" class="headerlink" title="源代码工具"></a>源代码工具</h3><h3 id="可执行码工具"><a href="#可执行码工具" class="headerlink" title="可执行码工具"></a>可执行码工具</h3><h3 id="工具导向的环境"><a href="#工具导向的环境" class="headerlink" title="工具导向的环境"></a>工具导向的环境</h3><h3 id="打造自己的编程工具"><a href="#打造自己的编程工具" class="headerlink" title="打造自己的编程工具"></a>打造自己的编程工具</h3><h3 id="工具幻境"><a href="#工具幻境" class="headerlink" title="工具幻境"></a>工具幻境</h3><p>无论使用哪些工具，程序员都必须与凌乱的真实世界较力</p><p>始终需要人来填补真实世界需要解决的问题和准备用来解决问题的计算机之间的鸿沟</p><h3 id="Key-Points-29"><a href="#Key-Points-29" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>程序员有时会在长达数年的时间里忽视某些强大的工具，之后才发现并使用之</li><li>好的工具能让你的日子过得安逸得多</li><li>你能打造很多自己用的专用工具</li><li>好的工具能减少软件开发中最单调乏味的工作的量，但它不能消除对编程的需要，虽然它会持续地重塑编程的含义</li></ul><h2 id="布局与风格"><a href="#布局与风格" class="headerlink" title="布局与风格"></a>布局与风格</h2><h3 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h3><p>好的布局凸现程序的逻辑结构</p><p>编程工作量的一小部分是写让机器读的程序，大部分工作是写能让他人读懂的程序</p><p>良好的布局目标：</p><ul><li>准确表现代码的逻辑结构</li><li>始终如一地表现代码的逻辑结构</li><li>改善可读性</li><li>经得起修改</li></ul><h3 id="布局技术"><a href="#布局技术" class="headerlink" title="布局技术"></a>布局技术</h3><p>空白、括号</p><h3 id="布局风格"><a href="#布局风格" class="headerlink" title="布局风格"></a>布局风格</h3><ul><li>纯块结构</li><li>模仿纯块结构</li><li>使用 begin-end对（花括号）指定块边界</li><li>行尾布局</li></ul><h3 id="控制结构的布局"><a href="#控制结构的布局" class="headerlink" title="控制结构的布局"></a>控制结构的布局</h3><h3 id="Key-Points-30"><a href="#Key-Points-30" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>可视化布局的首要任务是指明代码的逻辑阻止。评估该任务是否实现的指标包括准确性、一致性、易读性和易维护性</li><li>外表悦目比起其他指标是最不重要的。然后如果其他指标都达到了，代码又质量好，那么布局效果看上去也会不错</li><li>Java 传统做法就是使用纯块风格</li><li>结构化代码有其自身目的。始终如一地沿用某个习惯而少来创新。不能持久的布局规范只会损害可读性</li></ul><h2 id="自说明代码"><a href="#自说明代码" class="headerlink" title="自说明代码"></a>自说明代码</h2><h3 id="外部文档"><a href="#外部文档" class="headerlink" title="外部文档"></a>外部文档</h3><ul><li>单元开发文件夹</li><li>详细设计文档</li></ul><h3 id="编程风格作文档"><a href="#编程风格作文档" class="headerlink" title="编程风格作文档"></a>编程风格作文档</h3><p>在代码层文档中起主要作用的因素并非注释，而是好的编程风格。编程风格包括良好的程序结构、直率易懂的方法、有意义的变量名和子程序名、具名常量、清晰的布局，以及最低复杂度的控制流及数据结构。</p><h3 id="注释或不注释"><a href="#注释或不注释" class="headerlink" title="注释或不注释"></a>注释或不注释</h3><p>写注释能让你更好地思考代码在干什么。如果注释困难，要么代码差劲，要么就是没有理解透彻代码。写注释并非在做无用功，而是指出你该做的工作。</p><h3 id="高效注释之关键"><a href="#高效注释之关键" class="headerlink" title="高效注释之关键"></a>高效注释之关键</h3><p>注释种类：</p><ul><li>重复代码，只是用不同文字把代码工作又描述一遍</li><li>解释代码，用于解释复杂、有巧、敏感的代码块</li><li>代码标记，提醒开发者某处的工作未做完</li><li>概述代码，将若干行代码的意思以一两句话说出来</li><li>代码意图说明，指出要解决的问题</li><li>传达代码无法表述的信息，包括版权声明、保密要求、版本号等杂项信息</li></ul><p>高效注释：</p><ul><li>采用不会打断或抑制修改的注释风格</li><li>用伪代码编程法减少注释时间</li><li>将注释集成到你的开发风格中</li><li>性能不是逃避注释的好借口</li></ul><h3 id="注释技术"><a href="#注释技术" class="headerlink" title="注释技术"></a>注释技术</h3><p><strong>注释单行</strong></p><ul><li>不要随意添加无关注释</li><li>不要对单行代码做行尾注释</li><li>不要对多行代码做行尾注释</li><li>行尾注释用于数据声明</li><li>避免用行尾注释存放维护注记</li><li>行尾注释难以维护与编排，最好不要用行尾注释</li></ul><p><strong>注释代码段</strong></p><ul><li>注释应表达代码的意图</li><li>代码本身应尽力做好说明</li><li>注释代码段应注重“为何做 why”而不是“怎么做 how”</li><li>用注释为后面的内容做铺垫</li><li>让每个注释都有用</li><li>说明非常规做法</li><li>别用缩略语</li><li>将主次注释区分开</li><li>错误或语言环境独特点都需要加注释</li><li>给出违背良好编程风格的理由</li><li>不要注释投机取巧的代码，应重写之</li></ul><p><strong>注释数据声明</strong></p><ul><li>注释数值单位</li><li>对数值的允许范围给出注释</li><li>注释编码含义</li><li>注释对输入数据的限制</li><li>注释位标志</li><li>将与变量有关的注释通过变量名关联起来</li><li>注释全局数据</li></ul><p><strong>注释控制结构</strong></p><ul><li>应在每个 if、case、循环或代码段前面加上注释</li><li>应在每个控制结构后加上注释</li><li>将循环结束处的注释看成代码太复杂的征兆</li></ul><p><strong>注释子程序</strong></p><ul><li>注释应靠近其说明的代码，子程序不该有庞大的注释头</li><li>在子程序上部都用一两句说明之</li><li>在声明参数处注释这些参数</li><li>利用注入 javadoc 之类的代码说明工具</li><li>分清输入和输出数据</li><li>注释接口假设</li><li>对子程序的局限性做注释</li><li>说明子程序的全局效果</li><li>记录所用算法的来源</li><li>用注释标记程序的各部分</li></ul><p><strong>注释类、文件和程序</strong></p><p>标注类：</p><ul><li>说明该类的设计方法</li><li>说明局限性、用法假设等</li><li>注释类接口</li><li>不要在类接口除说明实现细节</li></ul><p>注释文件：</p><ul><li>说明各文件的意图和内容</li><li>将姓名、电子邮件及电话号码放到注释块中</li><li>包含版本控制标志</li><li>请在注释块中包含法律通告</li><li>将文件命名为与其内容相关的名字</li></ul><p>“以书本为范例”强调了对程序组织的同时提供高底层说明的重要性</p><h3 id="IEEE-标准"><a href="#IEEE-标准" class="headerlink" title="IEEE 标准"></a>IEEE 标准</h3><p>标准的全称由编号、采用年份以及标准名组成。</p><p>软件开发标准</p><p>软件质量保证标准</p><p>管理标准</p><p>标准综述</p><h3 id="Key-Points-31"><a href="#Key-Points-31" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>该不该注释是个需要认真对待的问题。差劲的注释只会浪费时间，好的注释才有价值</li><li>源代码应当含有程序大部分的关键信息</li><li>好代码本身就是最好的说明，如果代码太糟，需要大量注释，应先试着改进代码，直至无须过多注释为止</li><li>注释应说出代码无法说出的东西，例如概述或用意等信息</li><li>有的注释风格需要许多重复性劳动，应舍弃改用易于维护的注释风格</li></ul><h2 id="个人性格"><a href="#个人性格" class="headerlink" title="个人性格"></a>个人性格</h2><h3 id="聪明和谦虚"><a href="#聪明和谦虚" class="headerlink" title="聪明和谦虚"></a>聪明和谦虚</h3><p>承认自己智力有限并通过学习来弥补，你会成为更好的程序员，你越是谦虚，进步就越快。</p><p>很多好的编程做法都能减轻你大脑灰质细胞的负担：</p><ul><li>将系统分解，是为了使之易于理解</li><li>进行审查、评审和测试是为了减少人为失误</li><li>将子程序编写得短小，以减轻大脑负荷</li><li>基于问题而不是底层实现细节来编程，从而减少工作量</li><li>通过各种各样的规范，使思路从相对繁琐的编程事务中解放出来</li></ul><h3 id="求知欲"><a href="#求知欲" class="headerlink" title="求知欲"></a>求知欲</h3><p>在成长为高手的过程中，对技术事物的求知欲具有压倒一切的重要性。</p><p>培养求知欲和把学习当作第一要务的方法：</p><ul><li>在开发过程中建立自我意识</li><li>试验，编写小程序检验某一概念</li><li>阅读解决问题的有关方法</li><li>在行动之前做分析和计划</li><li>学习成功项目的开发经验</li><li>阅读文档</li><li>阅读其他书本期刊</li><li>同专业人士交往</li><li>向专业开发看齐</li></ul><h3 id="诚实"><a href="#诚实" class="headerlink" title="诚实"></a>诚实</h3><ul><li>不是高手时不假装是高手</li><li>乐于承认错误</li><li>力图理解编译器的警告，而非弃之不理</li><li>透彻理解自己的程序，而不要只是编译看看能够否运行</li><li>提供实际的状况报告</li><li>提供现实的进度方案，在上司面前坚持自己的意见</li></ul><h3 id="交流与合作"><a href="#交流与合作" class="headerlink" title="交流与合作"></a>交流与合作</h3><p>真正优秀的程序员直到怎样同别人融洽地工作和娱乐。代码便于看懂是对团队成员的要求之一。编程首先是与人交流，其次才是与计算机交流</p><h3 id="创造力和纪律"><a href="#创造力和纪律" class="headerlink" title="创造力和纪律"></a>创造力和纪律</h3><p>不要将创造力花在无关紧要的事物上，在非关键之处建立范围，从而在重要地方倾力发挥你的创造性</p><h3 id="懒惰"><a href="#懒惰" class="headerlink" title="懒惰"></a>懒惰</h3><p>懒惰表现的几个方面：</p><ul><li>拖延不喜欢的任务</li><li>迅速昨晚不喜欢的任务，以摆脱之</li><li>编写某个工具来完成不喜欢的任务，以便再也不用做这样的事情了</li></ul><h3 id="习惯"><a href="#习惯" class="headerlink" title="习惯"></a>习惯</h3><p>培养先以伪代码编写类再改用实际代码，以及编译前认真检查代码的习惯，有了新习惯，坏习惯自然就会消失。</p><h3 id="Key-Points-32"><a href="#Key-Points-32" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>人的个性对其编程能力有直接影响</li><li>最有关系的行为为：谦虚、求知欲、诚实、创造性和纪律以及高明的偷懒</li><li>程序员高手的性格与天分无关，而任何事都与个人发展相关</li><li>出乎意料的是，小聪明、经验、坚持、疯狂既有助也有害</li><li>很多程序员不愿主动吸收新知识和技术，只依靠工作时偶尔接触新的信息</li><li>好性格与培养正确的习惯关系甚大，要成为杰出的程序员，先要养成良好习惯，其他自然水到渠成</li></ul><h2 id="软件工艺的话题"><a href="#软件工艺的话题" class="headerlink" title="软件工艺的话题"></a>软件工艺的话题</h2><h3 id="征服复杂性"><a href="#征服复杂性" class="headerlink" title="征服复杂性"></a>征服复杂性</h3><p>致力于降低复杂度是软件开发的核心。</p><h3 id="精选开发过程"><a href="#精选开发过程" class="headerlink" title="精选开发过程"></a>精选开发过程</h3><p>程序员成功与否部分取决于其对开发过程的选择</p><h3 id="首先为人写程序，其次才是为机器"><a href="#首先为人写程序，其次才是为机器" class="headerlink" title="首先为人写程序，其次才是为机器"></a>首先为人写程序，其次才是为机器</h3><p>代码可读性</p><h3 id="深入一门语言去编程，不浮于表面"><a href="#深入一门语言去编程，不浮于表面" class="headerlink" title="深入一门语言去编程，不浮于表面"></a>深入一门语言去编程，不浮于表面</h3><p>不要将编程思路局限到所用语言能自动支持的范围</p><h3 id="借助规范集中注意力"><a href="#借助规范集中注意力" class="headerlink" title="借助规范集中注意力"></a>借助规范集中注意力</h3><p>规范能够精确地传达重要信息</p><p>规范可以使你免除各种风险</p><p>规范增加了对底层工作的可预见性</p><p>规范能够弥补语言的不足之处</p><h3 id="基于问题域编程"><a href="#基于问题域编程" class="headerlink" title="基于问题域编程"></a>基于问题域编程</h3><p>将程序划分为不同层次的抽象：</p><ul><li>第 0 层：操作系统的操作和机器指令。高级语言自动替我们处理好了</li><li>第 1 层：编程语言结构工具。语言的基础数据类型、控制结构等</li><li>第 2 层：底层实现结构。通常为算法和数据结构</li><li>第 3 层：底层问题域。构思解决问题的方法，并创建用于解决问题的各种基本构件</li><li>第 4 层：高级问题域。提供了对问题工作的抽象能力。</li></ul><p>问题域的底层技术：</p><ul><li>在问题域实用类，来实现有实际意义的结构</li><li>隐藏底层数据类型以及实现细节的信息</li><li>使用具名常量来说明字符串和文字量的意义</li><li>对中间计算结果使用中间变量</li><li>用布尔函数使复杂逻辑判断更清晰</li></ul><h3 id="当心落石"><a href="#当心落石" class="headerlink" title="当心落石"></a>当心落石</h3><p>程序编制时，要有好的判断力，需要对程序细微问题的警告信息做出反应。</p><h3 id="迭代，反反复复，一次又一次"><a href="#迭代，反反复复，一次又一次" class="headerlink" title="迭代，反反复复，一次又一次"></a>迭代，反反复复，一次又一次</h3><p>软件设计是一个逐步精华的过程，和其他类似过程一样，需要经过反复修正和改进。</p><h3 id="Key-Points-33"><a href="#Key-Points-33" class="headerlink" title="Key Points"></a>Key Points</h3><ul><li>编程的主要目的之一是管理复杂度</li><li>编程过程对最终产品有深远影响</li><li>合作开发要求团队成员之间进行广泛的沟通，甚于同计算机的交互</li><li>编程规范一旦滥用，只会雪上加霜，使用得当则能为开发环境带来良好机制，有助于管理复杂度和相互沟通</li><li>编程应基于问题域而非解决方案，这样便于复杂性管理</li><li>注意警告信息，将其作为编程的疑点，因为编程几乎是纯粹的智力活动</li><li>开发时迭代次数越多，产品的质量越好</li><li>墨守成规的方法有悖于高质量的软件开发</li></ul>]]></content>
    
    
    <categories>
      
      <category>Reading</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学了半年 Java 和前端基础，我能写出什么来</title>
    <link href="/2022/04/01/WhatCouldIDoWhenLearningHalfYearJavaAndHtml/"/>
    <url>/2022/04/01/WhatCouldIDoWhenLearningHalfYearJavaAndHtml/</url>
    
    <content type="html"><![CDATA[<h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><blockquote><p>2021 年 10 月 ~ 2022 年 04 月</p></blockquote><p>一开始在总监的指导下看了 <strong>一个多月</strong> 的《Java核心技术卷Ⅰ》，一步一个脚印地敲着上面的案例代码做笔记，Swing 那个就敲不下去而且也没有学习的必要。之后就是步入 JavaEE 的学习，从 Servlet&#x2F;JSP（看的《HeadFirst》系列的书，很受益） -&gt; JDBC -&gt; 前端基础（HTML&#x2F;CSS&#x2F;JavaScript）（跟着 B 站最高点击黑马 pink 老师学的，不过没有学完），前面打基础的时候走得真的很慢很慢，原因就是每次学完一个阶段感觉差不多就和总监汇报，总监每次的回复总是 <strong>『不要学太快，慢下来把基础打好，不要赶进度……』</strong>。 MySQL -&gt; Mybatis -&gt; Spring -&gt; SpringMVC，后面框架这块学得飞快，原因就是没做什么项目，因此我反复刷了三四遍教程，看了尚硅谷，黑马，动力节点这部分的教程，还有《Spring In Action》还有一些乱七八糟的关于 SSM 和 Spring 的书。这期间也在前端的视频带动下学了 Vue 框架（看的 CodeWhy 老师的 Vue3 课程，真的是每天晚上回去刷一节两小时的课，现在想起来都觉得自己牛批），因此在 12 月份开始写了这个 <strong>博客系统</strong>（使用的 SpringBoot + Vue 目前还没写完善，只有简单的展示功能）写了 <strong>一个多月</strong> 才有的目前的雏形。Spring 源码学了 <strong>一个月</strong>，先是跟着 mini spring 走了一遍，然后就是尚学堂的 Spring 源码视频看了一遍，能力有限没有完全吸收，不过也还算受益匪浅（主要就是依赖注入，AOP 的理解更加深入了还有设计模式的使用）最后 <strong>一个月</strong> 做了一个 <strong>后台权限管理系统</strong>。</p><p>期间学习了 nginx，docker，CS61B（伯克利数据结构相关课），redis，JDK 集合源码……，当然都没学得怎么深入，不过学习永不停止，总有一天我会掌握^.^</p><h2 id="学习成果"><a href="#学习成果" class="headerlink" title="学习成果"></a>学习成果</h2><h3 id="博客系统-后台管理系统"><a href="#博客系统-后台管理系统" class="headerlink" title="博客系统 + 后台管理系统"></a>博客系统 + 后台管理系统</h3><blockquote><p>链接地址：<a href="https://blog.reajason.top/">https://blog.reajason.top/</a></p></blockquote><p>技术栈：SpringBoot + Vue</p><p>简简单单贴一张首页的图片，后台管理界面目前就简单的 CRUD，界面交互没有做完善，就不展示了（目前还有点小丑，不过之后我会尽力让它看起来漂亮无比）</p><p><img src="https://blog.reajason.top/img//WhatCouldIDoWhenLearningHalfYearJavaAndHtml/%E5%8D%9A%E5%AE%A2%E9%A6%96%E9%A1%B5.png" alt="博客首页"></p><h3 id="后台管理系统"><a href="#后台管理系统" class="headerlink" title="后台管理系统"></a>后台管理系统</h3><blockquote><p>链接地址：<a href="https://blog.reajason.top/oa/admin/index">https://blog.reajason.top/oa/admin/index</a></p></blockquote><p>技术栈：SpringBoot + JSP + JQuery，关于主要写了哪些，可以进网站首页简介查看</p><ul><li>主页多级菜单栏 + tab 栏基于 iframe 子页面的菜单切换</li><li>分页器的实现，简单的判断条件，生成不同的样式</li><li>树形数据结构的渲染，除了递归还是递归</li></ul><p><img src="https://blog.reajason.top/img//WhatCouldIDoWhenLearningHalfYearJavaAndHtml/%E5%90%8E%E5%8F%B0%E9%A6%96%E9%A1%B5.png" alt="首页"></p><p><img src="https://blog.reajason.top/img//WhatCouldIDoWhenLearningHalfYearJavaAndHtml/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86.png" alt="用户管理"></p><p><img src="https://blog.reajason.top/img//WhatCouldIDoWhenLearningHalfYearJavaAndHtml/%E8%A7%92%E8%89%B2%E7%AE%A1%E7%90%86.png" alt="角色管理"></p><p><img src="https://blog.reajason.top/img//WhatCouldIDoWhenLearningHalfYearJavaAndHtml/%E8%A7%92%E8%89%B2%E7%BC%96%E8%BE%91.png" alt="角色编辑"></p><p><img src="https://blog.reajason.top/img//WhatCouldIDoWhenLearningHalfYearJavaAndHtml/%E8%8F%9C%E5%8D%95%E7%AE%A1%E7%90%86.png" alt="菜单管理"></p><p><img src="https://blog.reajason.top/img//WhatCouldIDoWhenLearningHalfYearJavaAndHtml/%E9%83%A8%E9%97%A8%E7%AE%A1%E7%90%86.png" alt="部门管理"></p><p><img src="https://blog.reajason.top/img//WhatCouldIDoWhenLearningHalfYearJavaAndHtml/%E6%96%B0%E5%A2%9E%E9%9C%80%E6%B1%82.png" alt="新增需求"></p><p><img src="https://blog.reajason.top/img//WhatCouldIDoWhenLearningHalfYearJavaAndHtml/%E9%9C%80%E6%B1%82%E6%9F%A5%E7%9C%8B.png" alt="需求查看"></p><p><img src="https://blog.reajason.top/img//WhatCouldIDoWhenLearningHalfYearJavaAndHtml/%E9%9C%80%E6%B1%82%E7%BC%96%E8%BE%91.png" alt="需求编辑"></p><h2 id="总结与展望"><a href="#总结与展望" class="headerlink" title="总结与展望"></a>总结与展望</h2><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>自学了这么久，也自己给自己总结了一些学习经验。学习技术的时候不要死磕一个一直学，这个学累就来点别的，比如 Spring 一直看代码看累了，写点前端给自己眼睛舒服舒服。</li><li>学习要有输入也要有输出，同时要保持思考的习惯。不要害怕程序报错，往往报错给了你最有力的证明你的错误在哪里。学习会遗忘，因此多看几遍，总会学会，前端我学了三四遍，MySQL 我同样学了三四遍，学 Spring 的时候我也是看了两三家培训机构的视频还有一些书，知识点都抄几遍就记住的，实践的时候脑子里面有东西做起来就快了。</li><li>无论做什么不要老是空想，想做什么就去做什么，做成什么样就看你做的时候了，你不做就永远不知道会是什么样，对自己要有信心，之前一段时间玩 LOL 就一直摆烂，最近学习也是增加了自己的信心，我游戏里面走位也越来越自信，心情一下就好了。</li><li>学习真的会累，学累了就停下来思考思考学点其他的或者回顾之前的学习的知识或者做点其他感兴趣的事情，这一段时间的思考并不会阻碍你学习的脚步，反而会让你之后的学习的脚步越来越快。就拿我学 Spring 框架那段时间，一直就是框架框架框架的，我感觉学习不到什么真正的技术（框架都封装好了，就学怎么用就完事了），因此我就跑去看了重构，看了Java基础的『八股文』，看了前端如何布局等等。就是回归基础的东西，让自己不那么『基础不牢地动山摇』，自己心里也不好受。</li></ol><h3 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h3><ol><li>希望自己不要停下学习的脚步，一步一个脚印</li><li>坚信自己一定会成功（网上总有负面的那种表述和调侃，诸如绝大多数都是普通的人要认命之类的，我认为我们确实要认命，但是我们不能不努力，都是成年人了，自己的命运能掌握的那一块请好好掌握住）</li><li>飞机遇难也引发了很多思考，希望大家都身体健康，快快乐乐（保护自己的人身安全和财产安全）</li></ol>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于点击了打卡提交按钮，这世界发生了什么这回事</title>
    <link href="/2022/03/19/ClickSubmitBtnWhatHappened/"/>
    <url>/2022/03/19/ClickSubmitBtnWhatHappened/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先我想先铺垫一点点基本概念。网上的信息都是经过了『网络』这个转播媒介，计算机网络讲的就是这部分（物理层-&gt;数据链路层-&gt;网络层(IP)-&gt;运输层(TCP\UDP)-&gt;应用层(DNS\HTTP\FTP\SMTP)）。对于我们用户来说我们直接使用的就是应用层之上的服务。</p><p>常见的就是 <strong>HTTP（Hypertext Transfer Protocol，超文本传输协议）</strong>，我们使用浏览器访问页面就会发送非常多的 HTTP 请求，发送了请求获取到数据 HTTP 的活就干完了，接下来就是浏览器将数据展示出来。<strong>DNS（Domain Name System，域名系统）</strong> 就是域名解析，根据你的域名解析 IP 地址（为了让用户更好的记住网站地址，而不是让用户去记 IP 地址）。 FTP（File Transfer Protocol） 用于文件传输，<strong>SMTP（Simple Mail Transfer Protocol）</strong> 用于邮箱服务等等。</p><p>用户通过应用层的这些协议来获取数据，那么这些数据在哪里呢，答案就是在这个世界上的某台计算机的数据库里面放着。数据库分为关系型数据库(MySQL、Oracle)、非关系型数据库(Redis)……一般存储用户数据都是用的关系型数据库类似于 excel 表，可以理解为为什么每次没打卡的信息导出的都是 excel 表格（而且每次没打卡的都是那么几个人（bushi））。</p><p>知道怎么获取数据，和数据怎么存的我们就能开始回答这个问题了。</p><h2 id="点击前"><a href="#点击前" class="headerlink" title="点击前"></a>点击前</h2><p>为了更好的回答这个问题，我还是想说说点击前发生了什么事情，也就是我们点击首页健康打卡图标进入到打卡界面这一段时间。</p><p>发送了非常多的 HTTP 请求。有的用来获取选项有哪些（为什么会发送呢，因为如果写在软件里面了，那下次修改模板的时候只能通过发放新版本来更新，而通过 HTTP 我只需要修改数据库你获取得就是不一样的）；有的用来获取你上一次的打卡数据（现在很多学校通知取消回显功能，那么这个请求可能就返回不了什么有用的数据了）；有的用来获取你的个人信息（学院、班级、姓名等等）；有的用来获取你当前的位置（就是你当前的地址，请求的是百度的 Web API）。（Web API（application programming interface，应用程序接口） 可以理解为一次特定 HTTP 请求的姿势，定义了传过去什么数据，返回来什么数据）</p><p>发送了上面那么多 HTTP 请求才会展示给你打卡界面。此时你需要慢慢填写你的打卡信息了。</p><h2 id="点击后"><a href="#点击后" class="headerlink" title="点击后"></a>点击后</h2><p>终于在此刻（00:01），你眼睛都不眨得一下一口气填完了所有的信息，终于要点击提交按钮，准备睡觉了（指熬到零点打卡睡觉）。</p><p>首先会做的就是验证你的信息有没有漏填，必填项没填，点击按钮会告诉你哪里没填，不准你提交打卡。必填项也填好了，一切准备就绪，点击提交。程序会收集你所填写的信息组合在一起，组合起来的样子其实就是配置文件 post_json 里面可以填写的样子，这就是为什么往配置文件里面填，能让它自动提交配置文件的数据，你所填写的打卡选项都会被封装到 updateinfo 这个里面，格式大致如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;areaStr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;...&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;customerid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxx&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;deptStr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;deptid&quot;</span><span class="hljs-punctuation">:</span> xxx<span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxx&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;deptid&quot;</span><span class="hljs-punctuation">:</span> xxx<span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gpsType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;phonenum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxx&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;reportdate&quot;</span><span class="hljs-punctuation">:</span> xxx<span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;app&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;stuNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxx&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;templateid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pneumonia&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxx&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;updatainfo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;propertyname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sex&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;propertyname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxx&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxx&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;userid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxx&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxx&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxx&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>收集好用户信息组合成这样之后就会开始发送 HTTP 请求，发送的就是这一串数据，返回的数据当然就五花八门了（再次说一下 HTTP 请求简单理解为发送数据获取数据，当然有些不会发送数据，它只获取数据）。大致有：<code>areaStr 不能为空</code>、<code>deptid 不能为空</code>、<code>找不到机构模板</code>、<code>打卡频繁</code>、<code>成功</code>、<code>模板不符</code>……这其实是脚本才会大概率报出这样的错误，APP 由于数据处理好了，所以提交只会有成功、频繁。成功了当然就会返回一个页面，一个大大的绿色的✅，下面一行字写着提交成功。看到这个界面基本就安心睡去了。</p><p>但是数据提交过去可不能就这么没了，不然老师获取未打卡名单里面还是会有我们，所以数据存在了数据库里面，以看起来是 excel 的形式的关系型数据库，姓名，班级，打卡时间，打卡数据……。</p><h2 id="自动打卡是怎么运作的"><a href="#自动打卡是怎么运作的" class="headerlink" title="自动打卡是怎么运作的"></a>自动打卡是怎么运作的</h2><p>自动打卡的目的只有一个就是想法设法模拟发送上面这个 HTTP 请求，所以脚本就是在想尽一切办法把这些字段补齐。</p><ol><li>token，需要登录获取，所以写了登录的代码，模拟登录发送 HTTP 请求，获取到 token</li><li>updateinfo，现在回显功能取消的话，基本是告别了获取上次数据的简单流程，所以不得不在配置文件的 updateinfo 中填写你的那些获取不到信息的打卡数据</li><li>其他字段也是发送 HTTP 请求帮助我们获取的，其重点就是我们要去找要去抓包，看 app 是怎么获取的那部分数据（抓包也就是看 APP 发送了哪些 HTTP 请求，我们能用软件捕获到他们，然后我们进行分析，分析它发送了什么数据，又获取到了什么数据，这一次 HTTP 请求是否对我们有用）</li><li>推送功能，自动打卡当然不能只有一个悄无声息的 HTTP 请求数据发过去，我们用户需要知道到底发送了什么，成功了没有，错误的话又是怎么个错误原因，都是由推送来推送给我们使用者</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>数据获取发送通过 HTTP 请求</li><li>数据保存在数据库里面（为了就是老师导出未打卡的人员的时候到底有没有我们）</li><li>脚本就是在想法设法发送最关键的那一个 HTTP 请求，但是为了这一个又必须发送非常多其他的 HTTP 请求</li></ol>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式的艺术一书的阅读笔记</title>
    <link href="/2022/03/17/DesignPattern/"/>
    <url>/2022/03/17/DesignPattern/</url>
    
    <content type="html"><![CDATA[<p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结，使用设计模式是为了可重用代码、让代码更容易被他人理解并且保证代码的可靠性。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><strong>类图（Class Diagram）</strong> 是出现在系统中的不同类来描述系统的静态结构，主要用来描述不同的类以及它们之间的关系。</p><p>UML 属性的表示方式：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">可见性（+：<span class="hljs-keyword">public</span>、-：<span class="hljs-keyword">private</span>、#：<span class="hljs-keyword">protected</span>） 名称:类型[=默认值]<br></code></pre></td></tr></table></figure><p>UML 方法的表示方式：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">可见性 名称(参数列表)<span class="hljs-selector-attr">[: 返回类型]</span><br></code></pre></td></tr></table></figure><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><p>关联关系（Association）：（一个对象作为另一个对象的成员变量）</p><p>双向关联、单向关联、自关联、多重关联、聚合关系（整体和部分关系，部分可独立存在）、组合关系（在类中实例化另一个对象，共存亡）</p><p>依赖关系（Dependency）：（使用另一个类作为参数、将另一个类对象作为局部变量、调用另一个类的静态方法）</p><p>泛化关系（Generalization）又称继承关系：（描述父类和子类之间的关系）</p><p>接口与实现关系</p><h2 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h2><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>单一职责原则（Single Responsibility Principle，SRP）：一个类只负责一个功能领域中的相应职责。或者可以定义为：就一个类而言只有一个引起它变化的原因。</p><p>单一职责原则是实现高内聚、低耦合的指导方针，它是最简单又是最难运用的原则，需要设计人员发现类的不同的职责并将其分离。</p><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>开闭原则（Open-Closed Principle，OCP）：一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。</p><p>抽象化是开闭原则的关键。面向接口编程，在新需求到来时不需要改动抽象层而是添加具体的实现类即可完成。</p><h3 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h3><p>里氏代换原则（Liskov Substitution Principle，LSP）：所有引用基类（父类）的地方必须能透明地使用其子类的对象。</p><p>在软件中将一个基类对象替换为它的子类对象，程序将不会产生任何错误和异常，在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。（多态的感觉），这样扩展功能可通过增加一个新的子类来实现。</p><h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><p>依赖倒转原则（Dependency Inversion Principle，DIP）：抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程而不是实现编程。</p><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>接口隔离原则（Interface Segregation Principle，ISP）：使用多个专门的接口，而不是使用单一的总接口，即客户端不应该依赖那些它不需要的接口。</p><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><p>合成复用原则（Composition Resuse Principle，CRP）：尽量使用对象组合，而不是继承达到复用的目的</p><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><p>迪米特法则（Law of Demeter，LoD）：一个软件实体应当尽可能少地与其他实体发生相互作用。</p><p>当一个模块发生修改时，尽量少得影响其他模块，扩展和重构更加容易，即限制软件实体间的通信。</p><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式（Singleton Pattern）：确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。单例模式是一种对象创建型模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java 饿汉式，类加载时即实例化，占用系统资源</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EagerSingleton</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">EagerSingleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EagerSingleton</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">EagerSingleton</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> EagerSingleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 双重检查锁定（Double-Check Locking），使用锁机制，性能有一定影响</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LazySingleton</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> <span class="hljs-type">LazySingleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">LazySingleton</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazySingleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span>(LazySingleton.class)&#123;<br>                <span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>)&#123;<br>                    instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazySingleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 静态内部类机制</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClass</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> InnerClass.instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>提供对唯一实例的受控访问。</li><li>系统中只存在一个对象，节约系统资源。</li><li>允许可变数目的实例（自行提供指定数目实例对象的类可称之为多例类）。</li></ol><p>缺点：</p><ol><li>单例模式没有抽象层，难以扩展。</li><li>单例类职责过重，将对象的创建和对象本身的功能耦合在一起。</li><li>对于自动垃圾回收，如果实例化共享对象长时间不被利用会被回收，下次使用又需要实例化，导致共享的单例对象状态丢失。</li></ol><p>适用场景：</p><ol><li>系统只需要一个实例对象。</li><li>客户调用类的单个实例只允许一个公共访问点。</li></ol><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>简单工厂模式（Simple Factory Pattern）：定义一个工厂类，它可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类。因为在简单工厂模式中用于创建实例的方法是静态方法，因此简单工厂模式又称为静态工厂模式（Static Factory Method Pattern）。</p><ul><li>Factory（工厂角色）</li><li>Product（抽象产品角色）</li><li>ConcreteProduct（具体产品角色）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义产品抽象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Product</span>&#123;<br>    <br>&#125;<br><br><span class="hljs-comment">// 定义具体的产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteProductA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Product</span>&#123;<br>    <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteProductB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Product</span>&#123;<br>    <br>&#125;<br><br><span class="hljs-comment">// 定义工厂</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Product <span class="hljs-title function_">getProduct</span><span class="hljs-params">(String arg)</span>&#123;<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;A&quot;</span>.equals(arg))&#123;<br>            product = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProductA</span>();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;B&quot;</span>.equals(arg))&#123;<br>            product = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProductB</span>();<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> product;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>实现了对象创建和使用的分离，客户端只需要专注于使用产品</li><li>客户端无需知道所创建的具体产品的类名，而只需知道如何使用即可，减少了使用者的记忆量</li><li>引入配置文件可在不修改任何客户端代码的情况下进行更换和增加的新的具体产品类，在一定程度上提高了系统的灵活性</li></ol><p>缺点：</p><ol><li>工厂类集中了所有产品的创建逻辑，职责过重，一旦不能工作，整个系统都将受到影响</li><li>简单工厂模式会增加系统类的个数</li><li>系统扩展困难，增加新产品不得不修改工厂逻辑</li><li>简单工厂模式使用静态工厂方法，无法形成基于继承等级结构</li></ol><p>适用场景：</p><ol><li>工厂类负责创建的对象比较少，由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂</li><li>客户端只知道传入工厂类的参数，而不关系对象如何被创建</li></ol><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>工厂方法模式（Factory Method Pattern）：定义一个用于创建对象的接口，让子类决定将哪一个类实例化。工厂方法模式让一个类的实例化延迟到子类。工厂方法模式又称工厂模式（Factory Pattern）</p><ul><li>Product（抽象产品）</li><li>ConcreteProduct（具体产品）</li><li>Factory（抽象工厂）</li><li>ConcreteFactory（具体工厂）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象产品</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Logger</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeLog</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体产品</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Logger</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeLog</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;数据库日志记录&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Logger</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeLog</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;文件日志记录&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象工厂</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">LoggerFactory</span>&#123;<br>    <span class="hljs-keyword">public</span> Logger <span class="hljs-title function_">createLogger</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体工厂</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseLoggerFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LoggerFactory</span>&#123;<br>    <span class="hljs-keyword">public</span> Logger <span class="hljs-title function_">createLogger</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatabaseLogger</span>();<br>        <span class="hljs-keyword">return</span> logger;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体工厂</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileLoggerFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LoggerFactory</span>&#123;<br>    <span class="hljs-keyword">public</span> Logger <span class="hljs-title function_">createLogger</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileLogger</span>();<br>        <span class="hljs-keyword">return</span> logger;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>用户只需关心所需产品对应的工厂，无需关心创建细节甚至是具体的产品类名。</li><li>基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。</li><li>当添加新产品时，只需添加新的产品具体类和具体工厂即可，完全符合开闭原则。</li></ol><p>缺点：</p><ol><li>当添加新产品的时候需要编写新的具体产品类和具体工厂，一定程度上增加了系统的复杂度</li><li>抽象层增加了系统的抽象性和理解难度（？我怎么感觉抽象更好）</li></ol><p>适用场景：</p><ol><li>客户端不需要知道所需要的对象的类</li><li>抽象工厂类通过其子类来指定创建哪个对象（面向对象多态和里氏代换原则）</li></ol><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>抽象工厂模式（Abstract Factory Pattern）：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为 Kit 模式，它是一种对象创建型模式。</p><ul><li>AbstractFactory（抽象工厂）</li><li>ConcreteFactory（具体工厂）</li><li>AbstractProduct（抽象产品）</li><li>ConcreteProduct（具体产品）</li></ul><p>抽象工厂声明一组创建一族产品的方法</p><p>具体工厂实现创建一族产品的具体方法</p><p>添加产品族只需要继承或实现抽象工厂即可，符合开闭原则</p><p>添加产品等级结构需要改抽象工厂，一改动全身，不符合开闭原则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象工厂</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> AbstractProductA <span class="hljs-title function_">createProductA</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> AbstractProductB <span class="hljs-title function_">createProductB</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体工厂</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactory1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> AbstractProductA <span class="hljs-title function_">createProductA</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProductA1</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> AbstractProductB <span class="hljs-title function_">createProductB</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProductB1</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>抽象工厂模式隔离了具体类的生成，改变具体工厂的实例就可以改变系统行为</li><li>当一个产品族被设计一起工作时，它能保证客户端始终使用用一个产品族的对象</li><li>增加新的产品族很方便，无需修改已有系统</li></ol><p>缺点：</p><ol><li>增加新的产品等级结构麻烦，需要对原有系统进行较大的修改，甚至需要修改抽象层代码，违背开闭原则</li></ol><p>适用场景：</p><ol><li>系统不依赖于产品类实例的创建的细节</li><li>系统中有多于一个的产品族，且每次只使用一个产品族</li><li>属于一个产品族的产品一起使用，这一约束必须在系统设计中体现出来</li><li>产品等级结构稳定，设计完成之后，不会再向系统中增加或删除等级结构</li></ol><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>原型对象（Prototype Pattern）：使用原型实例指定创建对象的种类，并且通过克隆这些原型创建新的对象。</p><ul><li>Prototype（抽象原型类）</li><li>ConcretePrototype（具体原型类）</li></ul><p>优点：</p><ol><li>当创建一个新的对象实例较为复杂时，是原型模式通过复制一个现有的实例可以提高新实例的创建效率</li><li>扩展性好，面向抽象原型类进行编程，在增加或较少具体原型类对系统没有任何影响</li><li>原型模式提供简单的创建结构</li><li>可以使用深克隆的方式保存对象的状态</li></ol><p>缺点：</p><ol><li>每一类需要配备一个克隆方法，克隆方法位于类的内部，改造时需要修改，违背开闭原则</li><li>实现深克隆需要层层遍历，实现可能比较麻烦</li></ol><p>适用场景：</p><ol><li>创建新对象的成本比较大</li><li>系统需要保存对象的状态，而对象的状态很小，可以使用原型模式加备忘录模式</li><li>需要避免使用分层次的工厂类创建分层次的对象</li></ol><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>建造者模式（Builder Pattern）：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><ul><li>Builder（抽象建造者）：它为创建一个产品的 Product 对象的各个部件指定抽象方法</li><li>ConcreteBuilder（具体建造者）</li><li>Product（产品角色）</li><li>Director（指挥者），指挥如何创建</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 产品</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span>&#123;<br>    <span class="hljs-keyword">private</span> String partA;<br>    <span class="hljs-keyword">private</span> String partB;<br>    <span class="hljs-keyword">private</span> String partC;<br>    <br>    <span class="hljs-comment">//getter/setter</span><br>&#125;<br><br><span class="hljs-comment">// 抽象建造类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildPartA</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildPartB</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildPartC</span><span class="hljs-params">()</span>;<br>    <br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">getResult</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> product;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 指挥类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Director</span>&#123;<br>    <span class="hljs-keyword">private</span> Builder builder;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Director</span><span class="hljs-params">(Builder builder)</span>&#123;<br>        <span class="hljs-built_in">this</span>.builder = builder;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBuilder</span><span class="hljs-params">(Builder builder)</span>&#123;<br>        <span class="hljs-built_in">this</span>.builder = builder;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">construct</span><span class="hljs-params">()</span>[<br>        builder.buildPartA();<br>        builder.buildPartB();<br>        builder.buildPartC();<br>        <span class="hljs-keyword">return</span> builder.getResult();<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>使用相同的创建过程，不同的具体建造类可以创建不同的产品对象</li><li>建造者之间相对独立，系统扩展方便，符合开闭原则</li><li>可以精细控制产品的创建过程</li></ol><p>缺点：</p><ol><li>如果产品的组成部分差异性大，不适合使用建造者模式</li><li>如果产品内部结构复杂且多变，使用建造者模式会使系统变得很庞大</li></ol><p>适用场景：</p><ol><li>需要生成的产品对象有复杂的内部结构</li><li>需要生成的产品对象属性相互依赖，需要指定其生成顺序</li><li>建造者模式通过引入指挥者类，将创建过程与建造者类和客户端分离开来</li><li>使用相同的步骤创建不同的产品</li></ol><h2 id="结构性模式"><a href="#结构性模式" class="headerlink" title="结构性模式"></a>结构性模式</h2><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>适配器模式（Adapter Pattern）：将一个接口转换成客户端希望的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装类（Wrapper）。</p><ul><li>Target（目标抽象类）</li><li>Adapter（适配器类）</li><li>Adaptee（适配者类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 对象适配器模式，通过与待适配对象实现关联关系</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Target</span> &#123;<br>    <span class="hljs-keyword">private</span> Adaptee adaptee;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Adapter</span><span class="hljs-params">(Adaptee adaptee)</span>&#123;<br>        <span class="hljs-built_in">this</span>.adaptee = adaptee;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span>&#123;<br>        adaptee.specificRequest();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 类适配器模式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Adaptee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Target</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span>&#123;<br>        specificRequest();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 双向适配器模式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Target</span>,Adaptee &#123;<br>    <span class="hljs-keyword">private</span> Target target;<br>    <span class="hljs-keyword">private</span> Adaptee adaptee;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Adapter</span><span class="hljs-params">(Target target)</span>&#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Adapter</span><span class="hljs-params">(Adaptee adaptee)</span>&#123;<br>        <span class="hljs-built_in">this</span>.adaptee = adaptee;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span>&#123;<br>        adaptee.specificRequest();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">specificRequest</span><span class="hljs-params">()</span>&#123;<br>        target.request();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>缺省适配器模式（Default Adapter Pattern）：当不需要实现一个接口所提供的所有方法时，可先设计一个抽象实现该接口，并为接口中的每个方法提供一个默认实现，那么该抽象类的子类可以选择性地覆盖父类的某些方法来实现需求，它适用于不想使用一个接口中的所有方法得到情况。</p><ul><li>ServiceInterface（适配器接口）</li><li>AbstractServiceClass（缺省适配器类）</li><li>ConcreteServiceClass（具体业务类）</li></ul><p>优点：</p><ol><li>引用适配器类重用现有的适配类，无需修改原有结构</li><li>将具体的业务封装在适配者类中，提高适配者类的复用性</li><li>对于对象适配器模式可以将多个不同的适配者适配到同一个目标</li></ol><p>缺点：</p><ol><li>不支持多继承的语言，一个类最多只能适配一个适配者类</li><li>适配者不能是最终类</li><li>类适配器模式的目标抽象类只能是接口</li><li>对象适配模式在适配一个适配者类时可以先创建一个适配者类的子类进行方法的覆盖，再对适配者子类进行适配，实现过程复杂</li></ol><p>适用场景：</p><ol><li>系统需要使用一些现有的类，而这些类的接口不符合系统的需要</li><li>创建一个重复使用的类，用于一些彼此没有太大关联的类</li></ol><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><p>桥接模式（Bridge Pattern）：将抽象部分与其实现部分分离，使它们都可以独立地变化。它是一个对象结构型模式，又称为柄体（Handle and Body）模式或接口（Interface）模式。</p><ul><li>Abstraction（抽象类）</li><li>RefinedAbstraction（扩充抽象类）</li><li>Implementor（实现类接口）</li><li>ConcrateImplementor（具体实现类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 实现类接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Implementor</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operationImpl</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 抽象类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Abstraction</span> &#123;<br>    <span class="hljs-keyword">protected</span> Implementor impl;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setImpl</span><span class="hljs-params">(Implementor impl)</span>&#123;<br>        <span class="hljs-built_in">this</span>.impl = impl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span>;<br>&#125;<br><br><br><span class="hljs-comment">// 扩充抽象类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RefinedAbstraction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Abstraction</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span>&#123;<br>        impl.operationImpl();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>分离抽象接口及其实现部分。</li><li>桥接模式可以取代多层继承方案</li><li>桥接模式提高了系统的可扩展性，在两个维度中任意扩展一个维度，都不要修改原有的系统。</li></ol><p>缺点：</p><ol><li>桥接模式增加了系统的理解和设计难度，需要开发者对抽象层进行设计和编程（感觉这是好处，觉得它难就是它的缺点我有点不赞同，要迎难而上）</li><li>需要正确识别系统中两个独立变化的维度</li></ol><p>适用场景：</p><ol><li>如果系统需要抽象类和具体类中增加更多的灵活性，避免在层次间继承关系，可以使用桥接模式在抽象层建立关联关系</li><li>抽象部分和实现部分可以以继承的方式单独扩展而互不影响</li><li>一个类存在两个或多个独立变化的维度</li><li>对于不希望使用继承或多层继承导致系统类急剧增加的系统，桥接模式尤为适用</li></ol><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>组合模式（Composite Pattern）：组合多个对象形成树形结构以表示具有整体一部分关系的层次结构。组合模式对单个对象和组合对象的使用具有一致性，组合模式又称为整体-部分（Part-Whole）模式。</p><ul><li>Component（抽象构件）</li><li>Leaf（叶子构件）</li><li>Composite（容器构件）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象构件，客户端对抽象构件进行编程</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Component</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Component c)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Component c)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Component <span class="hljs-title function_">getChild</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 叶子构件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Leaf</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Component c)</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Component c)</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> Component <span class="hljs-title function_">getChild</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 容器构件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Composite</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-keyword">private</span> ArrayList&lt;Component&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Compontnt&gt;();<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Component c)</span>&#123;<br>list.add(c);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Component c)</span>&#123;<br>list.remove(c);<br>    &#125;<br>    <span class="hljs-keyword">public</span> Component <span class="hljs-title function_">getChild</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br><span class="hljs-keyword">return</span> (Component)list.get(i);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">for</span>(Object obj: list)&#123;<br>            (Component)obj.operation();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>组合模式可以清楚定义分层次的复杂对象</li><li>客户端一致地使用组合结构或单个对象</li><li>扩展增加新的容器构件和叶子构件方便</li><li>通过叶子对象和容器对象的递归组合，可形成复杂的树形结构</li></ol><p>缺点：</p><ol><li>增加新构件时难以对容器中的构建类进行限制</li></ol><p>适用场景：</p><ol><li>具体整体和部分层次结构中</li><li>使用面向对象语言系统处理树形结构</li><li>分离叶子对象和容器对象</li></ol><h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h3><p>装饰模式（Decorator Pattern）：动态地给一个对象增加一些额外的职责，就增加对象的功能来说，装饰模式比子类实现更为灵活。</p><ul><li>Component（抽象构件）</li><li>Decorator（抽象装饰类）</li><li>ConcreteDecorator（具体装饰类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象装饰类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Decorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Component</span>&#123;<br>    <span class="hljs-keyword">private</span> Component component;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Decorator</span><span class="hljs-params">(Component component)</span>&#123;<br>        <span class="hljs-built_in">this</span>.component = component;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">opeartion</span><span class="hljs-params">()</span>&#123;<br>        component.operation();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体抽象类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Decorator</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteDecorator</span><span class="hljs-params">(Component component)</span>&#123;<br>        <span class="hljs-built_in">super</span>(component);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">super</span>.operation();<br>        addedBehavior();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addedBehavior</span><span class="hljs-params">()</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意事项：</p><ol><li>尽可能保持装饰类的接口和被装饰类的接口相同</li><li>尽量保持具体构件类是一个轻类</li><li>如果只有一个具体构件类，那么可以抽象装饰类直接作为该具体构件类的子类</li></ol><p>优点：</p><ol><li>扩展一个对象的功能相比较继承更灵活</li><li>可以通过动态的方法进行对象功能的扩展</li><li>可以对一个对象进行多次装饰</li><li>具体构件类和具体装饰类可以独立变化</li></ol><p>缺点：</p><ol><li>装饰模式会设置非常多小对象，不利于管理</li><li>装饰模式比继承更容易出错，排错更困难</li></ol><p>适用场景：</p><ol><li>在不像其他对象的情况下，动态、透明地给单个对象添加职责</li><li>不能采用继承的方式对系统进行扩展或采用继承对系统扩展和维护不利时</li></ol><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><p>外观模式（Facade Pattern）：外部与一个子系统的通信通过一个统一的外观角色进行，为子系统中的一组接口提供一个一致的入口，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。（子系统是一个广义的概念，它可以是一个类、一个功能模块、系统的一个组成部分或者一个完整的系统）。</p><ul><li>Facade（外观角色）</li><li>SubSystem（子系统角色）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Facade</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">SubSystemA</span> <span class="hljs-variable">obj1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubSystemA</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">SubSystemB</span> <span class="hljs-variable">obj2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubSystemB</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">SubSystemC</span> <span class="hljs-variable">obj3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubSystemC</span>();<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        obj1.method();<br>        obj2.method();<br>        obj3.method();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>客户端屏蔽了子系统组件，减少了客户端所需处理的对象数目</li><li>实现了子系统与客户端之间的松耦合关系，子系统变化不会影响到客户端</li><li>一个子系统的修改不会影响到其他子系统</li><li>只是提供了一个子系统的统一访问入口，不影响客户端直接使用子系统</li></ol><p>缺点：</p><ol><li>不能很好地限制客户端直接使用子系统</li><li>设计不当，可能导致增加新的子系统时可能需要修改外观类的源代码</li></ol><p>适用场景：</p><ol><li>当要为访问一系列复杂的子系统提供一个简单入口时</li><li>客户端程序与多个子系统存在很大的依赖性，利用外观模式解耦</li><li>在层次化结构中，使用外观模式定义系统中每一层的入口</li></ol><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><p>享元模式（Flyweight Pattern）：运用共享技术有效地支持大量细粒度对象的复用。系统只是用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。</p><ul><li>Flayweight（抽象享元类）</li><li>ConcreteFlyweight（具体享元类）</li><li>UnsharedConcreteFlyweight（非共享具体享元类）</li><li>FlyweightFactory（享元工厂类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 享元工厂类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FlyweightFactory</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">HashMap</span> <span class="hljs-variable">flyweight</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    <br>    <span class="hljs-keyword">public</span> Flyweigth <span class="hljs-title function_">getFlyweight</span><span class="hljs-params">(String key)</span>&#123;<br>        <span class="hljs-keyword">if</span>(flyweight.containsKey(key))&#123;<br>            <span class="hljs-keyword">return</span> (Flayweight)flyweight.get(key);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">Flyweight</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteFlyweight</span>();<br>            flyweight.put(key, fw);<br>            <span class="hljs-keyword">return</span> fw;<br>        &#125;<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象享元类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Flyweight</span> &#123;<br>    <span class="hljs-keyword">private</span> String intrinsicState;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Flyweight</span><span class="hljs-params">(String intrinsicState)</span>&#123;<br>        <span class="hljs-built_in">this</span>.intrinscState = intrinsicState;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">(String extrinsicState)</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>可以极大减少内存中对象的数量</li><li>享元模式的外部状态相对独立，不会影响其内部状态，从而使享元对象可以在不同环境被共享</li></ol><p>缺点：</p><ol><li>分离出内部状态和外部状态，使得程序逻辑变得复杂</li><li>为了对象共享，需要将享元对象的部分状态外部化</li></ol><p>适用场景：</p><ol><li>以恶系统中有大量相同或者相似的对象，造成内存的大量耗费</li><li>对象的大部分状态可以外部化，可以将这些外部状态传入到对象中</li><li>维护一个存储享元对象的享元池，需要耗费一定的系统资源，在需要多次重复使用享元对象才值得使用</li></ol><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>代理模式（Proxy Pattern）：给某一个对象提供一个代理，并由代理对象控制原对象的引用。</p><ul><li>Subject（抽象主题角色）</li><li>Proxy（代理主题角色）</li><li>RealSubject（真实主题角色）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">RealSubject</span> <span class="hljs-variable">realSubject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealSubject</span>();<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preRequst</span><span class="hljs-params">()</span>&#123;&#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span>&#123;<br>        preRequest();<br>        realSubject.request();<br>        postRequest();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postRequest</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>常用的代理模式：</p><ol><li>远程代理（Remote Proxy）：为一个不同的地址空间的对象提供一个本地的代理对象。远程代理又称为大使（Ambassador）。</li><li>虚拟代理（Virtual Proxy）：如果需要创建一个资源消耗较大的对象，先创建一个消耗较小的对象来表示，真实的对象只在需要时才会被真正创建。</li><li>保护代理（Protect Prxoy）：控制一个对象的访问，可以给不同的用户提供不同级别的使用权限。</li><li>缓冲代理（Cache Proxy）：为一个目标操作的结构提供临时的存储空间，以便多个客户端可以共享这些结构。</li><li>智能引用代理（Smart Reference Proxy）：当一个对象被引用时，提供一些额外操作。</li></ol><p>优点：</p><ol><li>代理模式协调调用者和被调用者，在一定程度降低系统的耦合度</li><li>客户端根据抽象主题角色编程，增加更换代理类无须修改源代码</li><li>远程代理位于两个不同地址空间对象的访问提供一个实现机制</li><li>虚拟代理通过一个消耗资源较少的对象来代表资源消耗较多的对象，节省系统开销</li><li>保护代理可以控制对一个对象的访问权限</li></ol><p>缺点：</p><ol><li>客户端和真实主题之间增加了代理对象，请求速度变慢。</li><li>实现代理模式需要额外的工作</li></ol><p>适用场景：</p><ol><li>当客户端需要访问远程主机对象时，使用远程代理</li><li>当需要一个消耗资源较少的对象来代表消耗资源较多的对象时，使用虚拟代理</li><li>当控制一个对象的访问，使用保护代理</li><li>当需要某一个频繁访问的操作结果提供临时存储空间使用缓冲代理</li><li>当需要为一个对象的访问提供一些额外操作时，使用智能引用代理</li></ol><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><h3 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h3><p>职责链模式（Chain of Responsibility Pattern）：避免将请求发送者与接收者耦合在一起，让多个对象都有机会接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</p><ul><li>Handler（抽象处理者）</li><li>ConcreteHandler（具体处理者）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象处理类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Handler</span> &#123;<br>    <span class="hljs-keyword">protected</span> Handler successor;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSuccessor</span><span class="hljs-params">(Handler successor)</span>&#123;<br>        <span class="hljs-built_in">this</span>.successor = successor;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(String request)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体处理类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(String reqeust)</span>&#123;<br>        <span class="hljs-keyword">if</span>(请求满足条件)&#123;<br>            <span class="hljs-comment">// 处理请求</span><br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.successor.handleRequest(request); <span class="hljs-comment">// 转发请求</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>一个对象无需知道哪一个对象会处理此请求，客户端负责链的创建，降低了系统的耦合度</li><li>请求处理对象仅需维持一个其后继者的引用，而不需要维持所有的，简化对象连接</li><li>在系统中增加新的具体处理者无需修改原有系统的代码，只需客户端重新建链即可</li></ol><p>缺点：</p><ol><li>请求可能一直到末端也没有处理</li><li>对于长的职责链，代码调试不太方便</li><li>建链不当可能造成循环调用，导致系统陷入死循环</li></ol><p>适合场景：</p><ol><li>有多个对象可以处理同一个请求，具体哪个对象处理运行时确定，客户端无需知道是哪个具体对象处理</li><li>在不明确指定接收者的情况下，向多个对象中的提交一个请求</li><li>可动态指定一组对象处理请求，客户端可以改变链中处理者之间的先后次序</li></ol><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>命令模式（Command Pattern）：将一个请求封装为一个对象，从而可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。别名为动作（Action）模式或事务（Transaction）模式。</p><ul><li>Command（抽象命令类）</li><li>ConcreteCommand（具体命令类）</li><li>Invoker（调用者）</li><li>Receiver（接收者）</li></ul><p>命令模式的本质就是对请求进行封装，一个请求对应于一个命令，将发出的命令的职责和执行命令的责任分隔开。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象命令类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Command</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 调用者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Invoker</span> &#123;<br>    <span class="hljs-keyword">private</span> Command command;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Invoker</span><span class="hljs-params">(Command command)</span>&#123;<br>        <span class="hljs-built_in">this</span>.command = command;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCommand</span><span class="hljs-params">(Command command)</span>&#123;<br>        <span class="hljs-built_in">this</span>.command = command;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br>        command.execute();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体命令类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteCommand</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Command</span> &#123;<br>    <span class="hljs-keyword">private</span> Receiver receiver;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>&#123;<br>        receiver.action();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 接收者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Reciver</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">action</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 具体操作</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>降低系统耦合度，请求者和接收者之间不存在直接引用</li><li>新的命令可以很容易加到系统中</li><li>比较容易设计一个命令队列或宏命令（组合模式）</li><li>为请求的撤销和恢复操作设计一种设计和实现方案</li></ol><p>缺点：</p><ol><li>可能会导致系统有过多的具体命令类</li></ol><p>适合场景：</p><ol><li>系统需要调用者和接收者解耦</li><li>系统需要在不同的时间指定请求，将请求排队和执行请求。</li><li>系统需要支持命令的撤销和恢复操作</li><li>系统需要一组操作组合形成宏命令</li></ol><h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><p>解释器模式（Interpreter Pattern）：定义一个语言的文法，并且建立一个解释器来接收该语言中的句子，这里的语言是指使用规定格式和语法的代码。</p><ul><li>AbstractExpression（抽象表达式）</li><li>TerminalExpression（终结符表达式）</li><li>NonterminalExpression（非终结符表达式）</li><li>Context（环境类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象表达式</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractExpression</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(Context ctx)</span>;<br>&#125;<br><br><span class="hljs-comment">// 终结符表达式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TerminalExpression</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractExpression</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(Context ctx)</span>&#123;<br>        <span class="hljs-comment">// 终结符表达式的解释操作</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 非终结符表达式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NonterminalExpression</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractExpression</span> &#123;<br>    <span class="hljs-keyword">private</span> AbstractExpression left;<br>    <span class="hljs-keyword">private</span> AbstractExpression right;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NonterminalExpression</span><span class="hljs-params">(AbstractExpression left, AbstractExpression right)</span>&#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(Context ctx)</span>&#123;<br>        <span class="hljs-comment">// 递归调用每一个组成部分的 interpret 方法</span><br>        <span class="hljs-comment">// 在递归调用时指定组成部分的连接方式，即非终结符的功能</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 环境类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">assign</span><span class="hljs-params">(String key, String value)</span>&#123;<br>        <span class="hljs-comment">// 往环境类中设值</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">lookup</span><span class="hljs-params">(String key)</span>&#123;<br>        <span class="hljs-comment">// 获取存储在环境类中的值</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>易于改变和扩展文法</li><li>每一条文法规则都可以表示一个类</li><li>实现文法较为容易</li><li>增加新的解释表达式较为方便，只需增加终结符表达式或非终结符表达式</li></ol><p>缺点：</p><ol><li>复杂文法难以维护，每一个规则都至少需要定义一个类</li><li>执行效率低，大量递归和循环</li></ol><p>适用场景：</p><ol><li>可以将一个需要解释执行的语言中的句子表示为一个抽象语法树</li><li>一些重复出现的问题可以用一种简单的语言来表达</li><li>一个语言的文法较为简单</li><li>执行效率不是关键问题</li></ol><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>迭代器模式（Interator Pattern）：提供一个方法来访问聚合对象，而不是暴露这个对象的内部表示，其别名为游标。</p><ul><li>Iterator（抽象迭代器）</li><li>ConcreteIterator（具体迭代器）</li><li>Aggregate（抽象聚合类）</li><li>ConcreteAggregate（具体聚合类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象迭代器</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Iterator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">first</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">next</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">currentItem</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体迭代器类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span> &#123;<br>    <span class="hljs-keyword">private</span> ConcreteAggregate objects;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> cursor;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteIterator</span><span class="hljs-params">(ConcreteAggregate objects)</span>&#123;<br>        <span class="hljs-built_in">this</span>.objects = objects;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">first</span><span class="hljs-params">()</span> &#123;&#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;&#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;&#125;;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">currentItem</span><span class="hljs-params">()</span> &#123;&#125;;<br>&#125;<br><br><span class="hljs-comment">// 抽象聚合类</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Aggregate</span> &#123;<br>    Iterator <span class="hljs-title function_">createIterator</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体聚合类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteAggregate</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Aggregate</span> &#123;<br>    <span class="hljs-keyword">public</span> Iterator <span class="hljs-title function_">createIterator</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteIterator</span>(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>支持不同的方式遍历一个聚合对象。</li><li>迭代器简化了聚合类，通过迭代器来实现聚合类的遍历等方法</li><li>迭代器引入抽象层，在增加新的聚合类和迭代器类都很方便</li></ol><p>缺点：</p><ol><li>迭代器模式将存储数据和遍历数据的职责分开，因此增加聚合类时相应要增加迭代器类，增加了系统的复杂性</li><li>抽象迭代器的设计难度较大，应充分考虑到系统未来的扩展</li></ol><p>适用场景：</p><ol><li>访问一个聚合对象的内容而无须暴露它的内部表示</li><li>需要为一个聚合对象提供多种遍历方式</li><li>为遍历不同的聚合结构提供一个统一的接口，在该接口的实现类中为不用的聚合类提供不同的遍历方式</li></ol><h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><p>中介者模式（Mediator Pattern）：用一个中介对象（中介者）来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变他们之间的交互。</p><ul><li>Mediator（抽象中介者）</li><li>ConcreteMediator（具体中介者）</li><li>Colleague（抽象同事类）</li><li>ConcreteColleague（具体同事类）</li></ul><p>中介类的两个作用：</p><ol><li>中转作用。通过中介者提供的中转作用，各个同事对象就不再显式引用其他同事，当需要其他同事通过中介者间接调用</li><li>协调作用。中介者可对同事的请求进一步处理，将同事成员之间的关系行为进行分离和封装</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象中介者</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mediator</span> &#123;<br>    <span class="hljs-keyword">protected</span> ArrayList&lt;Colleague&gt; colleagues;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(Colleagure colleague)</span>&#123;<br>        colleagues.add(colleague);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体中介者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteMediator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mediator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span>&#123;<br>        ((Colleague)(colleagues.get(<span class="hljs-number">0</span>))).method1();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象同事类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Colleague</span> &#123;<br>    <span class="hljs-keyword">protected</span> Mediator mediator;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Colleague</span><span class="hljs-params">(Mediator mediator)</span>&#123;<br>        <span class="hljs-built_in">this</span>.meditor = mediator;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">()</span>&#123;<br>        mediator.operation();<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-comment">// 具体同事类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteColleague</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Colleague</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteColleague</span><span class="hljs-params">(Mediator mediator)</span>&#123;<br>        <span class="hljs-built_in">super</span>(mediator);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>简化对象之间的交互</li><li>将各同事对象解耦</li><li>减少大量同事子类生成</li></ol><p>缺点：</p><ol><li>在具体中介类中包含了大量同事之间的交互细节，可能导致中介类过于复杂难以维护</li></ol><p>适用场景：</p><ol><li>系统中对象之间存在复杂的引用关系，系统结构混乱难以理解</li><li>一个对象由于引用了其他很多对象通信，导致难以复用该对象</li><li>想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类</li></ol><h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><p>备忘录模式（Memento Pattern）：在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后对象恢复到原先保存的状态。</p><ul><li>Originator（原发器）</li><li>Memento（备忘录）</li><li>Caretaker（负责人）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 原发器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Originator</span> &#123;<br>    <span class="hljs-keyword">private</span> String state;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Originator</span><span class="hljs-params">()</span>&#123;&#125;<br>    <br>    <span class="hljs-keyword">public</span> Memento <span class="hljs-title function_">createMemento</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Memento</span>(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">restoreMemento</span><span class="hljs-params">(Memento m)</span>&#123;<br>        state = m.state;<br>    &#125;<br>    <br>    <span class="hljs-comment">// getter/setter</span><br>&#125;<br><br><span class="hljs-comment">// 备忘录</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Memento</span> &#123;<br>    <span class="hljs-keyword">private</span> String state;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Memento</span><span class="hljs-params">(Originator o)</span>&#123;<br>        state = o.getState();<br>    &#125;<br>    <br>    <span class="hljs-comment">// getter/setter</span><br>&#125;<br><br><span class="hljs-comment">// 负责人</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Caretaker</span> &#123;<br>    <span class="hljs-keyword">private</span> Memento memento;<br>    <br>    <span class="hljs-keyword">public</span> Memento <span class="hljs-title function_">getMemento</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> memento;<br>    &#125;<br>    <br>    <span class="hljs-comment">// getter/setter</span><br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>提供一种状态恢复的实现机制</li><li>实现了对信息的封装，一个备忘录对象是一种原发器对象状态的表示</li></ol><p>缺点：</p><ol><li>资源消耗过大，每保存一次对象的状态都需要消耗一定的系统资源</li></ol><p>适用场景：</p><ol><li>保存一个对象在某一时刻的全部状态或部分状态</li><li>防止外界对象破坏一个对象历史状态的封装性，避免对象历史状态实现细节暴露给外界对象</li></ol><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>观察者模式（Observer Pattern）：定义对象之间的一种一对多的依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。也可称为发布-订阅（Publish&#x2F;Subscribe）模式、模型-视图（Modal&#x2F;View）模式、源-监听器（Source&#x2F;Listener）模式或从属者（Dependents）模式。</p><ul><li>Subject（目标）</li><li>ConcreteSubject（具体目标）</li><li>Observer（观察者）</li><li>ConcreteObserver（具体观察者）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 目标</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-keyword">protected</span> ArrayList&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(Observer observer)</span>&#123;<br>        observers.add(observer);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">detach</span><span class="hljs-params">(Observer observer)</span>&#123;<br>        observers.remove(oberver);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notify</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体目标类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteSubject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notify</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span>(Observer ob: observers)&#123;<br>            ob.update();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象观察类</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Observer</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体观察者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteObserver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 具体响应代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>实现了表示层和数据逻辑层的分离，定义了稳定的消息更新传递机制</li><li>在观察目标和观察者之间建立一个抽象的耦合</li><li>支持广播通信，简化一对多系统的设计</li><li>增加新的具体观察者无需修改原有系统代码，具体观察者和观察目标不存在关联关系时增加新的观察目标也很方便</li></ol><p>缺点：</p><ol><li>如果一个观察目标对象有很多直接和间接观察者，将所有的观察者通知很花时间</li><li>观察者和观察者目标之间存在循环依赖，观察目标触发循环调用可能导致系统崩溃</li><li>没有相应的机制让观察者知道所有观察的目标如何变化而仅仅知道观察目标发生了变化</li></ol><p>适用场景：</p><ol><li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面</li><li>一个对象的改变导致一个或多个其他对象也发生改变</li><li>需要在系统中创建一个触发链</li></ol><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p>状态模式（State Pattern）：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</p><ul><li>Context（环境类）</li><li>State（抽象状态类）</li><li>ConcreteState（具体状态类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象状态类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体状态类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 方法具体实现代码</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 环境类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> &#123;<br>    <span class="hljs-keyword">private</span> State state;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(State state)</span>&#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span>&#123;<br>        state.handle();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>状态改变的两种方式：</p><ol><li>统一由环境类来负责状态之间的转换</li><li>由具体状态类负责状态之间的转换</li></ol><p>优点：</p><ol><li>封装状态的转换规则，对状态转换代码进行统一管理</li><li>将所有与某个状态有关的行为放到一个类中，只需要注入一个不同的状态对象</li><li>允许状态转换逻辑与状态对象合成一体，而不是一个提供巨大的条件语句块</li><li>可以让多个环境对象共享一个状态对象</li></ol><p>缺点：</p><ol><li>状态模式的使用增加系统中类和对象的个数</li><li>程序结构与实现较为复杂</li><li>开闭原则支持不好</li></ol><p>适合场景：</p><ol><li>对象的行为依赖它的状态，状态的改变将导致行为的变化</li><li>在代码中包含大量与对象状态有关的条件语句</li></ol><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>策略模式（Strategy Pattern）：定义一系列算法类，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化，也成为政策模式（Policy）。</p><ul><li>Context（环境类）</li><li>Strategy（抽象策略类）</li><li>ConcreteStrategy（具体策略类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象策略类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractStrategy</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">algorithm</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体策略类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractStrategy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">algorithm</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 算法A</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 环境类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> &#123;<br>    <span class="hljs-keyword">private</span> AbstractStrategy strategy;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStrategy</span><span class="hljs-params">(AbstractStrategy strategy)</span>&#123;<br>        <span class="hljs-built_in">this</span>.strategy = strategy;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">algorithm</span><span class="hljs-params">()</span>&#123;<br>        strategy.algorithm();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>完美支持开闭原则，用户可以在不修改原有系统代码的基础上增加新的算法或行为</li><li>提供类管理相关算法族的办法，恰当使用继承可以将公共的代码抽取到抽象策略类中</li><li>提供了替换继承关系的办法。</li><li>避免了多重条件选择语句</li><li>提供了算法复用机制，可以在不同环境类中使用这些策略</li></ol><p>缺点：</p><ol><li>客户端必须知道所有的策略类，然后决定使用哪一个</li><li>策略模式导致系统出现很多具体策略类</li><li>无法同时在客户端使用多个策略类</li></ol><p>适用场景：</p><ol><li>一个系统需要动态地在几种算法中选择一种</li><li>一个对象有很多的行为，这些行为转移到相应的具体策略类中可以避免使用难以维护的多重条件选择语句</li><li>不希望客户端知道复杂的、与算法相关的数据结构，在具体策略类中封装算法与相关的数据结构，提高算法的保密性与安全性</li></ol><h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><p>模板方法模式（Template Method Pattern）：定义一个操作中算法的框架，而将一些步骤延迟到子类中，模板方法使得子类可以不改变一个算法结构即可重定义该算法某些特定的步骤。</p><ul><li>AbstractClass（抽象类）</li><li>ConcreteClass（具体类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractClass</span> &#123;<br>    <br>    <span class="hljs-comment">// 模板方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">templateMethod</span><span class="hljs-params">()</span>&#123;<br>        primitiveOperation1();<br>        primitiveOperation2();<br>        primitiveOperation3();<br>    &#125;<br>    <br>    <span class="hljs-comment">// 具体方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">primitiveOperation</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 实现代码</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 抽象方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">primitiveOperation2</span><span class="hljs-params">()</span>;<br>    <br>    <span class="hljs-comment">// 钩子方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">primitiveOperation3</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-comment">// 具体类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">primitiveOperation2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 实现代码</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">primitiveOperation3</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 实现代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>在子类实现详细的处理算法时并不会改变算法中的步骤的执行次序</li><li>将公共方法放入父类中，通过子类实现不同的行为，它鼓励使用继承来实现代码复用</li><li>实现反向控制结构，通过子类覆盖父类的钩子方法来决定某一特定步骤是否执行</li><li>不同子类提供的方法的不同实现，更换和增加子类很方便，符合单一职责原则和开闭原则</li></ol><p>缺点：</p><ol><li>需要为每一个基本方法的不同实现提供一个子类，如果父类可变方法太多，将导致类的个数增加，可结合桥接模式来设计</li></ol><p>适用场景：</p><ol><li>对一个复杂算法进行分割</li><li>各自类公共的行为应该提取并集中到一个公共父类中</li><li>通过子类来决定父类算法中某一个步骤需要执行，实现子类对父类的反向控制</li></ol><h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><p>访问者模式（Visitor Pattern）：提供一个作用于某对象结构中的各元素的操作表示，它使得可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p><ul><li>Visitor（抽象访问者）</li><li>ConcreteVisitor（具体访问者）</li><li>Element（抽象元素）</li><li>ConcreteElement（具体元素）</li><li>ObjectStructure（对象结构）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象访问者</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Visitor</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(ConcreteElementA elementA)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(ConcreteElementB elementB)</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(ConcreteElementC elemtentC)</span>&#123;<br>        <span class="hljs-comment">// 元素 ConcreteELementC 操作代码</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体访问者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteVisitor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Visitor</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(ConcreteELementA elementA)</span>&#123;<br>        <span class="hljs-comment">// 元素 ConcreteElementA 操作代码</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(ConcreteElementB elementB)</span>&#123;<br>        <span class="hljs-comment">// 元素 ConcreteElementB 操作代码</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象元素类</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Element</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体元素类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteElement</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Element</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span>&#123;<br>        visitor.visit(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operationA</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 业务方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 对象结构</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectStructure</span> &#123;<br>    <span class="hljs-keyword">private</span> ArrayList&lt;Element&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span>&#123;<br>        <span class="hljs-keyword">for</span>(Element e: list)&#123;<br>            e.accept(visitor);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addElement</span><span class="hljs-params">(Element element)</span>&#123;<br>        list.add(element);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>增加新的访问操作很方便</li><li>将有关元素对象的访问集合到一个访问者对象中</li><li>让用户能够在不修改原有元素层次结构的情况下，定义作用于该层次结构的操作</li></ol><p>缺点：</p><ol><li>增加新的元素类很困难</li><li>破坏封装，访问者模式要求访问者对象访问并调用每一个元素对象的操作</li></ol><p>适用场景：</p><ol><li>一个对象结构包含多个类型的对象，希望对这些对象实施一些依赖具体类型的操作</li><li>需要对一个对象结构中的对象进行很多不同的并且不相关的操作</li><li>对象结构中对象对应的类很少变化，但经常需要在此对象结构上定义新的操作</li></ol>]]></content>
    
    
    <categories>
      
      <category>Reading</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022年度目标</title>
    <link href="/2022/02/10/2022AnnualGoals/"/>
    <url>/2022/02/10/2022AnnualGoals/</url>
    
    <content type="html"><![CDATA[<blockquote><p>书读百遍，其义自见 —— 《三国志》</p></blockquote><h2 id="📚读书清单"><a href="#📚读书清单" class="headerlink" title="📚读书清单"></a>📚读书清单</h2><blockquote><p>（边看，边更新）</p></blockquote><table><thead><tr><th>书名</th><th>状态</th><th>完成日期</th></tr></thead><tbody><tr><td>《Effective Java》</td><td>已读</td><td>2022&#x2F;05&#x2F;10</td></tr><tr><td>《Java核心技术》（重读）</td><td>已读</td><td>2022&#x2F;05&#x2F;10</td></tr><tr><td>《JavaScript高级程序设计》</td><td>已读</td><td>2022&#x2F;06&#x2F;29</td></tr><tr><td>《OnJava8》（Java编程思想第五版）</td><td><strong>正在读</strong></td><td></td></tr><tr><td>《计算机网络：自顶向下方法》</td><td>未开始</td><td></td></tr><tr><td>《重构：改善既有代码的设计》</td><td>已读</td><td>2022&#x2F;10&#x2F;01</td></tr><tr><td>《软技能：代码之外的生存指南》（重读）</td><td><strong>正在读</strong></td><td></td></tr><tr><td>《代码整洁之道》</td><td>已读</td><td>2022&#x2F;09&#x2F;12</td></tr><tr><td>《代码大全》🌟</td><td>已读</td><td>2022&#x2F;05&#x2F;27</td></tr><tr><td>《计算机程序的构造与解释》</td><td>未开始</td><td></td></tr><tr><td>《程序员的职业素养》</td><td>已读</td><td>2022&#x2F;10&#x2F;15</td></tr><tr><td>《蛤蟆医生去看心理医生》</td><td><strong>正在读</strong></td><td></td></tr><tr><td>《哲学故事》</td><td>未开始</td><td></td></tr></tbody></table><h2 id="🎯其他目标"><a href="#🎯其他目标" class="headerlink" title="🎯其他目标"></a>🎯其他目标</h2><ul><li><input disabled="" type="checkbox"> 六块腹肌</li><li><input disabled="" type="checkbox"> <del>存款 X 万（等四月份转正看工资再定）</del> 存不了钱</li><li><input checked="" disabled="" type="checkbox"> <del>家里配一台电脑</del>(买了显示器和键盘等于我买了电脑) —— <strong>2022&#x2F;08&#x2F;14</strong></li><li><input disabled="" type="checkbox"> <del>去长城</del> 太远了，一来一回太久了，不想去了</li><li><input checked="" disabled="" type="checkbox"> 去环球影城 —— <strong>2022&#x2F;04&#x2F;23</strong></li><li><input disabled="" type="checkbox"> <del>完成博客全栈系统</del> 转学 Unity 无时间也不太想做这块了</li><li><input disabled="" type="checkbox"> 完善完美校园打卡脚本</li></ul><h2 id="💊杂谈"><a href="#💊杂谈" class="headerlink" title="💊杂谈"></a>💊杂谈</h2><p>从小就不爱读课外书，不过《青年文摘》，《故事会》，《意林》也都看过，加上语文阅读理解不行（每次考试能及格就是恭喜），读书特费劲。其实大一的时候就尝试改变过一次，买了一本《百年孤独》，读了一点点被人名劝退了，导致不知道它在讲什么，然后就不了了之了。直到 2021 年，找第二份 Java 工作时，总监要求我看两个月的 《Java核心技术》这本书，我才发现书籍的魅力，由于之前的自学经历基本都是通过视频学习，看书根本看不进去。看了这本书之后发现之前学习看的视频完全不是一个梯度的，学到了非常多的知识，然后就开始找很多很多的书开始慢慢看，因此想借此机会慢慢养成读书的习惯，作为想成为程序员大佬的我，当然要好好看书沉淀自己的知识啦（广度~深度）✨。</p><p>身体是革命的本钱，随着长大，看到越来越多的不好的事情发生，越感到身体健康永远是在第一位。目标有个六块腹肌其目的在督促自己锻炼身体，虽然我每天尽量都是骑单车30分钟上下班，但是觉得还远远不够。还有一个目的就是想找个健身的妹子（当然只是想一下）</p><p>我是一个非常讨厌谈钱的人，可能和我是个白嫖怪有关（不买会员，打游戏也不怎么充钱，能玩就行，需要什么资源就自己找，找不到就算了），不过现实得一，钱到用时方恨少，努力攒钱努力攒钱。</p>]]></content>
    
    
    <categories>
      
      <category>AnnualGoal</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Effective Java</title>
    <link href="/2022/01/24/Effective%20Java/"/>
    <url>/2022/01/24/Effective%20Java/</url>
    
    <content type="html"><![CDATA[<h2 id="1、用静态工厂方法代替构造器"><a href="#1、用静态工厂方法代替构造器" class="headerlink" title="1、用静态工厂方法代替构造器"></a>1、用静态工厂方法代替构造器</h2><p>静态工厂方法的优势：</p><ul><li>有方法名称，比起重载多个构造函数，使用者能知道不同参数构建的对象有什么不同</li><li>不必每次调用都创建一个新对象（享元模式）</li><li>可以返回原返回类型的任何子类型的对象（面向接口编程，可返回接口类型而不必是实现类型）</li><li>返回的对象可随着每次调用而发生变化，取决于参数值（面向接口编程，隐藏实现细节，用户只知道返回的是接口类的子类具体实现类）</li><li>方法返回的对象所属的类，在编写包含该静态工厂方法的类时可以不存在</li></ul><p>缺点：</p><ul><li>类如果不含有共有的或受保护的构造器，就不能被子类化</li><li>程序员很难发现静态方法</li></ul><h2 id="2、遇到多个构造器参数时要考虑使用构建"><a href="#2、遇到多个构造器参数时要考虑使用构建" class="headerlink" title="2、遇到多个构造器参数时要考虑使用构建"></a>2、遇到多个构造器参数时要考虑使用构建</h2><p>使用建造者模式</p><h2 id="3、用私有构造器或者枚举类型强化-Singeton-属性"><a href="#3、用私有构造器或者枚举类型强化-Singeton-属性" class="headerlink" title="3、用私有构造器或者枚举类型强化 Singeton 属性"></a>3、用私有构造器或者枚举类型强化 Singeton 属性</h2><h2 id="4、通过私有构造器强化不可实例化的能力"><a href="#4、通过私有构造器强化不可实例化的能力" class="headerlink" title="4、通过私有构造器强化不可实例化的能力"></a>4、通过私有构造器强化不可实例化的能力</h2><p>对于只有静态域和静态方法的工具类，往往不需要实例化，但是默认有无参构造，通过显式指定私有的构造函数来达到这个目的</p><h2 id="5、优先考虑依赖注入来引用资源"><a href="#5、优先考虑依赖注入来引用资源" class="headerlink" title="5、优先考虑依赖注入来引用资源"></a>5、优先考虑依赖注入来引用资源</h2><p>不要用 Singleton 和静态工具类来实现依赖一个或多个底层资源的类，且该资源的行为会影响到该类的行为。应将这些资源通过工厂传给构造器，静态工厂或构建器来创建类，即依赖注入。</p><h2 id="6、避免创建不必要的对象"><a href="#6、避免创建不必要的对象" class="headerlink" title="6、避免创建不必要的对象"></a>6、避免创建不必要的对象</h2><p>优先使用静态工厂方法，而不是构造器</p><p>要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱</p><p>对象池技术只有在像数据连接池这样创建数据库连接代价非常昂贵的前提下，才非常有意义</p><h2 id="7、消除过期的对象引用"><a href="#7、消除过期的对象引用" class="headerlink" title="7、消除过期的对象引用"></a>7、消除过期的对象引用</h2><p>只要类是自己管理内存，程序员就应该警惕内存泄漏问题</p><h2 id="8、避免使用终结方法和清除方法"><a href="#8、避免使用终结方法和清除方法" class="headerlink" title="8、避免使用终结方法和清除方法"></a>8、避免使用终结方法和清除方法</h2><p>finalizer 方法</p><h2 id="9、优先使用-try-with-resources"><a href="#9、优先使用-try-with-resources" class="headerlink" title="9、优先使用 try-with-resources"></a>9、优先使用 try-with-resources</h2><p>如果编写一个类，它代表必须被关闭的资源，那么这个类应该实现 AutoCloseable 接口</p><h2 id="10、覆盖-equals-时请遵守通用规定"><a href="#10、覆盖-equals-时请遵守通用规定" class="headerlink" title="10、覆盖 equals 时请遵守通用规定"></a>10、覆盖 equals 时请遵守通用规定</h2><ol><li>类的每个实例本质上是唯一的</li><li>类没有必要提供逻辑相等的测试功能</li><li>超类已经覆盖了 equals，超类的行为对于这个类也是合适的</li><li>类是私有的，或者是包级私有的，可以确定它的 equals 方法永远不会被调用。</li></ol><p>实现 equals 方法的步骤：</p><ol><li>使用 &#x3D;&#x3D; 操作符检查，参数是否为这个对象的引用</li><li>使用 instanceof 操作符检查 参数是否为正确的类型</li><li>把参数转换成正确的类型</li><li>对于这个类中的每个关键域，检查参数中的域是否和对象中的对应域匹配</li></ol><h2 id="11、覆盖-equals-时总要覆盖-hashCode"><a href="#11、覆盖-equals-时总要覆盖-hashCode" class="headerlink" title="11、覆盖 equals 时总要覆盖 hashCode"></a>11、覆盖 equals 时总要覆盖 hashCode</h2><p>因为不覆盖无法与基于散列的集合一起操作</p><h2 id="12、始终要覆盖-toString"><a href="#12、始终要覆盖-toString" class="headerlink" title="12、始终要覆盖 toString"></a>12、始终要覆盖 toString</h2><p>使类更易于调试</p><p>实际应用中，toString 方法返回对象中包含的所有值得关注的信息</p><h2 id="13、谨慎地覆盖-clone"><a href="#13、谨慎地覆盖-clone" class="headerlink" title="13、谨慎地覆盖 clone"></a>13、谨慎地覆盖 clone</h2><p>实现 Cloneable 接口的类是为了提供一个功能适当的公有的 clone 方法</p><h2 id="14、考虑实现-Comparable-接口"><a href="#14、考虑实现-Comparable-接口" class="headerlink" title="14、考虑实现 Comparable 接口"></a>14、考虑实现 Comparable 接口</h2><p>实现之后可以跟很多泛型算法以及接口的集合实现协作</p><h2 id="15、使类和成员的可访问性最小化"><a href="#15、使类和成员的可访问性最小化" class="headerlink" title="15、使类和成员的可访问性最小化"></a>15、使类和成员的可访问性最小化</h2><p>设计良好的组件会隐藏所有的实现细节，把 Api 与实现清晰地隔离起来。</p><h2 id="16、要在公有类而非公有域中使用访问方法"><a href="#16、要在公有类而非公有域中使用访问方法" class="headerlink" title="16、要在公有类而非公有域中使用访问方法"></a>16、要在公有类而非公有域中使用访问方法</h2><p>公有类永远都不应该暴露可变的域</p><h2 id="17、使可变性最小化"><a href="#17、使可变性最小化" class="headerlink" title="17、使可变性最小化"></a>17、使可变性最小化</h2><ol><li>不要提供任何会修改对象状态的方法</li><li>保证类不会被扩展</li><li>声明所有的域都是 final、 声明所有的域都是私有的</li><li>确保对于任何可变组件的互斥访问</li></ol><h2 id="18、复合优先于继承"><a href="#18、复合优先于继承" class="headerlink" title="18、复合优先于继承"></a>18、复合优先于继承</h2><p>只有当子类真正是超类的子类型时，才适合用继承。</p><h2 id="19、要么设计继承并提供文档说明，要么禁用继承"><a href="#19、要么设计继承并提供文档说明，要么禁用继承" class="headerlink" title="19、要么设计继承并提供文档说明，要么禁用继承"></a>19、要么设计继承并提供文档说明，要么禁用继承</h2><p>构造器不能调用可被覆盖的方法</p><h2 id="20、接口优于抽象类"><a href="#20、接口优于抽象类" class="headerlink" title="20、接口优于抽象类"></a>20、接口优于抽象类</h2><p>在装饰器模式种，接口使得安全地增强类的功能成为可能</p><h2 id="21、为后代设计接口"><a href="#21、为后代设计接口" class="headerlink" title="21、为后代设计接口"></a>21、为后代设计接口</h2><p>接口的缺省方法</p><h2 id="22、接口只用于定义类型"><a href="#22、接口只用于定义类型" class="headerlink" title="22、接口只用于定义类型"></a>22、接口只用于定义类型</h2><p>常量接口模式是对接口的不良使用</p><p>接口应该只被用来定义类型，它们不应该被用来导出常量</p><h2 id="23、类层次优于标签类"><a href="#23、类层次优于标签类" class="headerlink" title="23、类层次优于标签类"></a>23、类层次优于标签类</h2><p>标签类即定义枚举变量，实现多个状态</p><h2 id="24、静态成员类优于非静态成员类"><a href="#24、静态成员类优于非静态成员类" class="headerlink" title="24、静态成员类优于非静态成员类"></a>24、静态成员类优于非静态成员类</h2><p>嵌套类存在的目的只为它的外围类提供服务</p><p>如果成员类不要求访问外围实例，就要始终把修饰符 static 放在它的声明中</p><h2 id="25、限制源文件为单个顶级类"><a href="#25、限制源文件为单个顶级类" class="headerlink" title="25、限制源文件为单个顶级类"></a>25、限制源文件为单个顶级类</h2><p>永远不要把多个顶级类或者接口放在一个源文件中</p><h2 id="26、请不要使用原生态类型"><a href="#26、请不要使用原生态类型" class="headerlink" title="26、请不要使用原生态类型"></a>26、请不要使用原生态类型</h2><p>List&lt;E&gt; 的原生态类型为 List</p><p>使用原生态类型，就失去了泛型在安全性和描述性方面的所有优势</p><h2 id="27、消除非受检的警告"><a href="#27、消除非受检的警告" class="headerlink" title="27、消除非受检的警告"></a>27、消除非受检的警告</h2><p>始终尽可能小的范围内使用 SuppressWarnings 注解</p><h2 id="28、列表优于数组"><a href="#28、列表优于数组" class="headerlink" title="28、列表优于数组"></a>28、列表优于数组</h2><p>要消除未受检的转换警告，必须选择用列表代替数组</p><h2 id="29、优先考虑泛型"><a href="#29、优先考虑泛型" class="headerlink" title="29、优先考虑泛型"></a>29、优先考虑泛型</h2><p>使用泛型比使用需要客户端代码中进行转换的类型来得更加安全和容易</p><p>不是使用泛型声明具体化数组如 new E[3]，而应该使用 (E[])new Object[3]</p><h2 id="30、优先考虑泛型方法"><a href="#30、优先考虑泛型方法" class="headerlink" title="30、优先考虑泛型方法"></a>30、优先考虑泛型方法</h2><p>客户端转换输入参数并返回值的方法更加安全</p><h2 id="31、利用有限制通配符来提升-API-的灵活性"><a href="#31、利用有限制通配符来提升-API-的灵活性" class="headerlink" title="31、利用有限制通配符来提升 API 的灵活性"></a>31、利用有限制通配符来提升 API 的灵活性</h2><p>Iterable&lt;? extend E&gt;：E 的某个子类型的 Iterable 接口</p><p>Collection&lt;? super E&gt;：E 的某个超类的集合</p><p>不要用通配符类型作为返回类型</p><h2 id="32、谨慎并用泛型和可变参数"><a href="#32、谨慎并用泛型和可变参数" class="headerlink" title="32、谨慎并用泛型和可变参数"></a>32、谨慎并用泛型和可变参数</h2><p>List&lt;String&gt;… stringLists，将值保存在泛型可变参数是不安全的</p><p>允许一个方法访问一个泛型可变参数数组是不安全的</p><h2 id="33、优先考虑类型安全的异构容器"><a href="#33、优先考虑类型安全的异构容器" class="headerlink" title="33、优先考虑类型安全的异构容器"></a>33、优先考虑类型安全的异构容器</h2><p>使用异构容器能限制每个容器只能有固定数目的类型参数</p><h2 id="34、用-enum-代替-int-常量"><a href="#34、用-enum-代替-int-常量" class="headerlink" title="34、用 enum 代替 int 常量"></a>34、用 enum 代替 int 常量</h2><p>每当需要一组固定常量，并且在编译时就知道其成员的时候，就应该使用枚举。枚举类型中的常量并不一定要始终保持不变。</p><h2 id="35、用实例域代替序数"><a href="#35、用实例域代替序数" class="headerlink" title="35、用实例域代替序数"></a>35、用实例域代替序数</h2><p>永远不要根据枚举的序数导出与它关联的值，而是要将它保存在一个实例域中。</p><h2 id="36、用-EnumSet-代替位域"><a href="#36、用-EnumSet-代替位域" class="headerlink" title="36、用 EnumSet 代替位域"></a>36、用 EnumSet 代替位域</h2><p>正是因为枚举类型要用在集合中，所以没有理由用位域来表示它</p><h2 id="37、用-EnumMap-代替序数索引"><a href="#37、用-EnumMap-代替序数索引" class="headerlink" title="37、用 EnumMap 代替序数索引"></a>37、用 EnumMap 代替序数索引</h2><p>最好不要用序数来索引数组，而要使用 EnumMap</p><h2 id="38、用接口模拟可扩展的枚举"><a href="#38、用接口模拟可扩展的枚举" class="headerlink" title="38、用接口模拟可扩展的枚举"></a>38、用接口模拟可扩展的枚举</h2><p>虽然无法编写可扩展的枚举类型，却可以通过编写接口以及实现该接口的基础枚举类型来对它进行模拟</p><h2 id="39、注解优先于命名模式"><a href="#39、注解优先于命名模式" class="headerlink" title="39、注解优先于命名模式"></a>39、注解优先于命名模式</h2><p>有了注解就完全没有理由再使用命名模式，所有程序员都应该使用 Java 平台所提供的预定义的注解类型</p><h2 id="40、坚持使用-Override-注解"><a href="#40、坚持使用-Override-注解" class="headerlink" title="40、坚持使用 Override 注解"></a>40、坚持使用 Override 注解</h2><p>在想要覆盖超类声明的每个方法声明中使用 Override 注解，编译器能替你防止大量的错误</p><h2 id="41、用标记接口定义类型"><a href="#41、用标记接口定义类型" class="headerlink" title="41、用标记接口定义类型"></a>41、用标记接口定义类型</h2><p>标记接口定义的类型是由被标记类的实例实现的，标记注解则没有定义这样的类型。标记接口能更加精确地进行锁定</p><h2 id="42、Lambda-优先于匿名类"><a href="#42、Lambda-优先于匿名类" class="headerlink" title="42、Lambda 优先于匿名类"></a>42、Lambda 优先于匿名类</h2><p>删除所有 Lambda 参数的类型，除非它们的存在能够使程序变得更加清晰</p><h2 id="43、方法引用优先于-Lambda"><a href="#43、方法引用优先于-Lambda" class="headerlink" title="43、方法引用优先于 Lambda"></a>43、方法引用优先于 Lambda</h2><p>只要方法引用更加简洁、清晰，就用方法引用，如果方法引用并不简洁就坚持使用 Lambda</p><h2 id="44、坚持使用标准的函数接口"><a href="#44、坚持使用标准的函数接口" class="headerlink" title="44、坚持使用标准的函数接口"></a>44、坚持使用标准的函数接口</h2><p>只要标准的函数接口能满足需求，通常应该优先考虑，而不是专门再构建一个新的函数接口，必须使用 @FunctionalInterface 注解对自己编写的函数接口进行标注</p><h2 id="45、谨慎使用-Stream"><a href="#45、谨慎使用-Stream" class="headerlink" title="45、谨慎使用 Stream"></a>45、谨慎使用 Stream</h2><p>滥用 Stream 会使程序代码更难以读懂和维护。最好避免利用 Stream 来处理 char 值。</p><h2 id="46、优先选择-Stream-中无副作用的函数"><a href="#46、优先选择-Stream-中无副作用的函数" class="headerlink" title="46、优先选择 Stream 中无副作用的函数"></a>46、优先选择 Stream 中无副作用的函数</h2><p>forEach 操作应该只用于报告 Stream 计算的结果，而不是执行计算</p><h2 id="47、Stream-要优先用-Collection-作为返回类型"><a href="#47、Stream-要优先用-Collection-作为返回类型" class="headerlink" title="47、Stream 要优先用 Collection 作为返回类型"></a>47、Stream 要优先用 Collection 作为返回类型</h2><p>对于公共的、返回序列的方法，Collection 或者适当的子类型通常是最佳的返回类型。</p><h2 id="48、谨慎使用-Stream-并行"><a href="#48、谨慎使用-Stream-并行" class="headerlink" title="48、谨慎使用 Stream 并行"></a>48、谨慎使用 Stream 并行</h2><p>并行 Stream 不仅可能降低性能，还可能导致结果出错，以及难以预计的行为。</p><h2 id="49、检查参数的有效性"><a href="#49、检查参数的有效性" class="headerlink" title="49、检查参数的有效性"></a>49、检查参数的有效性</h2><p>每当编写方法或者构造器的时候，应该考虑它的参数有哪些限制。应该把这些限制写到文档中，并且这个方法体的开头处，通过显式的检查来实施这些限制。</p><h2 id="50、必要时进行保护性拷贝"><a href="#50、必要时进行保护性拷贝" class="headerlink" title="50、必要时进行保护性拷贝"></a>50、必要时进行保护性拷贝</h2><p>Date 已经过时了，不应该在新代码中使用</p><h2 id="51、谨慎设计方法签名"><a href="#51、谨慎设计方法签名" class="headerlink" title="51、谨慎设计方法签名"></a>51、谨慎设计方法签名</h2><ul><li>谨慎地选择方法的名称。易于理解，大众认可</li><li>不要过于追求提供便利的方法</li><li>避免过长的参数列表</li><li>对参数类型，要优先接口而不是类</li><li>对 boolean 参数，要优先使用两个元素的枚举类型</li></ul><h2 id="52、慎用重载"><a href="#52、慎用重载" class="headerlink" title="52、慎用重载"></a>52、慎用重载</h2><p>调用哪个重载方法是在编译时做出决定的，永远不要导出两个具有相同参数数目的重载方法。始终可以在给方法起不同的名称，而不使用重载机制</p><h2 id="53、慎用可变参数"><a href="#53、慎用可变参数" class="headerlink" title="53、慎用可变参数"></a>53、慎用可变参数</h2><p>不要使用可变参数</p><h2 id="54、返回零长度的数组或者集合，而不是null"><a href="#54、返回零长度的数组或者集合，而不是null" class="headerlink" title="54、返回零长度的数组或者集合，而不是null"></a>54、返回零长度的数组或者集合，而不是null</h2><p>永远不要返回 null，而不返回一个零长度的数组或者集合，不需要追求这点性能。</p><h2 id="55、谨慎返回-optional"><a href="#55、谨慎返回-optional" class="headerlink" title="55、谨慎返回 optional"></a>55、谨慎返回 optional</h2><h2 id="56、为所有导出-API-元素编写文档注释"><a href="#56、为所有导出-API-元素编写文档注释" class="headerlink" title="56、为所有导出 API 元素编写文档注释"></a>56、为所有导出 API 元素编写文档注释</h2><p>为了正确地编写 API 文档，必须在每个被导出的类、接口、构造器、方法和域声明之前增加一个文档注释。方法的文档应该简洁地描述它和客户端之间的约定</p><h2 id="57、将局部变量的作用域最小化"><a href="#57、将局部变量的作用域最小化" class="headerlink" title="57、将局部变量的作用域最小化"></a>57、将局部变量的作用域最小化</h2><p>要是局部变量的作用域最小化，最有力的方法就是在第一次要使用它的地方进行声明。几乎每一个局部变量的声明都应该包含一个初始化表达式。for 循环优先于 while 循环。</p><h2 id="58、for-each-优先于-for"><a href="#58、for-each-优先于-for" class="headerlink" title="58、for each 优先于 for"></a>58、for each 优先于 for</h2><p>以下三种情况使用 for 循环：</p><ul><li>解构过滤，遍历迭代器，删除元素，使用 removeIf 更好</li><li>转换，遍历数组或列表，取代部分或全部元素值时</li><li>平行迭代，并行遍历多个集合</li></ul><h2 id="59、了解和使用类库"><a href="#59、了解和使用类库" class="headerlink" title="59、了解和使用类库"></a>59、了解和使用类库</h2><p>通过使用标准类库，可以充分利用这些编写标准类库的专家知识，以及在你之前的其他人的使用经验。不再推荐使用 Reandom 而是用 ThreadLocalReandom。每个程序员都应该熟悉，java.lang、java.util、java.io 及其子包中的内容</p><h2 id="60、如果需要精确的答案，请避免使用-float-和-double"><a href="#60、如果需要精确的答案，请避免使用-float-和-double" class="headerlink" title="60、如果需要精确的答案，请避免使用 float 和 double"></a>60、如果需要精确的答案，请避免使用 float 和 double</h2><p>float 和 double 类型尤其不适合货币计算，应该使用 BigDecimal、int 或者 long 进行货币计算</p><h2 id="61、基本类型优先于装箱基本类型"><a href="#61、基本类型优先于装箱基本类型" class="headerlink" title="61、基本类型优先于装箱基本类型"></a>61、基本类型优先于装箱基本类型</h2><p>自动装箱减少了使用装箱基本类型的繁琐性，但是并没有减少它的风险</p><h2 id="62、如果其他类型更适合，则避免使用字符串"><a href="#62、如果其他类型更适合，则避免使用字符串" class="headerlink" title="62、如果其他类型更适合，则避免使用字符串"></a>62、如果其他类型更适合，则避免使用字符串</h2><p>字符串不适合代替其他的值类型</p><h2 id="63、了解字符串连接的性能"><a href="#63、了解字符串连接的性能" class="headerlink" title="63、了解字符串连接的性能"></a>63、了解字符串连接的性能</h2><p>为了更高的性能，请用 StringBuilder 代替 String。</p><h2 id="64、通过接口引用对象"><a href="#64、通过接口引用对象" class="headerlink" title="64、通过接口引用对象"></a>64、通过接口引用对象</h2><p>如果合适的接口类型存在，那么对于参数、返回值、变量和域来说，就都应该使用接口类型进行声明。使用 List、Set、Map 而不是 ArrayList、HashSet、HashMap。</p><h2 id="65、接口优先于反射机制"><a href="#65、接口优先于反射机制" class="headerlink" title="65、接口优先于反射机制"></a>65、接口优先于反射机制</h2><h2 id="66、谨慎地使用本地方法"><a href="#66、谨慎地使用本地方法" class="headerlink" title="66、谨慎地使用本地方法"></a>66、谨慎地使用本地方法</h2><p>使用本地方法提高性能不值得提倡</p><h2 id="67、谨慎地进行优化"><a href="#67、谨慎地进行优化" class="headerlink" title="67、谨慎地进行优化"></a>67、谨慎地进行优化</h2><p>要努力编写好的程序而不是快的程序。</p><h2 id="68、遵守普遍接受的命名惯例"><a href="#68、遵守普遍接受的命名惯例" class="headerlink" title="68、遵守普遍接受的命名惯例"></a>68、遵守普遍接受的命名惯例</h2><p>不可实例化的工具类经常使用复数名词。使用大家公认的做法。</p><h2 id="69、只针对异常的情况才使用异常"><a href="#69、只针对异常的情况才使用异常" class="headerlink" title="69、只针对异常的情况才使用异常"></a>69、只针对异常的情况才使用异常</h2><p>异常应该只用于异常的情况下，它们永远不应该用于正常的控制流。设计良好的 API 不应该强迫它的客户端为了正常的控制流而是用异常。</p><h2 id="70、对可恢复的情况使用受检异常，对编程错误使用运行时异常"><a href="#70、对可恢复的情况使用受检异常，对编程错误使用运行时异常" class="headerlink" title="70、对可恢复的情况使用受检异常，对编程错误使用运行时异常"></a>70、对可恢复的情况使用受检异常，对编程错误使用运行时异常</h2><p>如果期望调用者能够适当地恢复，对于这种情况就应该使用受检异常。用运行时异常来表示编程错误。大多数的运行时异常都表示前提违例。前提违例是 API 的客户端没有遵守 API 规范建立的约定。所有未受检的抛出结构都应该是 RuntimeException 的子类。</p><h2 id="71、避免不必要地使用受检异常"><a href="#71、避免不必要地使用受检异常" class="headerlink" title="71、避免不必要地使用受检异常"></a>71、避免不必要地使用受检异常</h2><h2 id="72、优先使用标准的异常"><a href="#72、优先使用标准的异常" class="headerlink" title="72、优先使用标准的异常"></a>72、优先使用标准的异常</h2><p>不要直接重用 Exception、RuntimeException、Throwable 或者Error</p><h2 id="73、抛出与抽象对应的异常"><a href="#73、抛出与抽象对应的异常" class="headerlink" title="73、抛出与抽象对应的异常"></a>73、抛出与抽象对应的异常</h2><p>更高层的实现应该捕获底层的异常，同时抛出可以按照高层抽象进行解释的异常。</p><h2 id="74、每个方法抛出的所有异常都要建立文档"><a href="#74、每个方法抛出的所有异常都要建立文档" class="headerlink" title="74、每个方法抛出的所有异常都要建立文档"></a>74、每个方法抛出的所有异常都要建立文档</h2><p>始终要单独地声明受检异常，利用 @throws 准确地记录下抛出的每个异常的条件</p><h2 id="75、在细节信息中包含失败-捕获信息"><a href="#75、在细节信息中包含失败-捕获信息" class="headerlink" title="75、在细节信息中包含失败-捕获信息"></a>75、在细节信息中包含失败-捕获信息</h2><p>为了捕获失败，异常的细节信息应该包含对该异常有贡献的所有参数和域的值。</p><h2 id="76、努力使失败保持原子性"><a href="#76、努力使失败保持原子性" class="headerlink" title="76、努力使失败保持原子性"></a>76、努力使失败保持原子性</h2><p>一般而言，失败的方法调用应该使对象保持在被调用之前的状态。</p><h2 id="77、不要忽略异常"><a href="#77、不要忽略异常" class="headerlink" title="77、不要忽略异常"></a>77、不要忽略异常</h2><p>空的 catch 块会使异常达不到应有的目的。如果选择忽略异常，catch 块应该包含一条注释，说明为什么可以这么做，并且变量应该被命名为 ignored</p><h2 id="78、同步访问共享的可变数据"><a href="#78、同步访问共享的可变数据" class="headerlink" title="78、同步访问共享的可变数据"></a>78、同步访问共享的可变数据</h2><p>为了线程间进行可靠的通信，也为了互斥访问，同步是必要的。千万不要使用 Thread.stop 方法，一个线程组织另一个线程建议的做法是轮询 boolean 值。</p><p>除非读和写操作都被同步，否则无法保证同步能起作用。将可变数据限制再单个线程中。</p><h2 id="79、避免过度同步"><a href="#79、避免过度同步" class="headerlink" title="79、避免过度同步"></a>79、避免过度同步</h2><p>为了避免活性失败和安全性失败，在一个被同步的方法或者代码块中，永远不要放弃对客户端的控制。应该在同步区域内做尽可能少的工作。</p><h2 id="80、executor、task-和-stream-优先于线程"><a href="#80、executor、task-和-stream-优先于线程" class="headerlink" title="80、executor、task 和 stream 优先于线程"></a>80、executor、task 和 stream 优先于线程</h2><h2 id="81、并发工具优先于-wait-和-notify"><a href="#81、并发工具优先于-wait-和-notify" class="headerlink" title="81、并发工具优先于 wait 和 notify"></a>81、并发工具优先于 wait 和 notify</h2><p>应该优先使用 ConcurrentHashMap 而不是 Collections.synchronizedMap</p><p>对于间歇式的定时，始优先使用 System.nanoTime 而不是 System.currentTimeMillis</p><h2 id="82、线程安全性的文档化"><a href="#82、线程安全性的文档化" class="headerlink" title="82、线程安全性的文档化"></a>82、线程安全性的文档化</h2><p>一个类为了可被多个线程安全地使用，必须在文档中清楚地说明它所支持的线程安全性级别</p><ul><li>不可变的</li><li>无条件的线程安全</li><li>有条件的线程安全</li><li>非线程安全</li><li>线程对立</li></ul><p>lock 域应该始终声明为 final</p><h2 id="83、慎用延迟初始化"><a href="#83、慎用延迟初始化" class="headerlink" title="83、慎用延迟初始化"></a>83、慎用延迟初始化</h2><p>延迟初始化是指延迟到需要域的值才将它初始化的行为。</p><p>如果利用延迟优化来破坏初始化的循环，就需要使用同步访问方法</p><p>如果出于性能的考虑对静态域使用延迟初始化就是用静态内部类方法</p><p>如果处于性能的考虑而需要对实例域使用延迟初始化，就用双重检查方法</p><h2 id="84、不要依赖于线程调度器"><a href="#84、不要依赖于线程调度器" class="headerlink" title="84、不要依赖于线程调度器"></a>84、不要依赖于线程调度器</h2><p>任何依赖于线程调度器来达到正确性或者性能要求的程序，很有可能都是不可移植的</p><p>如果线程没有做有意义的工作，就不应该运行</p><h2 id="85、其他方法优先于-Java-序列化"><a href="#85、其他方法优先于-Java-序列化" class="headerlink" title="85、其他方法优先于 Java 序列化"></a>85、其他方法优先于 Java 序列化</h2><p>避免序列化攻击的最佳方式是永远不要反序列化任何东西。在新编写的任何系统中没有理由再使用 Java 序列化。</p><h2 id="86、谨慎地实现-Serializable-接口"><a href="#86、谨慎地实现-Serializable-接口" class="headerlink" title="86、谨慎地实现 Serializable 接口"></a>86、谨慎地实现 Serializable 接口</h2><p>实现 Serializable 接口而付出的最大代价是，一旦一个类发布，就大大降低了改变这个类的实现的灵活性。</p><h2 id="87、考虑使用自定义的序列化形式"><a href="#87、考虑使用自定义的序列化形式" class="headerlink" title="87、考虑使用自定义的序列化形式"></a>87、考虑使用自定义的序列化形式</h2><p>如果事先认真考虑默认的序列化形式是否合适，则不要贸然接受。</p><p>即使你确定了默认序列化形式是否合适的，通常还必须提供一个 readObject 方法以约束关系和安全性</p><h2 id="88、保护性地编写-readObejct-方法"><a href="#88、保护性地编写-readObejct-方法" class="headerlink" title="88、保护性地编写 readObejct 方法"></a>88、保护性地编写 readObejct 方法</h2><h2 id="89、对于实例控制，枚举类型优先于-readResolve"><a href="#89、对于实例控制，枚举类型优先于-readResolve" class="headerlink" title="89、对于实例控制，枚举类型优先于 readResolve"></a>89、对于实例控制，枚举类型优先于 readResolve</h2><h2 id="90、考虑序列化代理代替序列化实例"><a href="#90、考虑序列化代理代替序列化实例" class="headerlink" title="90、考虑序列化代理代替序列化实例"></a>90、考虑序列化代理代替序列化实例</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>Reading</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue Learning</title>
    <link href="/2021/11/30/VueLearning/"/>
    <url>/2021/11/30/VueLearning/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Vue3 官网：<a href="https://v3.cn.vuejs.org/">https://v3.cn.vuejs.org/</a></p></blockquote><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>CDN 引入：<code>&lt;script src=&quot;https://unpkg.com/vue@next&quot;&gt;&lt;/script&gt;</code></p><p>静态引入：<code>&lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;</code></p><h2 id="Counter-计数器"><a href="#Counter-计数器" class="headerlink" title="Counter 计数器"></a>Counter 计数器</h2><p>js 原生实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;counter&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;increment&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;decrement&quot;</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> counterEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.counter&quot;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> incrementEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.increment&quot;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> decrementEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.decrement&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> counter = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">    counterEl.<span class="hljs-property">innerHTML</span> = counter;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    incrementEl.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      counter++;</span><br><span class="language-javascript">      counterEl.<span class="hljs-property">innerHTML</span> = counter;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    decrementEl.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      counter--;</span><br><span class="language-javascript">      counterEl.<span class="hljs-property">innerHTML</span> = counter;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>vue 实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">    Vue.createApp(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">      template: `</span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">message</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">counter</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;increment&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;decrement&quot;</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        `,</span></span><br><span class="language-xml"><span class="language-handlebars">      // vue3 中 data 必须是一个函数</span></span><br><span class="language-xml"><span class="language-handlebars">      data: function () &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        return &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">          counter: 0,</span></span><br><span class="language-xml"><span class="language-handlebars">          message: &quot;Hello World&quot;,</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;;</span></span><br><span class="language-xml"><span class="language-handlebars">      &#125;,</span></span><br><span class="language-xml"><span class="language-handlebars">      methods: &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        increment() &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">          this.counter++;</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span><br><span class="language-xml"><span class="language-handlebars">        decrement() &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">          this.counter--;</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span><br><span class="language-xml"><span class="language-handlebars">      &#125;,</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;).mount(&quot;#app&quot;);</span></span><br><span class="language-xml"><span class="language-handlebars">  </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h2><p>methods 中函数不能使用箭头函数，如果箭头函数，箭头函数里面的 this 就指向了 window。</p><p>vscode 生成代码片段：<code>文件</code>-&gt;<code>首选项</code>-&gt;<code>用户片段</code>-&gt;<code>输入 html</code>，打开 <a href="https://snippet-generator.app/">Vscode代码片段生成</a> 复制进去即可。</p><h3 id="Mustche-语法"><a href="#Mustche-语法" class="headerlink" title="Mustche 语法"></a>Mustche 语法</h3><p>即双括号语法，其中可以写属性名、表达式、函数调用、三元运算符。不能写语句（赋值，循环等）。</p><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>v-bind 用于绑定属性，简写为 :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src</span>=<span class="hljs-string">&quot;imgUrl&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;aUrl&quot;</span>&gt;</span>百度一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#my-app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">imgUrl</span>: <span class="hljs-string">&quot;https://github.githubassets.com/images/modules/profile/badge--acv-64.png&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">aUrl</span>: <span class="hljs-string">&quot;https://www.baidu.com&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>动态绑定 class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.active</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;active: isActive&#125;&quot;</span>&gt;</span>嘻嘻嘻<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;classGroup&quot;</span>&gt;</span>哈哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggle&quot;</span>&gt;</span>转换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#my-app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">classGroup</span>: [<span class="hljs-string">&#x27;active&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;abc&#x27;</span>]</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">toggle</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">isActive</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">isActive</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>动态绑定 style</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;myStyle&quot;</span>&gt;</span>嘻嘻嘻<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;&#x27;font-size&#x27;: &#x27;100px&#x27;, color: &#x27;red&#x27;&#125;&quot;</span>&gt;</span>嘻嘻嘻<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#my-app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">myStyle</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&quot;24px&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">fontWeight</span>: <span class="hljs-number">700</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>动态绑定属性，此处的 name 也根据 data 声明来决定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:</span>[<span class="hljs-attr">name</span>]=<span class="hljs-string">&quot;value&quot;</span>&gt;</span>哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>data()&#123;<br>name: &#x27;abc&#x27;,<br>value: &#x27;cdf&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>v-bind 直接绑定对象，如下会生成 &lt;div name&#x3D;”ReaJason” age&#x3D;”18”&gt;哈哈&lt;&#x2F;div&gt;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#my-app&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">info</span>: &#123;</span><br><span class="language-javascript">                  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;ReaJason&quot;</span>,</span><br><span class="language-javascript">                  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span></span><br><span class="language-javascript">              &#125;</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>v-on 绑定事件，简写为 @</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;btnClick&quot;</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#my-app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">btnClick</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">counter</span>++;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>v-on 传递参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-app&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 默认传递 event 对象 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;btnClick&quot;</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 当指定传参时，使用 event 对象需要显式指定 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;btnClick1($event, &#x27;18&#x27;)&quot;</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#my-app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">btnClick</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">btnClick1</span>(<span class="hljs-params">event, age</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;==========&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>v-on 使用修饰符</p><p>.stop：阻止事件冒泡</p><p>@keyup.enter：绑定回车键，可自定义和其他键位</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;btnClick&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;btnClick1&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;printV&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#my-app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">btnClick</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;btnClick&quot;</span>);</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">btnClick1</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;btnClick1&quot;</span>);</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">printV</span>(<span class="hljs-params">event</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>v-if 是惰性的，条件为 false，不会渲染，条件为 true 才能看见</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;score &gt; 90&quot;</span>&gt;</span>优秀<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;score &gt; 60&quot;</span>&gt;</span>良好<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else</span>&gt;</span>不及格<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#my-app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">score</span>: <span class="hljs-number">61</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>v-show 为 false 时，相当于给元素添加了 display&#x3D;none 属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none;&quot;</span>&gt;</span>嘻嘻嘻<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isShow&quot;</span>&gt;</span>哈哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span>&gt;</span>嘻嘻嘻<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#my-app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">isShow</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>列表渲染，支持数组、对象、数字，可以是用 in 也可以用 of。</p><p>当数组使用更新数组的方法会改变原来的值会更新视图，而生成新数组的方法不会更新回原数组，如 filter、concat、slice。</p><p>v-for 中的 key 是为了高效进行数组渲染时候对数组中多余或需要添加的元素的修改。</p><ul><li>没有 key，vue 会尽可能复用原先的 VNode 节点填充，最后进行添加和删除节点</li><li>有 key 时，会先从前进行比对，再从后往前比对，中间使用 map 进行比对，再决定需要删除和添加的元素</li></ul><p>对于 Vue 来说，html 会转换为 VNode Tree，再渲染到页面上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>遍历数组:一个参数<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;movie in movies&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;movie&quot;</span>&gt;</span>&#123;&#123;movie&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>遍历数组:两个参数<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(movie,index) in movies&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;movie&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;---&#123;&#123;movie&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>遍历对象:一个参数<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;value in info&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>遍历对象:两个参数<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value,key) in info&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125;---&#123;&#123;value&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>遍历对象:三个参数<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value,key,index) in info&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;---&#123;&#123;key&#125;&#125;---&#123;&#123;value&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>遍历数字:一个参数<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;value in 4&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>遍历数字:两个参数<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value,index) in 4&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;---&#123;&#123;value&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#my-app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">movies</span>: [<span class="hljs-string">&quot;朝花夕誓&quot;</span>,<span class="hljs-string">&quot;烟火&quot;</span>,<span class="hljs-string">&quot;你的名字&quot;</span>],</span><br><span class="language-javascript">                <span class="hljs-attr">info</span>: &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>&#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><p>计算属性，计算属性是有缓存的，状态改变时只会计算一次，而 methods 每次都会当函数进行调用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#my-app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">lastName</span>: <span class="hljs-string">&quot;Jason&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">getFullName</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;方法调用了&quot;</span>)</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">fullName</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;计算属性调用了&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>计算属性的 get 和 set，如果单函数就是 get 方法，如果需要加 set 方法使用对象即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeFullName&quot;</span>&gt;</span>change<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#my-app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">lastName</span>: <span class="hljs-string">&quot;Jason&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">changeFullName</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">fullName</span> = <span class="hljs-string">&quot;Code Why&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">fullName</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> str = value.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>)</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = str[<span class="hljs-number">0</span>]</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = str[<span class="hljs-number">1</span>]</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>侦听器，侦听数据的变化自动调用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#my-app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;hahah&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">                mmessage：侦听的属性名</span></span><br><span class="hljs-comment"><span class="language-javascript">            */</span></span><br><span class="language-javascript">            <span class="hljs-title function_">message</span>(<span class="hljs-params">newValue, oldValue</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;新值：&quot;</span>, newValue, <span class="hljs-string">&quot;旧值：&quot;</span>, oldValue);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>默认只能侦听属性本身，无法侦听到内部数据的改变</p><p>deep：true，开启深度侦听，可侦听内部属性的变化，无论多深</p><p>immediate：true，立即执行，无论数据是否改变都会执行一次</p><p>由于对象是引用类型，因此 oldValue 和 newValue 会执行同一个对象导致打印同一个值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>name:&#123;&#123;info.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>age:&#123;&#123;info.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>friend.name:&#123;&#123;info.friend[0].name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeInfo&quot;</span>&gt;</span>改变info<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span>改变info的name<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeFriendName&quot;</span>&gt;</span>改变info的friend中的name<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#my-app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">info</span>: &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>, <span class="hljs-attr">friend</span>: [&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;lucy&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;] &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">changeInfo</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Mory&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">friend</span>: [&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;] &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">changeName</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;Jery&quot;</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">changeFriendName</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span>.<span class="hljs-property">friend</span>[<span class="hljs-number">0</span>].<span class="hljs-property">name</span> = <span class="hljs-string">&quot;lily&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">info</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">handler</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">newValue, oldValue</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;新值：&quot;</span>, newValue);</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;旧值：&quot;</span>, oldValue);</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="购物车案例"><a href="#购物车案例" class="headerlink" title="购物车案例"></a>购物车案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>购物车案例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#app</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">        <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">        <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="language-css">        <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span> auto;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">table</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#e9e9e9</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-collapse</span>: collapse;</span><br><span class="language-css">        <span class="hljs-attribute">border-spacing</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">th</span>,</span><br><span class="language-css">    <span class="hljs-selector-tag">td</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">8px</span> <span class="hljs-number">16px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#e9e9e9</span>;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">th</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f7f7f7</span>;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#5c6b77</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;books.length &gt; 0&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;priceBox&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;toP&quot;</span>&gt;</span>总价格：&#123;&#123;totalPrice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>书名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>数量<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(book, index) of books&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;book.id&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;book.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;book.time&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;book.price&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;decreCount(index)&quot;</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin: 0 5px;&quot;</span>&gt;</span>&#123;&#123;book.count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;increCount(index)&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deleteBook(index)&quot;</span>&gt;</span>移除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-else</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>购物车为空<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/3.1.5/vue.global.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#my-app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;购物车案例&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">books</span>: [</span><br><span class="language-javascript">                    &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;算法导论&quot;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">time</span>: <span class="hljs-string">&quot;2020-01&quot;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">count</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">price</span>: <span class="hljs-number">80</span></span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                    &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;设计模式&quot;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">time</span>: <span class="hljs-string">&quot;2021-01&quot;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">count</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">price</span>: <span class="hljs-number">60</span></span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                    &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;CS61B&quot;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">time</span>: <span class="hljs-string">&quot;2020-04&quot;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">count</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">price</span>: <span class="hljs-number">100</span></span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                    &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;JavaScript百炼成仙&quot;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">time</span>: <span class="hljs-string">&quot;2020-02&quot;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">count</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">price</span>: <span class="hljs-number">34</span></span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                ]</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">totalPrice</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> finalPrice = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> book <span class="hljs-keyword">of</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">books</span>)&#123;</span><br><span class="language-javascript">                    finalPrice += book.<span class="hljs-property">price</span> * book.<span class="hljs-property">count</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> finalPrice</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">decreCount</span>(<span class="hljs-params">index</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">books</span>[index].<span class="hljs-property">count</span>--</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">increCount</span>(<span class="hljs-params">index</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">books</span>[index].<span class="hljs-property">count</span>++</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">deleteBook</span>(<span class="hljs-params">index</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">books</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>v-model 可以在表单 input、textarea 以及 select 等元素上创建双向数据绑定，实质就是语法糖，将 data 中的数据绑定到表单元素中，同时监听表单元素的更新，同步更新到 data 中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>            普通输入框：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-symbol">&amp;emsp;</span>&#123;&#123;text&#125;&#125; <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            单选复选框：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;singleCheckBox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;agree&quot;</span>&gt;</span>同意协议<br>            &#123;&#123;singleCheckBox&#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            多选复选框：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;multiChcekBox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;篮球&quot;</span>&gt;</span>篮球<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;multiChcekBox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;足球&quot;</span>&gt;</span>足球<br>            &#123;&#123;multiChcekBox&#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            单选按钮：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span>女<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span> 男<br>            &#123;&#123;gender&#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            下拉框：<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;point&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;打游戏&quot;</span>&gt;</span>打游戏<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;看电影&quot;</span>&gt;</span>看电影<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;逛街&quot;</span>&gt;</span>逛街<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;抓娃娃&quot;</span>&gt;</span>抓娃娃<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span> &#123;&#123;point&#125;&#125; <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            文本域：<span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;body&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>            &#123;&#123;body&#125;&#125; <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#my-app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;Hello World&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">singleCheckBox</span>: <span class="hljs-string">&quot;&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">multiChcekBox</span>: [],</span><br><span class="language-javascript">                <span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">point</span>: <span class="hljs-string">&quot;&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">body</span>:<span class="hljs-string">&quot;你好你好你好&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>默认监听 input 框的 change 事件，使用 .lazy 修饰符，监听 change 事件</p><p>v-model 绑定的数据总为 string，如果需要为数字类型，使用 .number 修饰符</p><p>.trim 为自动为数据去除前后空白字符</p><h3 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h3><p>全局组件，所有组件中都能使用当前组件，使用 app.component 注册的组件为全局组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gl</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">gl</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gl</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">gl</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gl</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">gl</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;global&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> gl = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#global&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Hello 全局组件&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// App 为根组件</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#my-app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)</span><br><span class="language-javascript">    <span class="hljs-comment">// 当前注册组件为全局组件</span></span><br><span class="language-javascript">    app.<span class="hljs-title function_">component</span>(<span class="hljs-string">&quot;gl&quot;</span>, gl);</span><br><span class="language-javascript">    app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>局部组件，只有注册的组件才能使用，在组件内部使用 compoennts 注册的组件为局部组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tel1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tel1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tel2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tel2</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tel2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tel1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> tel1 = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#tel1&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Hello tel1&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> tel2 = &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#tel2&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Hello tel2&quot;</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// App 为根组件</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#my-app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">components</span>:&#123;</span><br><span class="language-javascript">            tel1,</span><br><span class="language-javascript">            tel2</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)</span><br><span class="language-javascript">    app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>webpack是一个静态的模块化打包工具，为现代的 JavaScript 应用程序。</p><p>webpack 能将各种各样的前端模块化开发格式文件，转为 js，html，css，以及静态资源</p><p>安装 webpack：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install webpack webpack-cli –g <span class="hljs-comment"># 全局安装</span><br>npm install webpack webpack-cli –D <span class="hljs-comment"># 局部安装</span><br></code></pre></td></tr></table></figure><p>通常使用局部 webpack 来管理项目文件，而项目文件通过 package.json 来进行依赖管理，使用 <code>npm init</code> 即可生成当前项目的 package.json 文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;main&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;index.js&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;license&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ISC&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;webpack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^5.64.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;webpack-cli&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.9.1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>使用局部 webpack 需要使用 <code>npx webpack</code>，在 package.json 中添加脚本之后，使用 <code>nom run build</code> 即可使用局部 webpack 打包</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>配置文件名为：<code>webpack.config.json</code>，可以使用其他名字，但是使用 webpack 时需要指定配置文件</p><p>webpack 会从入口文件，生成依赖树，只有依赖的文件才会打包进去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/main.js&quot;</span>, <span class="hljs-comment">// 指定入口文件</span><br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,  <span class="hljs-comment">// 指定打包之后文件名</span><br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;./dist&quot;</span>) <span class="hljs-comment">// 指定打包文件输出路径</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h3><p>webpack 默认只会解析 js 文件，其他文件都需要 loader 支持，css-loader 支持解析 css 文件</p><p>安装 css-loader：<code>npm install css-loader -D</code></p><p>loader 配置方式，module.rules：</p><ul><li>test 属性：用于对 resource 进行匹配，通常设置为正则表达式</li><li>use 属性：<ul><li>loader：required，loader 加载器的字符串</li><li>options：optional，值会传入 loader 中</li><li>user:[“style-loader”] 是 user:[{loader:”style-loader”}]</li></ul></li><li>loader 属性：Rule.user:[loader] 的缩写</li></ul><p>css-loader 只用于解析 css 文件，而不会加载样式，style-loader 会完成插入 style 的操作</p><p>安装 style-loader：<code>npm install style-loader -D</code></p><p>处理 less 安装：<code>npm install less-loader -D</code></p><p>loader 执行顺序是从右至左（从下到上或从后往前）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/main.js&quot;</span>,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;./dist&quot;</span>)<br>    &#125;,<br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [<br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>                <span class="hljs-attr">use</span>: [<br>                    &#123; <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;style-loader&quot;</span> &#125;,<br>                    &#123; <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;css-loader&quot;</span> &#125;,<br>                ]<br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>,<br>                <span class="hljs-attr">use</span>: [<br>                    &#123; <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;style-loader&quot;</span> &#125;, <span class="hljs-comment">// 最后插入 css</span><br>                    &#123; <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;css-loader&quot;</span> &#125;, <span class="hljs-comment">// 然后解析 css</span><br>                    &#123; <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;less-loader&quot;</span> &#125; <span class="hljs-comment">// 先将 less 解析为 css</span><br>                ]<br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="PostCSS"><a href="#PostCSS" class="headerlink" title="PostCSS"></a>PostCSS</h3><p>PostCSS 是一个通过 JavaScript 来转换样式的工具，可进行 CSS 的转换和适配，比如自动添加浏览器前缀、css 样式重置等</p><p>安装 postcss、postcss-cli：<code>npm install postcss postcss-cli -D</code></p><p>安装 autoprefixer 插件：<code>npm install autoprefixer -D</code></p><p>直接使用 postcss 并使用插件：<code>npx postcss --use autoprefixer -o end.css ./src/css/style.css</code></p><p>安装 postcss-loader：<code>npm install postcss-loader -D</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-attr">use</span>: [<br>            &#123; <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;style-loader&quot;</span> &#125;,<br>            &#123; <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;css-loader&quot;</span> &#125;,<br>            &#123;<br>                <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;postcss-loader&quot;</span>,<br>                <span class="hljs-attr">options</span>: &#123;<br>                    <span class="hljs-attr">postcssOptions</span>: &#123;<br>                        <span class="hljs-attr">plugins</span>: [<br>                            <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;autoprefixer&quot;</span>)<br>                        ]<br>                    &#125;<br>                &#125;<br>            &#125;<br>        ]<br>&#125;<br></code></pre></td></tr></table></figure><p>使用单独配置：postcss.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;autoprefixer&quot;</span>)<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>postcss-preset-env 更加强大，它能将现代 CSS 特性转成大多数浏览器认识的 CSS，并内置了 autoprefixer。</p><p>安装 postcss-preset-env ：<code>npm install postcss-preset-env -D</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// postcss.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-string">&quot;postcss-preset-env&quot;</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="打包图片"><a href="#打包图片" class="headerlink" title="打包图片"></a>打包图片</h3><p>安装 file-loader：<code>npm install file-loader -D</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.(jpg|png|gif)$/</span>,<br>    <span class="hljs-attr">use</span>: &#123;<br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;file-loader&quot;</span>,<br>        <span class="hljs-attr">options</span>:&#123;<br>            <span class="hljs-attr">outputPath</span>: <span class="hljs-string">&quot;img&quot;</span>, <span class="hljs-comment">// 图片文件打包到 img 文件夹下</span><br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;[name]_[hash:6].[ext]&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>url-loader 可以将较小的文件转为 base64 的 URI，</p><p>安装 url-loader：<code>npm install url-loader -D</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.(jpg|png|gif)$/</span>,<br>    <span class="hljs-attr">use</span>: &#123;<br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;url-loader&quot;</span>,<br>        <span class="hljs-attr">options</span>:&#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;img/[name]_[hash:6].[ext]&quot;</span>,<br>            <span class="hljs-attr">limit</span>: <span class="hljs-number">100</span> * <span class="hljs-number">1024</span> <span class="hljs-comment">// byte</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="asset-module-type"><a href="#asset-module-type" class="headerlink" title="asset module type"></a>asset module type</h3><p>资源模板类型：webpack5 不需要下载 loader</p><ul><li>asset&#x2F;resource 对应 file-loader</li><li>asset&#x2F;inline 对应 url-loader</li><li>asset 由 webpack 决定使用哪种 loader</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.(jpg|png|gif)$/</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;asset&quot;</span>,<br>    <span class="hljs-attr">generator</span>: &#123;<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;img/[name]_[hash:6][ext]&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">parser</span>: &#123;<br>        <span class="hljs-attr">dataUrlCondition</span>:&#123;<br>            <span class="hljs-attr">maxSize</span>: <span class="hljs-number">100</span> * <span class="hljs-number">1024</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字体文件"><a href="#字体文件" class="headerlink" title="字体文件"></a>字体文件</h3><p>……待学习</p><h2 id="组件化开发-1"><a href="#组件化开发-1" class="headerlink" title="组件化开发"></a>组件化开发</h2><h3 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h3><ul><li><p>父传子使用 props 属性，没有注册的在 $attrs 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 父组件 在子组件的标签中直接传值</span><br>&lt;div&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">header-vue</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">header-vue</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-comment">// 子组件使用 props 接收，如果没有在 props 中接受则会进到 $atrrs 中去</span><br><span class="hljs-comment">// class,id,style 会默认传递给子组件的跟组件，使用 inheritAttrs:flase 禁用</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123; $attrs.class &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;$attrs.class&quot;</span>&gt;</span>节点<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// props: &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//     msg: &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//         type: String,</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//         require: false,</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//         default: &quot;默认值&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//     &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// &#125;,</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">inheritAttrs</span>: <span class="hljs-literal">false</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>: [<span class="hljs-string">&quot;msg&quot;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;&#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>子传父使用 $emit 事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 子组件使用 emits 定义传递事件，然后在触发事件的时候传递到父组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">emits</span>: [<span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-string">&quot;sub&quot;</span>, <span class="hljs-string">&quot;addN&quot;</span>],<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">n</span>: <span class="hljs-number">10</span>,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">incre</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&quot;add&quot;</span>);<br>    &#125;,<br>    <span class="hljs-title function_">decre</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&quot;sub&quot;</span>);<br>    &#125;,<br>    <span class="hljs-title function_">increN</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&quot;addN&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">n</span>);<br>    &#125;,<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">// 父组件监听子组件传递过来的事件进行处理</span><br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">counter-vue</span> @<span class="hljs-attr">add</span>=<span class="hljs-string">&quot;addOne&quot;</span> @<span class="hljs-attr">sub</span>=<span class="hljs-string">&quot;subOne&quot;</span> @<span class="hljs-attr">addN</span>=<span class="hljs-string">&quot;addNOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">counter-vue</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Tab栏制作"><a href="#Tab栏制作" class="headerlink" title="Tab栏制作"></a>Tab栏制作</h3><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>      &lt;tab-bar :titles=&quot;title&quot; @change=&quot;change&quot;&gt;&lt;/tab-bar&gt;<br>      &lt;h2&gt;&#123;&#123;contents[curIndex]&#125;&#125;&lt;/h2&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import TabBar from &quot;./TabBar.vue&quot;;<br>export default &#123;<br>  components: &#123;<br>    TabBar,<br>  &#125;,<br>  data() &#123;<br>    return &#123;<br>      curIndex: 0,<br>      title: [&quot;衣服&quot;,&quot;裤子&quot;,&quot;鞋子&quot;],<br>      contents: [&quot;衣服页面&quot;,&quot;裤子页面&quot;,&quot;鞋子页面&quot;]<br>    &#125;;<br>  &#125;,<br>  methods:&#123;<br>      change(index)&#123;<br>          this.curIndex = index<br>      &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>TabBar.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;tab-control&quot;&gt;<br>    &lt;div<br>      class=&quot;tab-control-item&quot;<br>      :class=&quot;&#123; active: curIndex === index &#125;&quot;<br>      v-for=&quot;(title, index) in titles&quot;<br>      :key=&quot;title&quot;<br>      @click=&quot;itemClick(index)&quot;<br>    &gt;<br>      &lt;span&gt;&#123;&#123; title &#125;&#125;&lt;/span&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    titles: &#123;<br>      type: Array,<br>      default() &#123;<br>        return [];<br>      &#125;,<br>    &#125;<br>  &#125;,<br>  data() &#123;<br>    return &#123;<br>      curIndex: 0,<br>    &#125;;<br>  &#125;,<br>  emits:[&quot;change&quot;],<br>  methods: &#123;<br>    itemClick(index) &#123;<br>      this.curIndex = index;<br>      this.$emit(&quot;change&quot;, index)<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.tab-control &#123;<br>  display: flex;<br>  justify-content: space-between;<br>&#125;<br><br>.tab-control-item.active &#123;<br>    color: red;<br>&#125;<br><br>.tab-control-item.active span &#123;<br>    border-bottom: 3px solid red;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="非父子组件通信"><a href="#非父子组件通信" class="headerlink" title="非父子组件通信"></a>非父子组件通信</h3><p>Provide和Inject：</p><ul><li>父组件通过 provide 为组件树的所有子组件提供数据</li><li>子组件通过 inject 来获取组件树上父组件使用 provide 传递的数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 父组件</span><br><span class="hljs-title function_">provide</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Hello My Son&quot;</span>,<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">10</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 子组件</span><br><span class="hljs-attr">inject</span>: [<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;count&quot;</span>]<br></code></pre></td></tr></table></figure><p>全局事件总线 mitt：</p><ul><li>可全局发出和监听事件</li><li>发出事件：<code>emitter.emit(&quot;why&quot;, &#123;name: &quot;why&quot;, age: &quot;18&quot;&#125;)</code></li><li>监听事件：<code>emitter.on(&quot;why&quot;, (info) -&gt; console.log(info))</code></li><li>取消所有监听：<code>emitter.all.clear</code></li></ul><p>插槽 slot：</p><ul><li>子组件使用 slot 标签定义插槽，父组件中使用子组件时，在子组件中使用其他标签，会被插入到子组件的插槽中</li><li>匿名插槽：即 <code>&lt;slot&gt;&lt;/slot&gt;</code>，默认名字为 default，如果有多个匿名插槽，所有插槽都会渲染一遍父组件传来的标签</li><li>具名插槽：即 <code>&lt;slot name=&quot;why&quot;&gt;&lt;/slot&gt;</code>，父组件中使用 <code>v-slot:name</code> 可指定名字插入到子组件的哪个插槽</li><li><code>v-slot:name</code> 可缩写为 <code>#name</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 子组件具名插槽 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 父组件插值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tab-bar</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">left</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>左边来点啥<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:center</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>中间来点啥<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:right</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>右边来点啥<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tab-bar</span>&gt;</span><br></code></pre></td></tr></table></figure><p>动态插槽名使用：<code>v-slot:[name]</code></p><p>作用域插槽：父组件使用插槽传来的值，<code>v-slot=&quot;slotProps&quot;</code></p><p>动态组件：使用 component 组件，通过 is 实现，<code>&lt;component :is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</code></p><p>保存组件的状态：使用 keep-alive 包裹需要缓存数据的组件即可，默认都可以缓存</p><ul><li>include：只有名称匹配的组件才会被缓存</li><li>exclude：任何名称匹配的组件都不被缓存</li><li>max：最多缓存的组件数</li><li>include 和 exclude 使用逗号分隔字符串、正则表达式和数组</li></ul><p>异步组件：定义路由时一般使用的就是异步组件，异步组件是为了 webpack 的分包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用 defineAsyncComponent 异步加载组件</span><br><span class="hljs-attr">components</span>: &#123;<br>    <span class="hljs-title class_">AsyncComponent</span>: <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-function">() =&gt;</span><br>      <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;./components/AsyncComponent.vue&#x27;</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>Suspense：加载状态将由 <code>&lt;Suspense&gt;</code> 控制，组件自身的加载、错误、延迟和超时选项都将被忽略</p><ul><li>default：需要记载的异步组件</li><li>fallback：加载错误的时候显示 fallback 插槽的内容</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">suspense</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">async-home</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">async-home</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">fallback</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">loading</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">loading</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">suspense</span>&gt;</span><br></code></pre></td></tr></table></figure><p>$refs：用来操作 DOM 节点，DOM 定义 ref 属性，都会加入到实例的 $refs 中</p><p>$parent：获取父组件实例</p><p>$root：获取根组件实例</p><p>$el：获取 DOM 节点</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><table><thead><tr><th>func</th><th>desc</th></tr></thead><tbody><tr><td>beforeCreate</td><td>组件实例创建之前</td></tr><tr><td>created</td><td>组件实例创建之后</td></tr><tr><td>beforeMount</td><td>挂载之前</td></tr><tr><td>mounted</td><td>挂载完成</td></tr><tr><td>beforeUpdate</td><td>数据变化界面刷新之前</td></tr><tr><td>updated</td><td>数据刷新之后</td></tr><tr><td>beforeUnmount</td><td>组件销毁取消挂载之前</td></tr><tr><td>unmonted</td><td>组件销毁移除之后</td></tr><tr><td>activated</td><td>组件活跃时</td></tr><tr><td>deactivated</td><td>组件缓存后</td></tr></tbody></table><h3 id="组件-v-modal"><a href="#组件-v-modal" class="headerlink" title="组件 v-modal"></a>组件 v-modal</h3><p>子组件中使用 v-modal 相当于：</p><ul><li>modalValue 属性传给了子组件</li><li>子组件使用 update:modalValue 传递给事件给父组件</li></ul><p>自定义多个 v-modal：<code>&lt;nav-bar v-modal=&quot;message&quot; v-modal:title=&quot;title&quot;&gt;&lt;/nav-bar&gt;</code></p><ul><li>props: [“modalValue”,”title”]</li><li>emits: [“update:modalValue”, “update:title”]</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">props</span>: [<span class="hljs-string">&quot;modelValue&quot;</span>],<br>    <span class="hljs-attr">emits</span>: [<span class="hljs-string">&quot;update:modelValue&quot;</span>],<br>    <span class="hljs-attr">computed</span>: &#123;<br>        <span class="hljs-attr">value</span>: &#123;<br>            <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">modelValue</span><br>            &#125;,<br>            <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>                <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&quot;update:modelValue&quot;</span>, value)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="过渡与动画"><a href="#过渡与动画" class="headerlink" title="过渡与动画"></a>过渡与动画</h2><p>使用 transition 标签包裹需要使用过渡的标签或组件即可</p><ul><li>v-enter-from：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li><li>v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡&#x2F;动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li><li>v-enter-to：定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter-from 被移除)，在过渡&#x2F;动画完成之后移除。</li><li>v-leave-from：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li><li>v-leave-active：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡&#x2F;动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li><li>v-leave-to：离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave-from 被移除)，在过渡&#x2F;动画完成之后移除。</li></ul><p>使用 css 动画需要使用 animation ，@keyprame</p><p>过渡模式 mode：out-in 常用</p><ul><li><code>in-out</code>: 新元素先进行进入过渡，完成之后当前元素过渡离开。</li><li><code>out-in</code>: 当前元素先进行离开过渡，完成之后新元素过渡进入。</li></ul><h3 id="animate-css"><a href="#animate-css" class="headerlink" title="animate.css"></a>animate.css</h3><p>使用自定义过渡类完成动画：</p><ul><li><code>enter-from-class</code></li><li><code>enter-active-class</code></li><li><code>enter-to-class</code></li><li><code>leave-from-class</code></li><li><code>leave-active-class</code></li><li><code>leave-to-class</code></li></ul><p>安装：<code>npm install animate.css</code></p><p>引入：<code>import &#39;animate.css&#39;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;button @click=&quot;show = !show&quot;&gt;转换&lt;/button&gt;<br>    &lt;transition<br>      name=&quot;custom-classes-transition&quot;<br>      enter-active-class=&quot;animate__animated animate__tada&quot;<br>      leave-active-class=&quot;animate__animated animate__bounceOutRight&quot;<br>    &gt;<br>      &lt;p v-if=&quot;show&quot;&gt;hello&lt;/p&gt;<br>    &lt;/transition&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      show: true,<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="gsap"><a href="#gsap" class="headerlink" title="gsap"></a>gsap</h3><p>使用 js 钩子函数完成动画：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">transition</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">before-enter</span>=<span class="hljs-string">&quot;beforeEnter&quot;</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">enter</span>=<span class="hljs-string">&quot;enter&quot;</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">after-enter</span>=<span class="hljs-string">&quot;afterEnter&quot;</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">enter-cancelled</span>=<span class="hljs-string">&quot;enterCancelled&quot;</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">before-leave</span>=<span class="hljs-string">&quot;beforeLeave&quot;</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">leave</span>=<span class="hljs-string">&quot;leave&quot;</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">after-leave</span>=<span class="hljs-string">&quot;afterLeave&quot;</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">leave-cancelled</span>=<span class="hljs-string">&quot;leaveCancelled&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:css</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>  <span class="hljs-comment">&lt;!-- ... --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br></code></pre></td></tr></table></figure><p>安装：<code>npm install gsap</code></p><p>引入：<code>import gsap from &#39;gsap&#39;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;input type=&quot;num&quot; step=&quot;100&quot; v-model=&quot;counter&quot; /&gt;<br>    &lt;h2&gt;&#123;&#123; showValue.toFixed(0) &#125;&#125;&lt;/h2&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import gsap from &quot;gsap&quot;;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      show: true,<br>      counter: 0,<br>      showValue: 0,<br>    &#125;;<br>  &#125;,<br>  watch: &#123;<br>    counter(newValue) &#123;<br>      gsap.to(this, &#123; duration: 1, showValue: newValue &#125;);<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="列表过渡"><a href="#列表过渡" class="headerlink" title="列表过渡"></a>列表过渡</h3><ul><li>使用 transition-group 包裹列表渲染</li><li>元素动画使用 name 属性定义 css 动画</li><li>移动使用 name 属性的 move</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;button @click=&quot;add&quot;&gt;Add&lt;/button&gt;<br>    &lt;button @click=&quot;remove&quot;&gt;Remove&lt;/button&gt;<br>    &lt;button @click=&quot;shuffle&quot;&gt;Shuffle&lt;/button&gt;<br>    &lt;transition-group name=&quot;list&quot; tag=&quot;p&quot;&gt;<br>      &lt;span v-for=&quot;num in nums&quot; :key=&quot;num&quot; class=&quot;list-item&quot;&gt;<br>        &#123;&#123; num &#125;&#125;<br>      &lt;/span&gt;<br>    &lt;/transition-group&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import _ from &quot;lodash&quot;;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      nums: [1, 2, 3, 4, 5, 6, 7],<br>      count: 10,<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    randomIndex() &#123;<br>      return Math.floor(Math.random() * this.nums.length);<br>    &#125;,<br>    add() &#123;<br>      this.nums.splice(this.randomIndex(), 0, this.count++);<br>    &#125;,<br>    remove() &#123;<br>      this.nums.splice(this.randomIndex(), 1);<br>    &#125;,<br>    shuffle() &#123;<br>      this.nums = _.shuffle(this.nums);<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.list-item &#123;<br>  display: inline-block;<br>  margin: 0 5px;<br>&#125;<br><br>.list-enter-active,<br>.list-leave-active &#123;<br>  transition: all 1s ease;<br>&#125;<br><br>.list-move &#123;<br>  transition: transform 0.8s ease;<br>&#125;<br><br>.list-enter-from,<br>.list-leave-to &#123;<br>  opacity: 0;<br>  transform: translateY(30px);<br>&#125;<br><br>.list-leave-active &#123;<br>  position: absolute;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="Mixin"><a href="#Mixin" class="headerlink" title="Mixin"></a>Mixin</h3><p>Mixin 能分发组件中可复用的功能，使用 mixins:[mixin1] 接收，当其中的属性相同时会产生冲突：</p><ol><li>data 函数中返回的对象<ul><li>默认情况进行合并</li><li>属性冲突，保留组件自身的</li></ul></li><li>生命周期钩子函数<ul><li>会合并到数组中，都会调用</li></ul></li><li>其他都会进行合并<ul><li>key 发生冲突选择组件自身的</li></ul></li></ol><p>全局混入：<code>app.mixin()</code></p><p>extends：继承组件的对象属性</p><h2 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h2><h3 id="setup-函数"><a href="#setup-函数" class="headerlink" title="setup 函数"></a>setup 函数</h3><p>无法使用 this，原因是 setup 没有绑定组件实例，setup 执行时，data，components，methods 都还没执行</p><p>参数：</p><ul><li>props，父组件所传过来的属性</li><li>context，SetupContext 上下文对象<ul><li>attrs，非 props 的属性</li><li>slots，插槽</li><li>emit，setup 中没有 this，只能使用 emit 去取代它发送事件</li></ul></li></ul><p>返回值：返回一个对象，返回值可在 template 中使用，返回的属性不具有响应式，想要响应式需要对应函数包裹属性</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>reactive()：传入对象和数组</p><p>ref()：传入基本数据类型，取值需要 .value，template 中则使用不需要 .value</p><p>readonly()：属性只读无法修改</p><p>isProxy，检查对象是否是 reactive 或 readonly 创建的 proxy</p><p>isReactive，检查对象是否是 reactive 创建的</p><p>isReadonly，检查对象是否是 readonly 创建的</p><p>shallowReactive，不执行深层的响应</p><p>shallowReadonly，不执行深层的只读</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h2&gt;计数：&#123;&#123; counter &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;increment&quot;&gt;+1&lt;/button&gt;<br><br>    &lt;h2&gt;信息：&#123;&#123; info.uname &#125;&#125;&lt;/h2&gt;<br>    &lt;input type=&quot;text&quot; v-model=&quot;info.uname&quot; /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; reactive, ref &#125; from &quot;vue&quot;;<br>export default &#123;<br>  setup(props, context) &#123;<br>    const counter = ref(0);<br>    const increment = () =&gt; &#123;<br>      counter.value++;<br>    &#125;;<br>    const info = reactive(&#123;<br>      uname: &quot;ReaJason&quot;,<br>      age: 20,<br>    &#125;);<br><br>    return &#123;<br>      counter,<br>      increment,<br>      info,<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>toRefs()，传入 reactive 对象，使其解构出来的仍具有响应式</p><p>toRef(reactive, “name”)，传入 reactive 对象，指定其中 name 属性仍具有响应式并返回</p><p>unref，传入一个对象，如果是 ref 返回值，如果不是直接返回原对象</p><p>isRef，判断对象是否是 ref 对象</p><p>shallowRef，创建浅层的 ref 对象</p><p>triggerRef，手动触发 shallowRef 相关联的副作用</p><p>customRef，自定义 ref，对其自定义跟踪和更新触发，track，trigger</p><p>computed，计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; computed, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> firstName = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;Rea&quot;</span>);<br>    <span class="hljs-keyword">const</span> lastName = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;Jason&quot;</span>);<br>    <span class="hljs-keyword">const</span> fullName = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> firstName.<span class="hljs-property">value</span> + <span class="hljs-string">&quot; &quot;</span> + lastName.<span class="hljs-property">value</span>);<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      fullName<br>    &#125;;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>provide(name,value)，为子组件及其以下的组件提供数据</p><p>inject(name,default)，获取父组件链的数据</p><h3 id="侦听数据变化"><a href="#侦听数据变化" class="headerlink" title="侦听数据变化"></a>侦听数据变化</h3><p>watchEffect：自动收集依赖，并且会立即执行一次</p><p>停止侦听：watchEffect 返回一个函数，调用这个函数则会停止侦听</p><p>清除副作用：watchEffect 中的箭头函数接收一个参数 onInvalidate</p><p>使用 ref 获取 dom 节点，并调整 watchEffect 执行时机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h2 ref=&quot;title&quot;&gt;哈哈哈&lt;/h2&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; ref, watchEffect &#125; from &quot;vue&quot;;<br><br>export default &#123;<br>  setup() &#123;<br>    const title = ref(null);<br><br>    watchEffect(<br>      () =&gt; &#123;<br>        console.log(title.value);<br>      &#125;,<br>      &#123; flush: &quot;post&quot; &#125; // 默认是 pre，如果需要操作 dom 节点需要设置 post，不然第一次为 null<br>    );<br><br>    return &#123;<br>      title,<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>watch：手动指定侦听的 属性，可获取状态前后的值，等同于 options api 的 watch</p><ul><li>watch 支持侦听，getter 函数，ref 对象，数组</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h2&gt;&#123;&#123; info.name &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeData&quot;&gt;change&lt;/button&gt;<br>    &lt;h2&gt;&#123;&#123; count &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeCount&quot;&gt;+1&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; reactive, ref, watch &#125; from &quot;vue&quot;;<br><br>export default &#123;<br>  setup() &#123;<br>    const info = reactive(&#123; name: &quot;Rea&quot;, age: &quot;20&quot; &#125;);<br><br>    // 侦听，传入 getter 函数<br>    watch(<br>      () =&gt; info.name,<br>      (newValue, oldValue) =&gt; &#123;<br>        console.log(newValue + &quot; &quot; + oldValue);<br>      &#125;<br>    );<br>    const count = ref(0);<br><br>    // 传入 ref 函数<br>    watch(<br>      count,<br>      (newValue, oldValue) =&gt; &#123;<br>        console.log(newValue + &quot; &quot; + oldValue);<br>      &#125;,<br>      &#123; immediate: true, deep: true &#125;<br>    );<br><br>    const changeCount = () =&gt; count.value++;<br><br>    const changeData = () =&gt; &#123;<br>      info.name = &quot;Jason&quot;;<br>    &#125;;<br><br>    return &#123;<br>      info,<br>      changeData,<br>      changeCount,<br>      count,<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3><p>组件创建前和创建完成的生命周期直接在 setup 中书写即可</p><table><thead><tr><th>hook</th><th>desc</th></tr></thead><tbody><tr><td>onBeforeMount(()&#x3D;&gt; {})</td><td>挂载前</td></tr><tr><td>onMounted(()&#x3D;&gt; {})</td><td>挂载完成</td></tr><tr><td>onBeforeUpdate(()&#x3D;&gt; {})</td><td>更新前</td></tr><tr><td>onUpdated(()&#x3D;&gt; {})</td><td>更新完成</td></tr><tr><td>onBeforeUnmount(()&#x3D;&gt; {})</td><td>卸载之前</td></tr><tr><td>onUnmounted(()&#x3D;&gt; {})</td><td>卸载完成之后</td></tr><tr><td>onActivated(()&#x3D;&gt; {})</td><td>活动时</td></tr><tr><td>onDeactivated(()&#x3D;&gt; {})</td><td>缓存时</td></tr></tbody></table><h2 id="VueRouter"><a href="#VueRouter" class="headerlink" title="VueRouter"></a>VueRouter</h2><p>安装：<code>npm install vue-router@4 </code></p><p>基本使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/Home.vue&#x27;</span><br><br><span class="hljs-keyword">const</span> routes = [<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>        <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/home&quot;</span>  <span class="hljs-comment">// 重定向</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;home-chunk&quot; */</span><span class="hljs-string">&#x27;../views/About.vue&#x27;</span>) <span class="hljs-comment">// 组件异步加载，路由分包，前面使用 magic comment 来对分包命名</span><br>    &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>    <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>),<br>    routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;nav&quot;&gt;<br>    &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt; |<br>    &lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt;<br>  &lt;/div&gt;<br>  &lt;router-view/&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p><code>&lt;router-view /&gt;</code> 是用来为渲染组件占位的</p><p><code>&lt;router-link&gt;</code> 是用来指定路由去向</p><ul><li>to 属性：字符串（path 的字符串）或对象</li><li>repalce 属性：点击调用 replace，默认是 push</li><li>active-class 属性：设置激活后应用的 class，默认为 router-link-active</li><li>exact-active-class 属性：链接精准激活时应用的 class，默认是 router-link-exact-active</li></ul><h3 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h3><p>路由设置 path：<code>path: &#39;/user/:username&#39;</code></p><p>页面路由：<code>&lt;router-link *to*=&quot;/user/reajason&quot;&gt;User&lt;/router-link&gt;</code></p><p>获取值：所有组件都可以使用 this.$route.params 获取，setup 中使用 useRouter 返回的 route </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;h1&gt;<span class="hljs-title class_">User</span>:&#123;&#123; $route.<span class="hljs-property">params</span>.<span class="hljs-property">username</span> &#125;&#125;&lt;/h1&gt;<br><br><br><span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>();<br><br>    <span class="hljs-keyword">const</span> username = route.<span class="hljs-property">params</span>.<span class="hljs-property">username</span>;<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      username,<br>    &#125;;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="NotFound"><a href="#NotFound" class="headerlink" title="NotFound"></a>NotFound</h3><p>配置 notfound 路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/:pathMatch(.*)*&#x27;</span>, <span class="hljs-comment">// 最后一个 * ，会将错误路径变成数组，如果没有会是字符串</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;NotFound&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title function_">import</span>(<span class="hljs-string">&quot;../views/NotFound.vue&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>获取错误路径：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>臣妾做不到<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;$route.params.pathMatch&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>配置路由 children 属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>,<br>    <span class="hljs-attr">children</span>: [<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;message&quot;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../views/HomeMessage.vue&#x27;</span>)<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;other&quot;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../views/HomeOther.vue&#x27;</span>)<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>页面跳转：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>This is an home page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home/message&quot;</span>&gt;</span>消息<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span> |<br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home/other&quot;</span>&gt;</span>其他<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><p>使用 route 对象：</p><ul><li><code>router.push</code> 等同于 <code>window.history.pushState</code></li><li><code>router.replace</code> 等同于 <code>window.history.replaceState</code></li><li><code>router.go</code> 等同于 <code>window.history.go</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 字符串路径</span><br>router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/users/eduardo&#x27;</span>)<br><br><span class="hljs-comment">// 带有路径的对象</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/users/eduardo&#x27;</span> &#125;)<br><br><span class="hljs-comment">// 命名的路由，并加上参数，让路由建立 url</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-attr">params</span>: &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;eduardo&#x27;</span> &#125; &#125;)<br><br><span class="hljs-comment">// 带查询参数，结果是 /register?plan=private</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">plan</span>: <span class="hljs-string">&#x27;private&#x27;</span> &#125; &#125;)<br><br><span class="hljs-comment">// 带 hash，结果是 /about#team</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>, <span class="hljs-attr">hash</span>: <span class="hljs-string">&#x27;#team&#x27;</span> &#125;)<br><br><span class="hljs-comment">// replace</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;)<br><span class="hljs-comment">// 相当于</span><br>router.<span class="hljs-title function_">replace</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span> &#125;)<br><br><span class="hljs-comment">// 向前移动一条记录，与 router.forward() 相同</span><br>router.<span class="hljs-title function_">go</span>(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">// 返回一条记录，与router.back() 相同</span><br>router.<span class="hljs-title function_">go</span>(-<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">// 前进 3 条记录</span><br>router.<span class="hljs-title function_">go</span>(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment">// 如果没有那么多记录，静默失败</span><br>router.<span class="hljs-title function_">go</span>(-<span class="hljs-number">100</span>)<br>router.<span class="hljs-title function_">go</span>(<span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><h3 id="v-slot"><a href="#v-slot" class="headerlink" title="v-slot"></a>v-slot</h3><p>router-link 中的 v-slot 有如下对象：</p><ul><li><code>href</code>：解析后的 URL。将会作为一个 <code>&lt;a&gt;</code> 元素的 <code>href</code> 属性。如果什么都没提供，则它会包含 <code>base</code>。</li><li><code>route</code>：解析后的规范化的地址。</li><li><code>navigate</code>：触发导航的函数。 <strong>会在必要时自动阻止事件</strong>，和 <code>router-link</code> 一样。例如：<code>ctrl</code> 或者 <code>cmd</code> + 点击仍然会被 <code>navigate</code> 忽略。</li><li><code>isActive</code>：如果需要应用 <a href="https://next.router.vuejs.org/zh/api/#active-class">active class</a>，则为 <code>true</code>。允许应用一个任意的 class。</li><li><code>isExactActive</code>：如果需要应用 <a href="https://next.router.vuejs.org/zh/api/#exact-active-class">exact active class</a>，则为 <code>true</code>。允许应用一个任意的 class。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;router-link<br>  to=<span class="hljs-string">&quot;/about&quot;</span><br>  custom<br>  v-slot=<span class="hljs-string">&quot;&#123; href, route, navigate, isActive, isExactActive &#125;&quot;</span><br>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">:active</span>=<span class="hljs-string">&quot;isActive&quot;</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;href&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;navigate&quot;</span>&gt;</span></span><br><span class="language-xml">    &#123;&#123; route.fullPath &#125;&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br>&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><p>router-view 中 的 v-slot 有如下对象：</p><ul><li><code>Component</code>: 要传递给 <code>&lt;component&gt;</code> 的 VNodes <code>是</code> prop。</li><li><code>route</code>: 解析出的标准化<a href="https://next.router.vuejs.org/zh/api/#routelocationnormalized">路由地址</a>。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; Component, route &#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">:name</span>=<span class="hljs-string">&quot;route.meta.transition || &#x27;fade&#x27;&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;out-in&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">component</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;Component&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;route.meta.usePathKey ? route.path : undefined&quot;</span></span><br><span class="hljs-tag">                       /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>动态添加路由：</p><ol><li><p>添加顶级路由，addRoute</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">addRoute</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span> &#125;)<br></code></pre></td></tr></table></figure></li><li><p>添加嵌套路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">addRoute</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;settings&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">AdminSettings</span> &#125;)<br></code></pre></td></tr></table></figure></li><li><p>删除路由，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 根据对象删除</span><br><span class="hljs-keyword">const</span> removeRoute = router.<span class="hljs-title function_">addRoute</span>(routeRecord)<br><span class="hljs-title function_">removeRoute</span>() <span class="hljs-comment">// 删除路由如果存在的话</span><br><br><span class="hljs-comment">// 根据路由名字删除</span><br>router.<span class="hljs-title function_">removeRoute</span>(<span class="hljs-string">&#x27;about&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ol><h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><p>在路由导航生命周期中进行回调。</p><ol><li>导航被触发。</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫(2.2+)。</li><li>在路由配置里调用 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li><li>调用全局的 <code>beforeResolve</code> 守卫(2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol><p>beforeEach：前置路由</p><ul><li>to：即将进入的目标</li><li>from：当前导航正要离开的路由</li><li>返回值 false，取消当前路由</li><li>返回值 路由地址，与 route.push 传入的参数一样</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-comment">// 返回 false 以取消导航</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p>安装：<code>npm install vuex@next --save</code></p><p>简单使用，store 中存储数据，mutations 中提供修改数据的方法，全局组件都能访问 this.$store，commit 执行方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createStore</span>(&#123;<br>    <span class="hljs-attr">state</span>: &#123;<br>        <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br>        <span class="hljs-title function_">increment</span>(<span class="hljs-params">state</span>) &#123;<br>            state.<span class="hljs-property">counter</span>++<br>        &#125;,<br>        <span class="hljs-title function_">decrement</span>(<span class="hljs-params">state</span>) &#123;<br>            state.<span class="hljs-property">counter</span>--<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h2&gt;这是一个数字：&#123;&#123; $store.state.counter &#125;&#125;&lt;/h2&gt;<br>  &lt;button @click=&quot;increment&quot;&gt;+1&lt;/button&gt;<br>  &lt;button @click=&quot;decrement&quot;&gt;-1&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  methods: &#123;<br>    increment() &#123;<br>      this.$store.commit(&quot;increment&quot;);<br>    &#125;,<br>    decrement() &#123;<br>      this.$store.commit(&quot;decrement&quot;);<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h3><p>computed 展开 state 中的所有属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 传入数组，取出 state 中的值</span><br>...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&quot;counter&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>]);<br><br><br><br><span class="hljs-comment">// 传入对象，可自定义名字</span><br>...<span class="hljs-title function_">mapState</span>(&#123;<br>    <span class="hljs-attr">sCounter</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">counter</span>,<br>    <span class="hljs-attr">sName</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">name</span>,<br>    <span class="hljs-attr">sAge</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">age</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>setup 中使用 mapState：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useStore</span>();<br><br><span class="hljs-comment">// computed 函数包裹</span><br><span class="hljs-keyword">const</span> sCounter = <span class="hljs-title function_">computed</span>(<span class="hljs-function">()=&gt;</span> store.<span class="hljs-property">state</span>.<span class="hljs-property">counter</span>)<br><br><br><span class="hljs-comment">// 遍历解构</span><br><span class="hljs-keyword">const</span> storeStateFn = <span class="hljs-title function_">mapState</span>([<span class="hljs-string">&quot;counter&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>]);<br><span class="hljs-keyword">const</span> storeState = &#123;&#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(storeStateFn).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">fnKey</span> =&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> fn = storeStateFn[fnKey].<span class="hljs-title function_">bind</span>(&#123;<span class="hljs-attr">$store</span>: store&#125;)<br>    storeState[fnKey] = <span class="hljs-title function_">computed</span>(fn)<br>&#125;)<br><br><span class="hljs-keyword">return</span> &#123;<br>    ...storeState<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><p>相当于 state 的计算属性，但是没有缓存</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">state</span>: &#123;<br>        <span class="hljs-attr">goods</span>: [<br>            &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">30</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;java&quot;</span>&#125;,<br>            &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;js&quot;</span>&#125;,<br>            &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;html&quot;</span>&#125;,<br>        ]<br>    &#125;,<br>    <span class="hljs-attr">getters</span>: &#123;<br>        <span class="hljs-attr">expensiveBook</span>: <span class="hljs-function">(<span class="hljs-params">state,getters</span>)=&gt;</span>&#123;<br>            <span class="hljs-keyword">return</span> state.<span class="hljs-property">goods</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">price</span> &gt; <span class="hljs-number">30</span>)<br>        &#125;,<br>        <span class="hljs-attr">getGreaterN</span>: <span class="hljs-function">(<span class="hljs-params">state,getters</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">n</span>) =&gt;</span> state.<span class="hljs-property">goods</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">price</span> &gt; n)<br>        &#125;<br>    &#125;    <br>&#125;<br><br><span class="hljs-comment">// 通过 $store.getters 获取属性值</span><br>&lt;h2&gt;&#123;&#123;$store.<span class="hljs-property">getters</span>.<span class="hljs-property">expensiveBook</span>&#125;&#125;&lt;/h2&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;$store.getters.getGreaterN(20)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>mapGetters:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>    ...<span class="hljs-title function_">mapGetters</span>([<br>        <span class="hljs-string">&quot;expensiveBook&quot;</span>,<br>        <span class="hljs-string">&quot;getGreaterN&quot;</span><br>])<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。mutation 只能使用同步函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数传参，传一个值</span><br><span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">increment</span>(<span class="hljs-params">state, payload</span>) &#123;<br>        state.<span class="hljs-property">counter</span> += payload<br>    &#125;,<br>        <span class="hljs-title function_">decrement</span>(<span class="hljs-params">state</span>) &#123;<br>            state.<span class="hljs-property">counter</span>--<br>        &#125;<br>&#125;<br><br><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;increment&quot;</span>, <span class="hljs-number">10</span>);<br>    &#125;,<br>        <span class="hljs-title function_">decrement</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;decrement&quot;</span>);<br>        &#125;,<br>&#125;<br><br><span class="hljs-comment">// 函数传参，传入对象</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;increment&quot;</span>, &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;ReaJason&quot;</span>&#125;);<br><br><span class="hljs-comment">// 另一种提交风格</span><br><span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">increment</span>(<span class="hljs-params">state, payload</span>) &#123;<br>        state.<span class="hljs-property">counter</span> += payload.<span class="hljs-property">value</span><br>    &#125;<br>&#125;<br><br><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(&#123;<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;increment&quot;</span>,<br>            <span class="hljs-attr">value</span>: <span class="hljs-number">10</span><br>        &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用常量函数名</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-comment">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span><br>    [<span class="hljs-variable constant_">SOME_MUTATION</span>] (state) &#123;<br>      <span class="hljs-comment">// 修改 state</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>mapMutations：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">methods</span>: &#123;<br>    ...<span class="hljs-title function_">mapMutations</span>([<br>      <span class="hljs-string">&#x27;increment&#x27;</span>, <span class="hljs-comment">// 将 `this.increment()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span><br><br>      <span class="hljs-comment">// `mapMutations` 也支持载荷：</span><br>      <span class="hljs-string">&#x27;incrementBy&#x27;</span> <span class="hljs-comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit(&#x27;incrementBy&#x27;, amount)`</span><br>    ]),<br>    ...<span class="hljs-title function_">mapMutations</span>(&#123;<br>      <span class="hljs-attr">add</span>: <span class="hljs-string">&#x27;increment&#x27;</span> <span class="hljs-comment">// 将 `this.add()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span><br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><p>actions 中函数的 context 包含的参数：</p><ul><li>commit，调用 mutation</li><li>dispatch，调用 action</li><li>getters，获取 getters 中属性</li><li>state，获取 state 中属性</li><li>rootGetters，获取父模块的 getters</li><li>rootState，获取父模块的 state</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(&#123;<br>    <span class="hljs-attr">state</span>: &#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br>        increment (state) &#123;<br>            state.<span class="hljs-property">count</span>++<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">actions</span>: &#123;<br>        increment (context) &#123;<br>            context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)<br>        &#125;,<br>        incrementAsync (&#123; commit &#125;) &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)<br>            &#125;, <span class="hljs-number">1000</span>)<br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-comment">// 使用 dispatch 获取 action 属性</span><br>store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)<br><br><span class="hljs-comment">// 以载荷形式分发</span><br>store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;incrementAsync&#x27;</span>, &#123;<br>  <span class="hljs-attr">amount</span>: <span class="hljs-number">10</span><br>&#125;)<br><br><span class="hljs-comment">// 以对象形式分发</span><br>store.<span class="hljs-title function_">dispatch</span>(&#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;incrementAsync&#x27;</span>,<br>  <span class="hljs-attr">amount</span>: <span class="hljs-number">10</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>mapActions，actions 中可以返回 Promise 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapActions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">methods</span>: &#123;<br>    ...<span class="hljs-title function_">mapActions</span>([<br>      <span class="hljs-string">&#x27;increment&#x27;</span>, <span class="hljs-comment">// 将 `this.increment()` 映射为 `this.$store.dispatch(&#x27;increment&#x27;)`</span><br><br>      <span class="hljs-comment">// `mapActions` 也支持载荷：</span><br>      <span class="hljs-string">&#x27;incrementBy&#x27;</span> <span class="hljs-comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch(&#x27;incrementBy&#x27;, amount)`</span><br>    ]),<br>    ...<span class="hljs-title function_">mapActions</span>(&#123;<br>      <span class="hljs-attr">add</span>: <span class="hljs-string">&#x27;increment&#x27;</span> <span class="hljs-comment">// 将 `this.add()` 映射为 `this.$store.dispatch(&#x27;increment&#x27;)`</span><br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> moduleA = &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123; ... &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">getters</span>: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> moduleB = &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123; ... &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-attr">a</span>: moduleA,<br>    <span class="hljs-attr">b</span>: moduleB<br>  &#125;<br>&#125;)<br><br><br><span class="hljs-comment">// 获取的是 a 的 state 中的属性</span><br>store.<span class="hljs-property">state</span>.<span class="hljs-property">a</span> <span class="hljs-comment">// -&gt; moduleA 的状态</span><br>store.<span class="hljs-property">state</span>.<span class="hljs-property">b</span> <span class="hljs-comment">// -&gt; moduleB 的状态</span><br></code></pre></td></tr></table></figure><p>命名空间：模块默认是全局注册的，因此都会合并到主模块上</p><p>使用 namespace:true 隔离开</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取子模块的 getters,需要加上模块名称</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">getters</span>(<span class="hljs-string">&quot;/home/getName&quot;</span>); <br><br><span class="hljs-comment">// 调用子模块的 mutation</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;/home/changeName&quot;</span>)<br><br><span class="hljs-comment">// 调用子模块的 actions</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&quot;/home/changeName&quot;</span>)<br></code></pre></td></tr></table></figure><p>子模块调用父模块的 mutation 和 action</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;someMutation&#x27;</span>, <span class="hljs-literal">null</span>, &#123; <span class="hljs-attr">root</span>: <span class="hljs-literal">true</span> &#125;)<br><br><span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;someMutation&#x27;</span>, <span class="hljs-literal">null</span>, &#123; <span class="hljs-attr">root</span>: <span class="hljs-literal">true</span> &#125;)<br></code></pre></td></tr></table></figure><p>createNamespacedHelpers 辅助函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createNamespacedHelpers &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-keyword">const</span> &#123; mapState, mapActions &#125; = <span class="hljs-title function_">createNamespacedHelpers</span>(<span class="hljs-string">&#x27;some/nested/module&#x27;</span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">// 在 `some/nested/module` 中查找</span><br>    ...<span class="hljs-title function_">mapState</span>(&#123;<br>      <span class="hljs-attr">a</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">a</span>,<br>      <span class="hljs-attr">b</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">b</span><br>    &#125;)<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-comment">// 在 `some/nested/module` 中查找</span><br>    ...<span class="hljs-title function_">mapActions</span>([<br>      <span class="hljs-string">&#x27;foo&#x27;</span>,<br>      <span class="hljs-string">&#x27;bar&#x27;</span><br>    ])<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="后台管理项目"><a href="#后台管理项目" class="headerlink" title="后台管理项目"></a>后台管理项目</h2>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC</title>
    <link href="/2021/11/25/JavaWebJDBC/"/>
    <url>/2021/11/25/JavaWebJDBC/</url>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>jdbc 是一套连接数据库的规范，由各数据库分别实现。</p><p>MySQL：<a href="https://mvnrepository.com/artifact/mysql/mysql-connector-java">mysql-connector-java (mvnrepository.com)</a></p><p>注册驱动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br><br><br><span class="hljs-comment">/* com.mysql.cj.jdbc.Driver */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Driver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">NonRegisteringDriver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.sql.Driver &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Driver</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            DriverManager.registerDriver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Driver</span>());<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException var1) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Can&#x27;t register driver!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h2><p>驱动管理，调用静态方法 getConnection 获取数据库连接对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 常用方法：static Connection getConnection(String url, String user, String password)</span><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/test&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-type">Connector</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,user,password);<br><span class="hljs-comment">// TODO 数据库操作</span><br>con.close()<br></code></pre></td></tr></table></figure><h2 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h2><p>Statement 使用的字符串拼接的方式执行 SQL 语句，因此有 SQL 注入风险，必须使用 PreparedStatement。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、执行查询操作</span><br><span class="hljs-comment">ResultSet executeQuery()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2、执行除查询以外的其他操作，返回影响的 row num</span><br><span class="hljs-comment">int executeUpdate()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">3、执行任何 sql 代码，如果返回的是 resultset 对象则返回 true，返回 int 则返回 false</span><br><span class="hljs-comment">boolean execute()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">3、设置占位符对应值 parameterIndex 从 1 开始</span><br><span class="hljs-comment">void setInt(int parameterIndex, int x)</span><br><span class="hljs-comment">void setDate(int parameterIndex, java.sql.Date x)</span><br><span class="hljs-comment">void setString(int parameterIndex, String x)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义查询 SQL 语句，使用 ? 作为占位符，用于填充</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM user WHERE id = ?&quot;</span>;<br><span class="hljs-comment">// 获取 PreparedStatement 对象</span><br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> con.prepareStatement(sql);<br><span class="hljs-comment">// 填充占位符的值</span><br>ps.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// 执行 SQL 语句</span><br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> ps.executeQuery(); <br><br><span class="hljs-comment">// TODO 解析数据</span><br><br><span class="hljs-comment">// 关闭资源</span><br>ps.close();<br></code></pre></td></tr></table></figure><h2 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h2><p>保存查询记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、调用一次会将游标向下移动，如果当当前行可用返回 true，反之返回 false</span><br><span class="hljs-comment">boolean next()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2、获取当前行的数据，可以使用列索引（1 开始），也可以使用列名</span><br><span class="hljs-comment">String getString(int columnIndex)</span><br><span class="hljs-comment">String getString(String columnLabel)</span><br><span class="hljs-comment">int getInt(int columnIndex)</span><br><span class="hljs-comment">int getInt(String columnLabel)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;User&gt; al = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">try</span>(<span class="hljs-type">Connection</span> <span class="hljs-variable">cn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> cn.prepareStatement(<span class="hljs-string">&quot;select * from user&quot;</span>);<br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> pre.executeQuery();)&#123;<br>    <span class="hljs-keyword">while</span>(rs.next())&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;email&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;password&quot;</span>);<br>        al.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(id, name, email, password));<br>    &#125;<br>&#125;<span class="hljs-keyword">catch</span>(SQLException e)&#123;<br>    JDBCUtils.printSQLException(e);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h2><p>Connection 默认获取的连接是自动提交事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、设置自动提交</span><br><span class="hljs-comment">void setAutoCommit(boolean autoCommit)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2、提交事务</span><br><span class="hljs-comment">void commit()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">3、设置保存点</span><br><span class="hljs-comment">Savepoint setSavepoint()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">4、事务回滚</span><br><span class="hljs-comment">void rollback()</span><br><span class="hljs-comment">void rollback(Savepoint savepoint)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h2><p>德鲁伊是阿里巴巴开发的连接池技术。<a href="https://mvnrepository.com/artifact/com.alibaba/druid">druid (mvnrepository.com)</a></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driverClassName</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true</span><br><span class="hljs-attr">characterEncoding</span>=<span class="hljs-string">utf-8</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">123456</span><br><span class="hljs-attr">initialSize</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">maxActive</span>=<span class="hljs-string">50</span><br><span class="hljs-attr">maxWait</span>=<span class="hljs-string">5000</span><br><span class="hljs-attr">testWhileIdle</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 读取配置文件</span><br><span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>prop.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\druid.properties&quot;</span>));<br><br><span class="hljs-comment">// 注册连接池</span><br><span class="hljs-type">DataSource</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(prop);<br><br><span class="hljs-comment">// 获取连接对象</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">cn</span> <span class="hljs-operator">=</span> ds.getConnection();<br><br><span class="hljs-comment">// TODO 数据库操作</span><br><br><span class="hljs-comment">// 归还连接到连接池中</span><br>cn.close();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSP</title>
    <link href="/2021/11/22/JavaWebJSP/"/>
    <url>/2021/11/22/JavaWebJSP/</url>
    
    <content type="html"><![CDATA[<p>JSP 都会被编译成 Servlet 类，文件位置位于：<code>/work/Catalina/localhost</code> 下。</p><ul><li>&lt;%  %&gt;（代码块），会被编译放到 service 方法中，局部变量</li><li>&lt;%&#x3D; %&gt;（表达式语句块），会被编译到 out.println() 中，因此不能有 ; 号</li><li>&lt;%@ page %&gt;，会被编译到 servlet 类最头部</li><li>&lt;%! %&gt;（声明语句块），会被编译到 servlet 类下，作为类的属性和方法</li><li>其他普通字符串比如 html 会被放入到 out.write() 中</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ol><li><code>&lt;!-- HTML 注释 --&gt;</code>，浏览器能看到</li><li><code>&lt;%-- JSP 注释--%&gt;</code>，浏览器无法看到</li></ol><h2 id="JSP-生命周期"><a href="#JSP-生命周期" class="headerlink" title="JSP 生命周期"></a>JSP 生命周期</h2><p>当请求到来时，容器将 .jsp 转为 java 代码并编译为 .class 文件，再加载到容器中，并构造 Servlet 实例调用 jspInit() 方法完成初始化，此时就是一个 Servlet 实例了，每次请求到来只需要分配线程并调用 _jspService() 方法即可，转换和编译只会发生一次。</p><h2 id="初始化参数"><a href="#初始化参数" class="headerlink" title="初始化参数"></a>初始化参数</h2><p>1、配置 web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>indexJSP<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jsp-file</span>&gt;</span>/index.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">jsp-file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>username<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>ReaJason<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>indexJSP<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/index.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、在 index.jsp 中重写 jspInit() 方法</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>%&gt;<br>&lt;html&gt;<br>    &lt;body&gt;<br>        &lt;%!<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jspInit</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-type">ServletConfig</span> <span class="hljs-variable">sConfig</span> <span class="hljs-operator">=</span> getServletConfig();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> sConfig.getInitParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>                <span class="hljs-type">ServletContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> getServletContext();<br>                ctx.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, username);<br>            &#125;<br>        %&gt;<br><br>        &lt;p&gt;初始化参数为：&lt;%= application.getAttribute(<span class="hljs-string">&quot;username&quot;</span>)%&gt;&lt;/p&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="JSP-中的属性"><a href="#JSP-中的属性" class="headerlink" title="JSP 中的属性"></a>JSP 中的属性</h2><ol><li>PageContext pageContext</li><li>HttpSession session</li><li>ServletContext application</li><li>ServletConfig config</li><li>JspWriter out</li></ol><p>PageContext 可以得到任意作用域的属性。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%-- 设置页面作用域属性 --%&gt;<br>&lt;% pageContext.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;ReaJason&quot;</span>) %&gt;<br><br>&lt;%-- 设置会话作用域属性 --%&gt;<br>&lt;% pageContext.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;ReaJason&quot;</span>,PageContext.SESSION_SCOPE) %&gt;<br><br>&lt;%-- 设置应用作用域属性 --%&gt;<br>&lt;% pageContext.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;ReaJason&quot;</span>,PageContext.APPLICATION_SCOPE) %&gt;<br></code></pre></td></tr></table></figure><p>关闭脚本元素：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">jsp-config</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">jsp-property-group</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scripting-invalid</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">scripting-invalid</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">jsp-property-group</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">jsp-config</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p><strong>page 指令</strong>：定义页面特定的属性，如字符编码、页面响应的内容类型、以及这个页面是否有隐式的会话对象。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;% page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.*&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><ul><li>import，为 jsp 导入其他类</li><li>contentType，定义 jsp 响应的 MIME 内容和字符编码，如 <code>text/html; charset=utf-8</code></li><li>isELIgnored，是否忽略 EL 表达式</li><li>isErrorPage，当前页面是否是错误页面</li><li>errorPage，定义一个资源 URL，如果发生错误则前往那里</li></ul><p><strong>taglib 指定</strong>：定义 jsp 可以使用的标记库</p><p><strong>include 指令</strong>：定义在转换时增加到当前页面的文本和代码。</p><h2 id="EL-表达式"><a href="#EL-表达式" class="headerlink" title="EL 表达式"></a>EL 表达式</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!-- EL 表达式 --&gt;<br>$&#123;applicationScope.mail&#125;<br><br>&lt;%= application.getAttribute(<span class="hljs-string">&quot;email&quot;</span>)%&gt;<br></code></pre></td></tr></table></figure><p>禁用 EL 表达式：<code>&lt;%@ page isELIgnored=&quot;true&quot; %&gt;</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!-- EL 表达式使用 [] 取值时，变量可以是Map、bean、List 或数组 --&gt;<br>$&#123;list[<span class="hljs-number">0</span>]&#125;<br></code></pre></td></tr></table></figure><p>对于对象取值直接 . 获取即可，如 student.name、student.age</p><p>EL 隐式对象：</p><p>作用域相关：</p><ul><li>pageScope</li><li>requestScope</li><li>sessionScope</li><li>applicationScope</li></ul><p><strong>EL 表达式只能从域对象中获取数据，顺序依次为</strong> </p><p><strong>pageContext -&gt; request -&gt; session -&gt; application</strong></p><p>请求参数：</p><ul><li>param</li><li>paramValues</li></ul><p>请求头部：</p><ul><li>header</li><li>headerValues</li></ul><p>其他：</p><ul><li>cookie</li><li>initParam：上下文参数</li><li>pageContext</li></ul><h2 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h2><p>1、使用 bean</p><p>servlet：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>    <span class="hljs-keyword">throws</span> IOException, ServletException<br>&#123;<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">1</span>);<br>    request.setAttribute(<span class="hljs-string">&quot;p&quot;</span>, p);<br><br>    <span class="hljs-type">RequestDispatcher</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> request.getRequestDispatcher(<span class="hljs-string">&quot;result.jsp&quot;</span>);<br>    view.forward(request,response);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>result.jsp：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>%&gt;<br>&lt;html&gt;<br>    &lt;body&gt;<br>        &lt;jsp:useBean id=<span class="hljs-string">&quot;p&quot;</span> class=<span class="hljs-string">&quot;top.reajason.bean.Person&quot;</span> scope=<span class="hljs-string">&quot;request&quot;</span> /&gt;<br>        Person create by servlet: &lt;jsp:getProperty name=<span class="hljs-string">&quot;p&quot;</span> property=<span class="hljs-string">&quot;name&quot;</span> /&gt;<br>        &lt;%= request.getAttribute(<span class="hljs-string">&quot;p&quot;</span>)%&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>设置属性：</p><p>scope 默认为 page</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:useBean id=<span class="hljs-string">&quot;person&quot;</span> class=<span class="hljs-string">&quot;top.reajason.bean.Person&quot;</span> scope=<span class="hljs-string">&quot;page&quot;</span>&gt;<br>    &lt;jsp:setProperty name=<span class="hljs-string">&quot;person&quot;</span> property=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;Fred&quot;</span> /&gt;<br>&lt;/jsp:useBean&gt;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!-- 使用 type 标记声明类型，使用 class 标记 <span class="hljs-keyword">new</span> 的类型 --&gt;<br>&lt;jsp:useBean id=<span class="hljs-string">&quot;employee&quot;</span> type=<span class="hljs-string">&quot;top.reajason.bean.Person&quot;</span> class=<span class="hljs-string">&quot;top.reajason.bean.Employee&quot;</span> scope=<span class="hljs-string">&quot;page&quot;</span>&gt;<br>    &lt;jsp:setProperty name=<span class="hljs-string">&quot;employee&quot;</span> property=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;Fred&quot;</span> /&gt;<br>&lt;/jsp:useBean&gt;<br></code></pre></td></tr></table></figure><p>使用 jsp:useBean 接参数：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!-- 表单提交时设置的 name 与 javabean 变量名相同 --&gt;<br>&lt;jsp:useBean id=<span class="hljs-string">&quot;person&quot;</span> class=<span class="hljs-string">&quot;top.reajason.bean.Person&quot;</span> scope=<span class="hljs-string">&quot;page&quot;</span>&gt;<br>    &lt;jsp:setProperty name=<span class="hljs-string">&quot;person&quot;</span> property=<span class="hljs-string">&quot;*&quot;</span>/&gt;<br>&lt;/jsp:useBean&gt;<br></code></pre></td></tr></table></figure><p>2、可重用模板</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!-- 编译时转换，直接将 Header.jsp 复制到当前页面中 --&gt;<br>&lt;%@ include file=<span class="hljs-string">&quot;Header.jsp&quot;</span> %&gt;<br><br>&lt;!-- 运行时添加，文件体积更小，性能有开销 --&gt;<br>&lt;jsp:include page=<span class="hljs-string">&quot;Header.jsp&quot;</span> /&gt;<br><br>&lt;!-- 添加参数 --&gt;<br>&lt;jsp:include page=<span class="hljs-string">&quot;Header.jsp&quot;</span>&gt;<br>&lt;jsp:param name=<span class="hljs-string">&quot;subTitle&quot;</span> value=<span class="hljs-string">&quot;hello World&quot;</span>/&gt;<br>&lt;/jsp:include&gt;<br><br>&lt;!--  Header.jsp --&gt;<br>&lt;p&gt;<br>    $&#123;param.subTitle&#125;<br>&lt;/p&gt;<br></code></pre></td></tr></table></figure><h2 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h2><p>安装：需要 jstl 和 standard 两个 lib 文件</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!-- 引入 --&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><p>c:out</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:out value=<span class="hljs-string">&quot;&lt;b&gt;&lt;/b&gt;&quot;</span> <span class="hljs-keyword">default</span>=<span class="hljs-string">&quot;默认值&quot;</span> /&gt;<br>&lt;c:out value=<span class="hljs-string">&quot;$&#123;EL表达式值替换&#125;&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>c:foreach</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:foreach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;movie&quot;</span> items=<span class="hljs-string">&quot;$&#123;moveiList&#125;&quot;</span> varStatus=<span class="hljs-string">&quot;movieLoopCount&quot;</span>&gt;<br>     &lt;tr&gt;<br>         &lt;!-- 当前遍历索引 <span class="hljs-number">1</span> 开始 --&gt;<br>        &lt;td&gt;$&#123;movieLoopCount.count&#125;&lt;/td&gt;<br>    &lt;/tr&gt;<br>    &lt;tr&gt;<br>        &lt;td&gt;$&#123;movie&#125;&lt;/td&gt;<br>    &lt;/tr&gt;<br>&lt;/c:foreach&gt;<br></code></pre></td></tr></table></figure><p>c:if</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;true&quot;</span>&gt;<br>    &lt;jsp:include page=<span class="hljs-string">&quot;input.jsp&quot;</span> /&gt;<br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat</title>
    <link href="/2021/11/22/JavaWebTomcat/"/>
    <url>/2021/11/22/JavaWebTomcat/</url>
    
    <content type="html"><![CDATA[<h2 id="Tomcat-安装"><a href="#Tomcat-安装" class="headerlink" title="Tomcat 安装"></a>Tomcat 安装</h2><blockquote><p>官网：<a href="http://tomcat.apache.org/">Apache Tomcat® - Welcome!</a></p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><code>/bin</code>：可执行文件，包括启动（startup.bat）和停止（shutdown.bat）脚本</li><li><code>/conf</code>：配置文件</li><li><code>/lib</code>：运行依赖 jar 包</li><li><code>/logs</code>：日志文件</li><li><code>/webapps</code>：存放 java web 项目资源 </li><li><code>/work</code>：工作目录，存放 jsp 翻译为 servlet 的源码和 session 钝化的目录</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1、启动和停止-Tomcat"><a href="#1、启动和停止-Tomcat" class="headerlink" title="1、启动和停止 Tomcat"></a>1、启动和停止 Tomcat</h3><ul><li>配置 JAVA_HOME 环境变量</li><li>双击 &#x2F;bin&#x2F;startup.bat 即可启动服务</li><li>双击 &#x2F;bin&#x2F;shutdown.bat 即可停止服务</li></ul><h2 id="2、修改端口号"><a href="#2、修改端口号" class="headerlink" title="2、修改端口号"></a>2、修改端口号</h2><p>配置文件位置：<code>/conf/server.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- port 为端口号设置，重启 Tomcat 生效 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3、启动工程"><a href="#3、启动工程" class="headerlink" title="3、启动工程"></a>3、启动工程</h2><ol><li><p>将工程文件目录直接移动到 &#x2F;webapps 下，访问 <code>ip:port/&#123;工程文件目录名&#125;</code> 即可访问</p></li><li><p>在 <code>/conf/Catalina/localhost</code> 下新建一个 xml 文件配置工程文件，文件名和 path 一致</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- path 配置访问路径，实际上以 xml 的文件名为访问路径？</span><br><span class="hljs-comment"> docBase 配置工程文件目录 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/servlet&quot;</span> </span><br><span class="hljs-tag">         <span class="hljs-attr">docBase</span>=<span class="hljs-string">&quot;D:\Study\Java\apache-tomcat-8.5.73\servlet&quot;</span> </span><br><span class="hljs-tag">         /&gt;</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL8</title>
    <link href="/2021/11/18/MySQL8Learning/"/>
    <url>/2021/11/18/MySQL8Learning/</url>
    
    <content type="html"><![CDATA[<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>1、安装 docker-compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载文件</span><br>sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<br><span class="hljs-comment"># 设置权限</span><br>sudo <span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br><span class="hljs-comment"># 设置软链接</span><br>sudo <span class="hljs-built_in">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose<br><span class="hljs-comment"># 检测是否成功</span><br>docker-compose --version<br></code></pre></td></tr></table></figure><p>2、构建文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 新建 data、conf、init 文件夹用于挂载</span><br><span class="hljs-built_in">mkdir</span> -r /usr/local/mysql8docker/&#123;data,conf,init&#125;<br><span class="hljs-comment"># 编写 docker-compose.yml 文件</span><br><span class="hljs-built_in">cd</span> /usr/local/mysql8docker<br>vim docker-compose.yml<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">db:</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:latest</span><br>  <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql8</span><br>  <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>  <span class="hljs-attr">command:</span> <span class="hljs-string">--default-authentication-plugin=mysql_native_password</span><br>  <span class="hljs-attr">environment:</span><br>    <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>    <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">MYSQL_DATABASE:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">3306</span><span class="hljs-string">:3306</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./data:/var/lib/mysql&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./conf:/etc/mysql/conf.d&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./init:/docker-entrypoint-initdb.d&quot;</span><br></code></pre></td></tr></table></figure><p>3、运行容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 构建容器并后台运行</span><br>docker-compose up -d<br><br><span class="hljs-comment"># 查看容器运行情况</span><br>docker container <span class="hljs-built_in">ls</span><br><br><span class="hljs-comment"># 以可交互终端 bash 进入 mysql8 容器</span><br>docker <span class="hljs-built_in">exec</span> -it mysql8 bash<br><br><span class="hljs-comment"># 登录 root 用于并指定密码为 root</span><br>mysql -uroot -proot<br></code></pre></td></tr></table></figure><p>4、配置 mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 显示 mysql 字符集<br>show variables like &#x27;character_%&#x27;;<br># 显示 mysql 校对集<br>show variables like &#x27;collation_%&#x27;;<br># 新建 reajason 用户，% 指定所有 ip 可连接，设置密码为 123456<br>create user reajason@&#x27;%&#x27; identified by &#x27;123456&#x27;;<br># 将所有权限授予 reajason<br>grant all privileges on *.* to &#x27;reajason&#x27;;<br># 刷新权限<br>flush privileges;<br><br># root 用户<br>grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;root&#x27;;<br></code></pre></td></tr></table></figure><h2 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h2><p>1、简单使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 使用别名，表明和列名都可使用别名，使用 AS 关键字<br>SELECT<br>employee_id,<br>first_name ,<br>last_name ,<br>salary * 1.05 AS &quot;totalSalary&quot;<br>FROM<br>employees;<br><br># 表使用别名<br>SELECT<br>e.employee_id ,<br>e.email<br>FROM<br>employees e;<br><br># 去重 DISTINCT 关键字，可以对多列去重，多列全不同才去掉<br>SELECT<br>DISTINCT e.department_id<br>FROM<br>employees e;<br><br># 空值参与运算也为空值（NULL）<br>SELECT<br>e.employee_id ,<br>e.salary * (1 + e.commission_pct) * 12 &quot;年工资&quot;<br>FROM<br>employees e;<br><br># 使用反引号，规避名称为关键字的情况<br>SELECT * FROM `order`;<br><br># 显示表结构，显示表列名、数据类型、键约束等信息<br>DESCRIBE employees;<br>DESC employees;<br></code></pre></td></tr></table></figure><p>2、使用 where</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1.查询员工12个月的工资总和，并起别名为ANNUAL SALARY<br>SELECT<br>e.employee_id ,<br>e.salary * 12 AS &quot;ANNUAL SALARY&quot;<br>FROM<br>employees e;<br># 2.查询employees表中去除重复的job_id以后的数据<br>SELECT<br>DISTINCT e.job_id<br>FROM<br>employees e;<br># 3.查询工资大于12000的员工姓名和工资<br>SELECT<br>e.first_name ,<br>e.last_name,<br>e.salary<br>FROM<br>employees e<br>WHERE<br>e.salary &gt; 12000;<br># 4.查询员工号为176的员工的姓名和部门号<br>SELECT<br>e.last_name,<br>e.department_id<br>FROM<br>employees e<br>WHERE<br>e.employee_id = 176;<br># 5.显示表 departments 的结构，并查询其中的全部数据<br>DESC departments;<br><br>SELECT * FROM departments;<br></code></pre></td></tr></table></figure><p>3、运算符</p><ul><li><strong>NULL 参与运算结果为 NULL</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 运算符 +、-、*、/（DIV）、%（MOD）<br>SELECT 2 DIV 1 FROM DUAL;<br>SELECT -1 MOD 8 FROM DUAL;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 比较运算符 =、&lt;=&gt;（安全等于）、&lt;&gt;（不等于）、!=、&gt;、&lt;、&gt;=、&lt;=<br># = NULL 不会有结果，而 &lt;=&gt; NULL 则会输出为 NULL 的值<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># IS NULL（为 NULL）、IS NOT NULL（不为 NULL）、ISNULL()（为 NULL）<br>SELECT NULL IS NULL FROM DUAL;<br># LEAST(value1,value2,...)--获取最小、GREATEST(value1,value2,...)--获取最大<br><br># BETWEEN ... AND，包括边界值<br># 1、查询工资 6000 到 8000 的的员工信息（不能调换两个值的位置）<br>SELECT * FROM employees e WHERE salary BETWEEN 6000 AND 8000;<br>SELECT * FROM employees e WHERE salary&gt;=6000 AND salary&lt;=8000;<br># 2、查询工资低于 6000 以及 高于 8000 的员工信息<br>SELECT * FROM employees e WHERE salary NOT BETWEEN 6000 AND 8000;<br>SELECT * FROM employees e WHERE salary&lt;6000 OR salary&gt;8000;<br><br># IN(set)、NOT IN(set)<br><br><br># LIKE 模糊查询，% 匹配任意字符、_ 匹配单个字符<br><br># REGEXP 正则表达式<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 逻辑运算符 NOT、AND、OR、XOR<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 位运算符 &amp;、|、^、~、&gt;&gt;、&lt;&lt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1.选择工资不在5000到12000的员工的姓名和工资<br>SELECT e.last_name, e.salary FROM employees e WHERE e.salary NOT BETWEEN 5000 AND 12000;<br># 2.选择在20或50号部门工作的员工姓名和部门号<br>SELECT e.last_name ,e.department_id FROM employees e WHERE e.department_id IN (20,50);<br># 3.选择公司中没有管理者的员工姓名及job_id<br>SELECT e.last_name ,e.job_id FROM employees e WHERE e.manager_id IS NULL;<br># 4.选择公司中有奖金的员工姓名，工资和奖金级别<br>SELECT e.last_name ,e.salary ,e.commission_pct FROM employees e WHERE e.commission_pct IS NOT NULL;<br># 5.选择员工姓名的第三个字母是a的员工姓名<br>SELECT e.last_name FROM employees e WHERE e.last_name LIKE &#x27;__a%&#x27;;<br># 6.选择姓名中有字母a和k的员工姓名<br>SELECT e.last_name FROM employees e WHERE e.last_name LIKE &#x27;%a%k%&#x27;OR  e.last_name LIKE &#x27;%k%a%&#x27;;<br># 7.显示出表 employees 表中 first_name 以 &#x27;e&#x27;结尾的员工信息<br>SELECT * FROM employees e WHERE e.first_name LIKE &#x27;%e&#x27;;<br># 8.显示出表 employees 部门编号在 80-100 之间的姓名、工种<br>SELECT e.last_name,e.job_id FROM employees e WHERE department_id BETWEEN 80 AND 100;<br># 9.显示出表 employees 的 manager_id 是 100,101,110 的员工姓名、工资、管理者id<br>SELECT e.last_name ,e.salary ,e.manager_id FROM employees e WHERE e.manager_id IN (100,101,110);<br></code></pre></td></tr></table></figure><h2 id="Order"><a href="#Order" class="headerlink" title="Order"></a>Order</h2><p>不使用 ORDER BY 时默认排序为数据添加的顺序</p><p>使用 ORDER BY 不指定排序规则默认为升序(ASC)，指定降序使用 DESC</p><p>列别名可以在 ORDER BY 中使用不能在 WHERE 使用</p><p>可以指定多个排序列，从前往后进行排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 指定以 salary 排序<br>SELECT * FROM employees e WHERE e.salary &gt; 5000 ORDER BY e.salary;<br>SELECT * FROM employees e WHERE e.salary &gt; 5000 ORDER BY e.salary DESC;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询员工的姓名和部门号和年薪，按年薪降序,按姓名升序显示<br>SELECT e.last_name,e.salary * 12 annual_sal FROM employees e ORDER BY e.salary DESC, e.last_name;<br><br># 查询邮箱中包含 e 的员工信息，并先按邮箱的字节数降序，再按部门号升序<br>SELECT * FROM employees e WHERE e.email LIKE &#x27;%e%&#x27; ORDER BY LENGTH(e.email) DESC, e.department_id;<br></code></pre></td></tr></table></figure><h2 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h2><p>实现分页，LIMIT(offset, size)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL"># 每页 20 条记录，显示第 1、2 页<br>SELECT e.employee_id, e.last_name FROM employees e LIMIT 0, 20;<br>SELECT e.employee_id, e.last_name FROM employees e LIMIT 20, 20;<br><br># 显示前 10 条数据<br>SELECT e.employee_id, e.last_name,e.salary FROM employees e <br>ORDER BY e.salary DESC <br>LIMIT 10;<br><br># MySQL8 LIMIT ... OFFSET ...<br># 获取 21、22 位置的数据<br>LIMIT 2 OFFSET 20; <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 选择工资不在 8000 到 17000 的员工的姓名和工资，按工资降序，显示第21到40位置的数据<br>SELECT e.last_name,e.salary FROM employees e WHERE e.salary NOT BETWEEN 8000 AND 17000 ORDER BY e.salary DESC LIMIT 20,20;<br></code></pre></td></tr></table></figure><h2 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 当使用 , 连接两表产生笛卡尔积，使用 WHERE 条件可获取正确需要的数据<br>SELECT * FROM employees e,departments d;<br><br>SELECT * FROM employees e,departments d WHERE e.department_id = d.department_id;<br><br># 自连接<br><br># 内连接，... JOIN ... ON ...<br># 左外连接，保留左表的所有行，右表没数据的使用 NULL 填充，... LEFT JOIN ...ON ...<br># 右外连接，反之，... LEFT JOIN ...ON ...<br></code></pre></td></tr></table></figure><p>UNION 返回两个查询的结果集并集，去除重复记录</p><p>UNION ALL 返回两个查询的结果集并集，不去重</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 自然连接，... NATUAL JOIN ...，自动查询两张表相同字段进行等值连接<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1.显示所有员工的姓名，部门号和部门名称。<br>SELECT e.last_name ,e.department_id,d.department_name <br>FROM employees e LEFT JOIN departments d <br>ON e.department_id = d.department_id;<br><br># 2.查询90号部门员工的job_id和90号部门的location_id<br>SELECT e.job_id, d.location_id FROM employees e , departments d <br>WHERE e.department_id = d.department_id <br>AND e.department_id = 90;<br><br># 3.选择所有有奖金的员工的 last_name , department_name , location_id , city<br>SELECT e.last_name , d.department_name, l.location_id, l.city <br>FROM employees e LEFT JOIN departments d ON  e.department_id = d.department_id <br>LEFT JOIN locations l ON d.location_id = l.location_id<br>WHERE e.commission_pct IS NOT NULL;<br><br># 4.选择city在Toronto工作的员工的 last_name , job_id , department_id , department_name<br>SELECT e.last_name , e.job_id, d.department_id, d.department_name <br>FROM employees e ,departments d, locations l <br>WHERE e.department_id = d.department_id <br>AND d.location_id = l.location_id<br>AND l.city = &#x27;Toronto&#x27;;<br><br># 5.查询员工所在的部门名称、部门地址、姓名、工作、工资，其中员工所在部门的部门名称为’Executive’<br>SELECT d.department_name,l.street_address , e.last_name, e.job_id, e.salary <br>FROM employees e ,departments d, locations l <br>WHERE d.location_id = l.location_id <br>AND e.department_id = d.department_id <br>AND d.department_name =&#x27;Executive&#x27;;<br><br># 6.选择指定员工的姓名，员工号，以及他的管理者的姓名和员工号，结果类似于下面的格式<br>SELECT e.last_name, e.employee_id AS &quot;EMP#&quot;, m.last_name, m.employee_id AS &quot;Mgr#&quot;<br>FROM employees e LEFT JOIN employees m <br>ON e.manager_id = m.employee_id;<br><br># 7.查询哪些部门没有员工<br>SELECT d.* FROM departments d LEFT JOIN employees e <br>ON d.department_id = e.department_id <br>WHERE e.department_id IS NULL;<br><br># 8. 查询哪个城市没有部门<br>SELECT l.location_id, l.street_address <br>FROM departments d RIGHT JOIN locations l <br>ON d.location_id = l.location_id <br>WHERE d.location_id IS NULL;<br><br># 9. 查询部门名为 Sales 或 IT 的员工信息<br>SELECT e.*,d.department_name FROM employees e, departments d <br>WHERE e.department_id = d.department_id <br>AND d.department_name IN (&#x27;Sales&#x27;, &#x27;IT&#x27;);<br></code></pre></td></tr></table></figure><h2 id="Func"><a href="#Func" class="headerlink" title="Func"></a>Func</h2><p>数值函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>ABS(X) 求绝对值<br>CELING(X) 向上取整<br>FLOOR(X) 向下取整<br>RADN(X) X 为随机数种子的随机数<br>RAND() 0-1 随机数<br>ROUND(X) 四舍五入，取整<br>ROUND(X,Y) 保留 Y 位小数，四舍五入<br>TRUNCATE(X,Y) 保留 Y 位小数，截断<br>三角函数<br>指数对数<br>进制转换<br>*/<br></code></pre></td></tr></table></figure><p>字符串函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>ASCII(C) 获取 c 的 ascii 码值<br>CHAR_LENGTH(S) 获取字符长度<br>LENGTH(S) 获取字节数（和编码有关）<br>CONCAT(s1,s2...) 字符串拼接<br>CONCAT_WS(sep,s1,s2...) 使用 sep 分隔符连接字符串<br>INSERT(str,index,length,reolacestr) 字符索引 1 开始<br>REPLACE(str,a,b) 字符串替换<br>UPPLER(S) 转大写<br>LOWER(S) 转小写<br>LEFT(S,n) 取左边 n 个<br>RIGHT(S,n) 取右边 n 个<br>LPAD(S,length,pad) 扩展 s 长度，左边使用 pad 补充<br>RPAD(S,length,pad) 扩展 s 长度，右边使用 pad 补充<br>TRIM(S) 去除字符左右的空白字符<br>REPEAT(S,n) 重复 n 次<br>SUBSTR(S,index,length) 取子串<br>LOCATE(substr,S) 查找子串<br>*/<br></code></pre></td></tr></table></figure><p>日期时间函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>CURDATE() 当前日期，年月日<br>CURTIME() 当前时间，时分秒<br>NOW() 当前系统时间<br>UTC_DATE()<br>UTC_TIME()<br>UNIX_TIMESTAMP() 时间戳<br>UNIX_TIMESTAMP(DATE) 将 date 转为时间戳<br>FROM_UNIXTIME(TIMESTAMP) 将时间戳转为时间<br>YEAR(DATE)/MONTH(DATE)/DAY(DATE)<br>HOUR(TIME)/MINUTE(TIME)/SECOND(TIME)<br>TIME_TO_SEC(TIME) 时间转为秒钟<br>SEC_TO_TIME(SECONDS) 秒转时间<br>ADDDATE(DATE,INTERVAL expr type) 增加日期<br>SUBDATE(DATE, INTERVAL expr type) 减少日期<br>ADDTIME(time1,time2)<br>SUBTIME(time1,time2)<br>DATEDIFF(date1,date2)<br>TIMEDIFF(time1,time2)<br>DATE_FORMAT(date,format) %Y-%m-%d %H:%i:%s<br>TIME_FORMAT(time,format)<br>STR_TO_DATE(str,format)<br>*/<br></code></pre></td></tr></table></figure><p>流程控制处理函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>如果 value 为 true，则 value1，反之 value2<br>IF(value,value1,value2) <br><br>如果 value1 不为空返回 value1，某则返回 value2<br>IFNULL(value1,value2) <br><br>CASE <br>WHEN condition1 THEN result1<br>WHEN condition2 THEN result2<br>ELSE result<br>END<br><br>CASE expr<br>WHEN value1 THEN result1<br>WHEN value2 THEN result2<br>ELSE result<br>END<br>*/<br></code></pre></td></tr></table></figure><p>加密与解密函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>PASSWORD(str)  <br>MD5(str) <br>SHA(str) <br>ENCODE(value,seed) 以 seed 作为加密密码加密 value<br>DECODE(value,seed) 以 seed 作为加密密码解密 value<br>*/<br></code></pre></td></tr></table></figure><p>MySQL 相关函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>VERSION() 返回 mysql 版本号<br>CONNECTION_ID() 返回 mysql 连接数<br>DATABASE() 返回当前所在数据库<br>USER() 返回当前连接用户<br>CHARSET(value) 返回 value 字符集<br>COLLATION(value) 返回 value 校对规则<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1.显示系统时间(注：日期+时间)<br>SELECT NOW() FROM DUAL;<br><br># 2.查询员工号，姓名，工资，以及工资提高百分之20%后的结果（new salary）<br>SELECT e.employee_id,e.last_name, e.salary, <br>e.salary * 1.2 &quot;new salary&quot; <br>FROM employees e;<br><br># 3.将员工的姓名按首字母排序，并写出姓名的长度（length）<br>SELECT e.last_name, LENGTH(e.last_name) FROM employees e <br>ORDER BY e.last_name DESC;<br><br># 4.查询员工id,last_name,salary，并作为一个列输出，别名为OUT_PUT<br>SELECT CONCAT(employee_id, &#x27;,&#x27; , last_name , &#x27;,&#x27;, salary) OUT_PUT FROM employees e;<br><br># 5.查询公司各员工工作的年数、工作的天数，并按工作年数的降序排序<br>SELECT e.hire_date, YEAR(NOW()) - YEAR(e.hire_date) years, <br>DATEDIFF(NOW(),e.hire_date) <br>FROM employees e<br>ORDER BY years DESC;<br><br># 6.查询员工姓名，hire_date , department_id，满足以下条件：雇用时间在1997年之后，department_id 为80 或 90 或110, commission_pct不为空<br>SELECT e.employee_id,e.hire_date,e.department_id <br>FROM employees e<br>WHERE e.commission_pct IS NOT NULL<br>AND e.department_id in (80, 90, 100)<br>AND YEAR(e.hire_date) &gt;= 1997;<br><br># 7.查询公司中入职超过10000天的员工姓名、入职时间<br>SELECT e.employee_id ,e.hire_date FROM employees e <br>WHERE DATEDIFF(NOW(),e.hire_date) &gt; 10000;<br><br># 8、使用 case when<br>SELECT e.last_name,e.job_id,<br>(CASE e.job_id WHEN &#x27;AD_PRES&#x27; THEN &#x27;A&#x27;<br>WHEN &#x27;ST_MAN&#x27; THEN &#x27;B&#x27;<br>WHEN &#x27;IT_PROG&#x27; THEN &#x27;C&#x27;<br>WHEN &#x27;SA_REP&#x27; THEN &#x27;D&#x27;<br>WHEN &#x27;ST_CLERK&#x27; THEN &#x27;E&#x27;<br>ELSE &#x27;F&#x27;<br>END) Grade<br>FROM employees e;<br></code></pre></td></tr></table></figure><p>聚合函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*  不能在 WHERE 使用聚合函数，因为 WHERE 的数据只有一行没有多行<br>AVG() 对数值型使用，求平均<br>SUM() 对数值型使用，求和<br>MIN() 对任意类型，取最小<br>MAX() 对任意类型，取最大<br>COUNT(*) 返回记录总数，包括 NULL 行<br>COUNT(ecpr) 返回 expr 不为 NULL 行<br>*/<br></code></pre></td></tr></table></figure><h2 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h2><p>GROUP BY 分组，和聚合函数结合使用</p><p>可以对多个列进行分组，分组的列必须列出来，不分组的列需要使用聚合函数来使得分组后的数据进行处理</p><p>WITH ROLLUP 在分组之后会增加一条记录，计算查询记录总和，不可与 ORDER BY 同时出现</p><p>HAVING 分组后过滤，必须在 GROUP BY 后使用</p><p>SELECT 格式与执行顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#（1）from：从哪些表中筛选<br>#（2）on：关联多表查询时，去除笛卡尔积<br>#（3）where：从表中筛选的条件<br>#（4）group by：分组依据<br>#（5）having：在统计结果中再次筛选<br>#（6）order by：排序<br>#（7）limit：分页<br><br># 执行顺序：FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT 的字段 -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#2.查询公司员工工资的最大值，最小值，平均值，总和<br>SELECT MAX(e.salary),MIN(e.salary),AVG(e.salary),SUM(e.salary) FROM employees e;<br><br>#3.查询各job_id的员工工资的最大值，最小值，平均值，总和<br>SELECT e.job_id, MAX(e.salary),MIN(e.salary),AVG(e.salary),SUM(e.salary) <br>FROM employees e GROUP BY e.job_id;<br><br>#4.选择具有各个job_id的员工人数<br>SELECT e.job_id, COUNT(*)<br>FROM employees e GROUP BY e.job_id;<br><br># 5.查询员工最高工资和最低工资的差距（DIFFERENCE）<br>SELECT MAX(e.salary) - MIN(e.salary) DIFFERENCE <br>FROM employees e;<br><br># 6.查询各个管理者手下员工的最低工资，其中最低工资不能低于6000，没有管理者的员工不计算在内<br>SELECT e.manager_id, MIN(e.salary) minS FROM employees e <br>WHERE e.manager_id IS NOT NULL<br>GROUP BY e.manager_id<br>HAVING minS &gt; 6000;<br><br># 7.查询所有部门的名字，location_id，员工数量和平均工资，并按平均工资降序<br>SELECT d.department_name,d.location_id, COUNT(e.employee_id) counts, AVG(e.salary) avgS<br>FROM employees e, departments d<br>WHERE e.department_id = d.department_id <br>GROUP BY d.department_name,d.location_id<br>ORDER BY avgS;<br><br># 8.查询每个工种、每个部门的部门名、工种名和最低工资<br>SELECT d.department_name,e.job_id,MIN(e.salary)<br>FROM departments d LEFT JOIN employees e<br>ON e.department_id = d.department_id<br>GROUP BY d.department_name,e.job_id<br></code></pre></td></tr></table></figure><h2 id="Subquery"><a href="#Subquery" class="headerlink" title="Subquery"></a>Subquery</h2><p>子查询要包含在括号内</p><p>将子查询放在比较条件的右侧</p><p>单行操作符对应单行子查询，多行操作符对应多行子查询</p><p>ANY 与子查询某一个值进行比较</p><p>ALL 与子查询所有值进行比较</p><p>EXISTS 子查询满足条件返回 true</p><p>NOT EXISTS 子查询不满足条件，返回 true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#1.查询和Zlotkey相同部门的员工姓名和工资<br>SELECT * FROM employees e WHERE e.department_id = (<br>SELECT e.department_id FROM employees e WHERE e.last_name = &#x27;Zlotkey&#x27;<br>);<br><br>#2.查询工资比公司平均工资高的员工的员工号，姓名和工资。<br>SELECT e.employee_id,e.last_name ,e.salary <br>FROM employees e <br>WHERE e.salary &gt; (<br>SELECT AVG(e.salary) FROM employees e<br>);<br><br>#3.选择工资大于所有JOB_ID = &#x27;SA_MAN&#x27;的员工的工资的员工的last_name, job_id, salary<br>SELECT e.last_name ,e.job_id ,e.salary <br>FROM employees e <br>WHERE e.salary &gt; ALL(<br>SELECT e.salary <br>FROM employees e <br>WHERE e.job_id = &#x27;SA_MAN&#x27;<br>);<br><br>#4.查询和姓名中包含字母u的员工在相同部门的员工的员工号和姓名<br>SELECT * FROM employees e<br>WHERE e.department_id IN (<br>SELECT e.department_id <br>FROM employees e <br>WHERE e.last_name LIKE &#x27;%u%&#x27;<br>);<br><br>#5.查询在部门的location_id为1700的部门工作的员工的员工号<br>SELECT e.employee_id <br>FROM employees e <br>WHERE e.department_id IN (<br>SELECT d.department_id <br>FROM departments d <br>WHERE d.location_id = 1700<br>);<br><br><br>#6.查询管理者是King的员工姓名和工资<br>SELECT e.last_name, e.salary <br>FROM employees e <br>WHERE e.manager_id IN (<br>SELECT e.employee_id <br>FROM employees e <br>WHERE e.last_name = &#x27;King&#x27;<br>);<br><br><br>#7.查询工资最低的员工信息: last_name, salary<br>SELECT e.last_name, e.salary <br>FROM employees e <br>WHERE e.salary = (<br>SELECT MIN(salary) <br>FROM employees<br>);<br><br>#8.查询平均工资最低的部门信息<br>SELECT * FROM departments d WHERE d.department_id = (<br>SELECT e.department_id FROM employees e <br>GROUP BY e.department_id <br>ORDER BY AVG(e.salary) LIMIT 1<br>);<br><br>#9.查询平均工资最低的部门信息和该部门的平均工资（相关子查询）<br><br>SELECT d.*,t.avgS<br>FROM departments d,(<br>SELECT e.department_id,AVG(e.salary) avgS FROM employees e <br>GROUP BY e.department_id <br>ORDER BY AVG(e.salary) LIMIT 1<br>) t WHERE d.department_id = t.department_id;<br><br><br>#10.查询平均工资最高的 job 信息<br>SELECT * FROM jobs j WHERE j.job_id = (<br>SELECT e.job_id <br>FROM employees e <br>GROUP BY e.job_id <br>ORDER BY AVG(e.salary) DESC <br>LIMIT 1<br>);<br><br>#11.查询平均工资高于公司平均工资的部门有哪些?<br>SELECT e.department_id FROM employees e<br>WHERE e.department_id IS NOT NULL<br>GROUP BY e.department_id <br>HAVING AVG(e.salary) &gt; (SELECT AVG(e.salary) FROM employees e);<br><br>#12.查询出公司中所有 manager 的详细信息<br>SELECT DISTINCT e.* <br>FROM employees e ,employees m <br>WHERE e.employee_id = m.manager_id; <br><br>SELECT * FROM employees e WHERE EXISTS (<br>SELECT * FROM employees e2 <br>WHERE e2.manager_id = e.employee_id<br>);<br><br>#13.各个部门中 最高工资中最低的那个部门的 最低工资是多少?<br>SELECT MIN(e.salary) FROM employees e WHERE e.department_id = (<br>SELECT e.department_id FROM employees e <br>GROUP BY e.department_id <br>ORDER BY MAX(e.salary) LIMIT 1<br>);<br><br><br>#14.查询平均工资最高的部门的 manager 的详细信息: last_name, department_id, email, salary<br>SELECT e.last_name ,e.department_id ,e.email ,e.salary <br>FROM employees e <br>WHERE e.employee_id IN (<br>SELECT e.manager_id FROM  employees e <br>WHERE e.department_id = (<br>SELECT e.department_id <br>FROM employees e <br>GROUP BY e.department_id <br>ORDER BY AVG(e.salary) DESC <br>LIMIT 1<br>));<br><br><br>#15. 查询部门的部门号，其中不包括job_id是&quot;ST_CLERK&quot;的部门号<br>SELECT * FROM departments d <br>WHERE d.department_id NOT IN (<br>SELECT e.department_id <br>FROM employees e <br>WHERE e.job_id = &#x27;ST_CLERK&#x27;<br>);<br><br><br>#16. 选择所有没有管理者的员工的last_name<br>SELECT e.last_name FROM employees e WHERE e.manager_id IS NULL;<br><br>SELECT e.last_name<br>FROM employees e<br>WHERE NOT EXISTS (<br>SELECT * FROM employees e1<br>WHERE e.manager_id = e1.employee_id<br>);<br><br>#17．查询员工号、姓名、雇用时间、工资，其中员工的管理者为 &#x27;De Haan&#x27;<br>SELECT e.employee_id ,e.last_name ,e.hire_date ,e.salary <br>FROM employees e <br>WHERE e.manager_id = (<br>SELECT e.employee_id <br>FROM employees e <br>WHERE e.last_name = &#x27;De Haan&#x27;<br>);<br><br>#18.查询各部门中工资比本部门平均工资高的员工的员工号, 姓名和工资（相关子查询）<br>SELECT e.employee_id ,e.last_name ,e.salary <br>FROM employees e <br>WHERE e.salary &gt; (<br>SELECT AVG(e1.salary) FROM employees e1 <br>WHERE e1.department_id = e.department_id <br>GROUP BY e1.department_id<br>);<br><br><br>#19.查询每个部门下的部门人数大于 5 的部门名称（相关子查询）<br>SELECT * FROM departments d WHERE 5 &lt; (<br>SELECT COUNT(*) <br>FROM employees e <br>WHERE e.department_id =d.department_id<br>);<br><br>#20.查询每个国家下的部门个数大于 2 的国家编号（相关子查询）<br>SELECT * FROM countries c , locations l <br>WHERE c.country_id = l.country_id <br>AND 2 &lt; (<br>SELECT COUNT(*) <br>FROM departments d <br>WHERE d.location_id = l.location_id <br>);<br></code></pre></td></tr></table></figure><h2 id="DATABASE"><a href="#DATABASE" class="headerlink" title="DATABASE"></a>DATABASE</h2><p>创建数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 以默认方式创建数据库<br>CREATE DATABASE mytest;<br><br># 查看数据库创建语句<br>SHOW CREATE DATABASE mytest;<br><br># 创建数据库，存在则不创建，指定字符集和校对规则<br>CREATE DATABASE IF NOT EXISTS mytest2 <br>CHARACTER SET &#x27;utf8mb4&#x27; <br>COLLATE &#x27;utf8mb4_0900_ai_ci&#x27;;<br><br># 切换数据库<br>USE mytest;<br><br># 查看数据库下的表<br>SHOW TABLES;<br>SHOW TABLES FROM mysql;<br><br># 查看当前所在数据库<br>SELECT DATABASE() FROM DUAL;<br></code></pre></td></tr></table></figure><p>修改数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER DATABASE mytest2 CHARACTER SET &#x27;utf8&#x27;;<br></code></pre></td></tr></table></figure><p>删除数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP DATABASE IF EXISTS mytest2;<br></code></pre></td></tr></table></figure><h2 id="TABLE"><a href="#TABLE" class="headerlink" title="TABLE"></a>TABLE</h2><p>创建表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>CREATE TABLE [IF NOT EXISTS] 表名(<br>字段1, 数据类型 [约束条件] [默认值],<br>字段2, 数据类型 [约束条件] [默认值],<br>字段3, 数据类型 [约束条件] [默认值],<br>……<br>[表约束条件]<br>);<br>*/<br><br># 创建表<br>CREATE TABLE emp (<br>    emp_id INT,<br>    emp_name VARCHAR(20),<br>    salary DOUBLE,<br>    birthday DATE<br>);<br><br># 查看表结构<br>DESC emp;<br><br># 使用 AS 基于查询创建表和插入查询到的数据<br>CREATE TABLE dept80<br>AS<br>SELECT employee_id, last_name, salary*12 ANNSAL, hire_date<br>FROM employees<br>WHERE department_id = 80;<br></code></pre></td></tr></table></figure><p>修改表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 添加列<br>ALTER TABLE emp <br>ADD phone_num VARCHAR(14) AFTER emp_name;<br><br># 修改列<br>/*<br>ALTER TABLE 表名 <br>MODIFY 【COLUMN】 字段名1 字段类型 【<br>DEFAULT 默认值】<br>【FIRST|AFTER 字段名2】;<br>*/<br><br>ALTER TABLE dept80<br>MODIFY salary double(9,2) default 1000;<br><br>ALTER TABLE dept80<br>CHANGE department_name dept_name varchar(15);<br><br># 删除列<br>ALTER TABLE emp<br>DROP COLUMN phone_num;<br><br># 重命名表<br>RENAME TABLE emp<br>TO myemp;<br><br># 删除表<br>DROP TABLE IF EXISTS emp;<br><br># 清空表 TRUNCATE 不可回滚，DELETE 有事务可回滚<br>TRUNCATE TABLE emp;<br>DELETE FROM emp;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#1. 创建数据库test01_office,指明字符集为utf8。并在此数据库下执行下述操作<br>CREATE DATABASE test01_office CHARACTER SET &#x27;utf8&#x27;;<br>USE test01_office;<br>#2. 创建表dept01<br>/*<br>字段 类型<br>id INT(7)<br>NAME VARCHAR(25)<br>*/<br>CREATE TABLE dept01 (<br> id INT(7),<br> name VARCHAR(25)<br>);<br><br>#3. 将表departments中的数据插入新表dept02中<br>CREATE TABLE dept02<br>AS<br>SELECT * FROM atguigudb.departments;<br><br>#4. 创建表emp01<br>/*<br>字段 类型<br>id INT(7)<br>first_name VARCHAR (25)<br>last_name VARCHAR(25)<br>dept_id INT(7)<br>*/<br>CREATE TABLE emp01 (<br>id INT(7),<br>first_name VARCHAR(25),<br>last_name VARCHAR(25),<br>dept_id INT(7)<br>);<br><br>DESC emp01;<br>#5. 将列last_name的长度增加到50<br>ALTER TABLE emp01<br>MODIFY last_name VARCHAR(50);<br><br>#6. 根据表employees创建emp02<br>CREATE TABLE emp02<br>AS<br>SELECT * FROM atguigudb.employees;<br><br>#7. 删除表emp01<br>DROP TABLE emp01;<br><br>#8. 将表emp02重命名为emp01<br>RENAME TABLE emp02 TO emp01;<br><br>#9.在表dept02和emp01中添加新列test_column，并检查所作的操作<br>ALTER TABLE dept02 <br>ADD test_column VARCHAR(1);<br>ALTER TABLE emp01 <br>ADD test_column VARCHAR(1);<br>DESC dept02;<br>DESC emp01;<br><br>#10.直接删除表emp01中的列 department_id<br>ALTER TABLE emp01<br>DROP COLUMN department_id;<br></code></pre></td></tr></table></figure><h2 id="RECORD"><a href="#RECORD" class="headerlink" title="RECORD"></a>RECORD</h2><p>插入数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>INSERT INTO 表名(column1 [, column2, …, columnn])<br>VALUES<br>(value1 [,value2, …, valuen]),<br>(value1 [,value2, …, valuen]),<br>……<br>(value1 [,value2, …, valuen]);<br>*/<br><br>/* 使用查询的数据插入表中<br>INSERT INTO 目标表名<br>(tar_column1 [, tar_column2, …, tar_columnn])<br>SELECT<br>(src_column1 [, src_column2, …, src_columnn])<br>FROM 源表名<br>[WHERE condition]<br>*/<br></code></pre></td></tr></table></figure><p>更新数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>UPDATE table_name<br>SET column1=value1, column2=value2, … , column=valuen<br>[WHERE condition]<br>*/<br></code></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>DELETE FROM table_name [WHERE &lt;condition&gt;];<br>*/<br></code></pre></td></tr></table></figure><p>MySQL8计算列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 使用其他列计算而来<br>CREATE TABLE tb1(<br>id INT,<br>a INT,<br>b INT,<br>c INT GENERATED ALWAYS AS (a + b) VIRTUAL<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1、创建数据库test01_library<br>CREATE DATABASE test01_library;<br>USE test01_library;<br># 2、创建表 books<br>CREATE TABLE books(<br>id INT,<br>name VARCHAR(50),<br>authors VARCHAR(100),<br>price FLOAT,<br>pubdate YEAR,<br>note VARCHAR(100),<br>num INT<br>);<br><br>DESC books;<br>SELECT * FROM books;<br># 3、向books表中插入记录<br># 1）不指定字段名称，插入第一条记录<br>INSERT INTO books VALUES(1, &#x27;Tal of AAA&#x27;, &#x27;Dickes&#x27;, 23, 1995, &#x27;novel&#x27;, 11);<br># 2）指定所有字段名称，插入第二记录<br>INSERT INTO books(id, name, authors, price, pubdate, note, num)<br>VALUES (2, &#x27;EmmaT&#x27;, &#x27;Jane lura&#x27;, 35, 1993, &#x27;joke&#x27;, 22),<br>(3, &#x27;Story of Jane&#x27;, &#x27;Jane Tim&#x27;, 40, 2001, &#x27;novel&#x27;, 0);<br># 3）同时插入多条记录（剩下的所有记录）<br>INSERT INTO books<br>VALUES (4, &#x27;Lovey Day&#x27;, &#x27;George Byron&#x27;, 20, 2005, &#x27;novel&#x27;, 30),<br>(5, &#x27;Old land&#x27;, &#x27;Honore Blade&#x27;, 30, 2010, &#x27;law&#x27;, 0),<br>(6, &#x27;The Battle&#x27;, &#x27;Upton Sara&#x27;, 30, 1999, &#x27;medicine&#x27;, 40),<br>(7, &#x27;Rose Hood&#x27;, &#x27;Richard haggard&#x27;, 28, 2008, &#x27;cartoon&#x27;, 28);<br># 4、将小说类型(novel)的书的价格都增加5<br>UPDATE books b SET b.price = b.price + 5 WHERE b.note = &#x27;novel&#x27;;<br><br># 5、将名称为EmmaT的书的价格改为40，并将说明改为drama<br>UPDATE books b SET b.price = 40, b.note = &#x27;drama&#x27; WHERE b.name = &#x27;EmmaT&#x27;;<br># 6、删除库存为0的记录<br>DELETE FROM books WHERE num = 0;<br># 7、统计书名中包含a字母的书<br>SELECT * FROM books b WHERE b.name LIKE &#x27;%a%&#x27;;<br><br># 8、统计书名中包含a字母的书的数量和库存总量<br>SELECT COUNT(*),SUM(num) FROM books b WHERE b.name LIKE &#x27;%a%&#x27;;<br><br># 9、找出“novel”类型的书，按照价格降序排列<br>SELECT * FROM books b WHERE b.note = &#x27;novel&#x27; ORDER BY b.price DESC;<br><br># 10、查询图书信息，按照库存量降序排列，如果库存量相同的按照note升序排列<br>SELECT * FROM books b ORDER BY b.num DESC, b.note;<br><br># 11、按照note分类统计书的数量<br>SELECT b.note ,COUNT(*) FROM books b GROUP BY b.note;<br><br># 12、按照note分类统计书的库存量，显示库存量超过30本的<br>SELECT b.note ,SUM(b.num) sums FROM books b <br>GROUP BY b.note<br>HAVING sums &gt;= 30;<br><br># 13、查询所有图书，每页显示5本，显示第二页<br>SELECT * FROM books b LIMIT 5,5;<br><br># 14、按照note分类统计书的库存量，显示库存量最多的<br>SELECT b.note FROM books b <br>GROUP BY b.note<br>ORDER BY SUM(b.num)<br>LIMIT 1;<br><br># 15、查询书名达到10个字符的书，不包括里面的空格<br>SELECT * FROM books b WHERE CHAR_LENGTH(REPLACE(b.name,&#x27; &#x27;,&#x27;&#x27;)) &gt;= 10;<br><br># 16、查询书名和类型，其中note值为novel显示小说，law显示法律，medicine显示医药，cartoon显示卡通，joke显示笑话<br>SELECT b.name, b.note,(CASE b.note <br>WHEN &#x27;novel&#x27; THEN &#x27;小说&#x27;<br>WHEN &#x27;law&#x27; THEN &#x27;法律&#x27;<br>WHEN &#x27;medicine&#x27; THEN &#x27;医药&#x27;<br>WHEN &#x27;cartoon&#x27; THEN &#x27;卡通&#x27;<br>WHEN &#x27;joke&#x27; THEN &#x27;笑话&#x27;<br>ELSE &#x27;其他&#x27;<br>END) zhname<br>FROM books b;<br><br># 17、查询书名、库存，其中num值超过30本的，显示滞销，大于0并低于10的，显示畅销，为0的显示需要无货<br>SELECT b.name, b.num,(CASE <br>WHEN b.num &gt;= 30 THEN &#x27;滞销&#x27;<br>WHEN b.num &lt; 10 AND b.num &gt; 0 THEN &#x27;畅销&#x27;<br>WHEN b.num = 0 THEN &#x27;无货&#x27;<br>ELSE &#x27;正常&#x27;<br>END) status<br>FROM books b;<br><br># 18、统计每一种note的库存量，并合计总量<br>SELECT b.note, SUM(b.num) FROM books b GROUP BY b.note WITH ROLLUP;<br><br># 19、统计每一种note的数量，并合计总量<br>SELECT b.note,COUNT(1) FROM books b GROUP BY b.note WITH ROLLUP;<br><br># 20、统计库存量前三名的图书<br>SELECT * FROM books b ORDER BY sums DESC  LIMIT 3;<br><br># 21、找出最早出版的一本书<br>SELECT * FROM books b ORDER BY b.pubdate LIMIT 1;<br><br># 22、找出novel中价格最高的一本书<br>SELECT * FROM books b WHERE b.note = &#x27;novel&#x27; ORDER BY b.price DESC LIMIT 1;<br><br># 23、找出书名中字数最多的一本书，不含空格<br>SELECT * FROM books ORDER BY CHAR_LENGTH(REPLACE(name,&#x27; &#x27;,&#x27;&#x27;)) DESC LIMIT 0,1;<br></code></pre></td></tr></table></figure><h2 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h2><p><strong>整型：</strong></p><p>TINYINT（1字节）、SMALLINT（2字节）、MEDIUMINT（3字节）、INT&#x2F;INTEGER（4字节）、BIGINT（8字节）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 其中的 5 表示显示宽度，搭配 ZEROFILL 零填充才能看到效果，MySQL 8.0.17 不再有显示宽度<br># UNSIGNED 设置无符号<br>CREATE TABLE test_int(<br>f1 INT(5),<br>    f2 INT(5) ZEROFILL<br>);<br></code></pre></td></tr></table></figure><p><strong>浮点型：</strong></p><p>FLOAT（4字节）、DOUBLE（8字节）、REAL（默认就是 DOUBLE）</p><p>表示精度不精准，不应使用 &#x3D; 比较浮点型</p><p><strong>定点数：</strong></p><p>DECIMAL(M,D)，M 位有效位，小数点后 D 位。使用字符串存储。</p><p><strong>位类型：</strong></p><p>BIT(M)</p><p><strong>日期时间类型：</strong></p><p>YEAR（年）、TIME（时分秒）、DATE（年月日）、DATETIME（年月日时分秒）、TIMESTAMP（年月日时分秒）</p><p>DATE：标准格式为：<code>YYYY-MM-DD</code></p><p>TIME：标准格式：<code>D HH-MM-SS</code>、<code>HH-MM-SS</code>，D 会转为小时与 HH 相加</p><p>DATETIME（8个字节）：标准格式：YYYY-MM-DD HH:MM:SS</p><p>TIMESTAMP（4字节）：标准格式：YYYY-MM-DD HH:MM:SS，存储范围为 “1970-01-01 00:00:01 UTC”到“2038-01-19 03:14:07 UTC”，存储的数据时区不同显示不同。</p><p>尽量使用 DATETIME，注册时间等常用于计算的存储使用时间戳</p><p><strong>文本字符串类型：</strong></p><p>CHAR(M)、VARCHAR(M)、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT、ENUM、SET</p><p>VARCHAR(20)：4.0版本以下指20字节，5.0版本以上指20字符，存储字节为字符串实际长+1，InnoDB 建议使用 VARCHAR</p><p>ENUM：<code>season ENUM(&#39;春&#39;,&#39;夏&#39;,&#39;秋&#39;,&#39;冬&#39;,unknow&#39;)</code>，只能选择一个</p><p>SET：<code>s SET (&#39;A&#39;, &#39;B&#39;, &#39;C&#39;)</code>，可多选存储</p><p><strong>二进制：</strong></p><p>BINARY、VARBINARY、TIBYBLOB、BLOB、MEDIUMBLOB、LONGBLOB </p><p>BLOG 和 TEXT 执行大量更新和删除操作时，会产生空洞现象，为提高性能应定期使用 OPTIMIZE TABLE 进行碎片处理。尽量分离到单独的表中，减少主表的碎片。</p><p><strong>JSON 类型：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_json(<br>js json<br>);<br><br>INSERT INTO test_json (js)<br>VALUES (&#x27;&#123;&quot;name&quot;:&quot;songhk&quot;, &quot;age&quot;:18, &quot;address&quot;:&#123;&quot;province&quot;:&quot;beijing&quot;,<br>&quot;city&quot;:&quot;beijing&quot;&#125;&#125;&#x27;);<br><br>SELECT js -&gt; &#x27;$.name&#x27; AS NAME,js -&gt; &#x27;$.age&#x27; AS age ,js -&gt; &#x27;$.address.province&#x27;<br>AS province, js -&gt; &#x27;$.address.city&#x27; AS city<br>FROM test_json;<br></code></pre></td></tr></table></figure><h2 id="Constraint"><a href="#Constraint" class="headerlink" title="Constraint"></a>Constraint</h2><p>实体完整性、域完整性、引用完整性、用户自定义完整性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 列级约束，约束在列之后<br>CREATE TABLE mytest(<br>id int NOT NULL<br>);<br><br># 表级约束，在所有字段之后<br>CREATE TABLE mytest(<br>id int NOT NULL,<br>    last_name VARCHAR(25),<br>    email VARCHAR(25)<br>    CONSTRAINT uk_mytest_email UNIQUE(email) <br>);<br></code></pre></td></tr></table></figure><ul><li><p>NOT NULL 非空约束，规定某个字段不能为空</p></li><li><p>UNIQUE 唯一约束，规定某个字段在整个表中是唯一的</p><ul><li>定义 UNIQUE 约束时会自动创建一个唯一性索引</li><li>删除唯一约束，只能通过删除唯一约束来删除</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 设置 name 和 pwd 组合唯一<br>CREATE TABLE mytest(<br>id INT,<br>    name VARCHAR(25),<br>    pwd VARCHAR25),<br>    CONSTRAINT uk_mytest_name_pwd UNIQUE(`name`, pwd) # 指定索引名<br>    # UNIQUE KEY(`name`, pwd)  # 索引自动命名为第一个列名<br>);<br><br># 查看表索引<br>SHOW INDEX FROM mytest;<br><br># 删除唯一性约束<br>ALTER TABLE mytest <br>DROP INDEX uk_mytest_name_pwd;<br></code></pre></td></tr></table></figure><ul><li>PRIMARY KEY 主键(非空且唯一)约束，只能有一个主键约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 列级约束<br>id INT PRIMARY KEY<br><br># 表级约束，索引自动命名为列名<br>PRIMARY KEY(id)<br></code></pre></td></tr></table></figure><ul><li>AUTO_INCREMENT 自增，一个表只能有一个自增列，必须是主键列、整数类型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>MySQL5.7 自增下一个值保存在内存中，重启服务则清空了缓存<br>MySQL8 则是保存在重做日志中<br>*/<br></code></pre></td></tr></table></figure><ul><li>FOREIGN KEY 外键约束，限定表的引用完整性<ul><li>外键必须是主表的主键或唯一约束</li><li>表可以创建多个外键约束</li><li>外键有性能开销，推荐应用层解决引用完整性而不是使用外键</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 表级约束<br>CONSTRANT fk_dept_id FOREIGN KEY(dept_id) REFERENCE department(dept_id)<br><br># 约束等级<br># Cascade 主表删除对应数据时，从表相关数据也删除<br># Set null 主表删除对应数据时，从表的外键设为 null 而不删除记录<br><br># 删除外键约束<br>SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;表名称&#x27;;#查看某个<br>表的约束名<br>ALTER TABLE 从表名 DROP FOREIGN KEY 外键约束名;<br></code></pre></td></tr></table></figure><ul><li>CHECK 检查约束，检查值的范围，5.7 不支持，8 支持</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">salary DECIMAL(10,2) CHECK(salary &gt; 2000)<br></code></pre></td></tr></table></figure><ul><li>DEFAULT 默认值约束</li></ul><h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>视图可以看作是一个虚拟表，修改视图数据，基表数据也会修改，视图数据删除，基表不会删除。</p><p>视图更新需要视图的行和基表一一对应关系，以下情况不能更新：</p><ul><li>视图定义时指定 <code>ALGORITHM=TEMPTABLE</code>，不支持插入和删除操作</li><li>视图中不包含基表中所有被定义为非空又未指定默认值的列，视图将不支持INSERT操作</li><li>视图查询语句使用 join，不支持插入和删除操作</li><li>查询语句使用数学表达式或子查询，不h支持插入和更新哪些列</li><li>视图列中使用 DISTINCT、聚合函数、GROUP BY、HASVING、UNION 等，不支持插入、更新和删除操作</li><li>通常视图就是为了方便查询，更新修改数据都是在基表上操作</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>CREATE [OR REPLACE]<br>[ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;]<br>VIEW 视图名称 [(字段列表)]<br>AS 查询语句<br>[WITH [CASCADED|LOCAL] CHECK OPTION]<br>*/<br><br># 查看视图<br>DESC 视图名称;<br><br># 删除视图<br>DROP VIEW IF EXISTS 视图名称;<br></code></pre></td></tr></table></figure><h2 id="Procedure-amp-Function"><a href="#Procedure-amp-Function" class="headerlink" title="Procedure&amp;Function"></a>Procedure&amp;Function</h2><p>存储过程是一段程序化sql，对底层表进行操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名 参数类型,...)<br>[characteristics ...]<br>BEGIN<br>存储过程体<br>END<br>*/<br><br># 调用：CALL 存储过程名(实参列表)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CoreJava Volume Ⅰ</title>
    <link href="/2021/11/08/CoreJava/"/>
    <url>/2021/11/08/CoreJava/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Java-程序设计概述"><a href="#1-Java-程序设计概述" class="headerlink" title="1 Java 程序设计概述"></a>1 Java 程序设计概述</h2><p>Java 的 11 个关键字：</p><ol><li>简单性</li><li>面向对象</li><li>分布式</li><li>健壮性</li><li>安全性</li><li>体系结构中立</li><li>可移植性</li><li>解释性</li><li>高性能</li><li>多线程</li><li>动态性</li></ol><h2 id="2-Java-环境安装"><a href="#2-Java-环境安装" class="headerlink" title="2 Java 环境安装"></a>2 Java 环境安装</h2><p>术语：</p><ul><li>Java Develepment Kit（JDK）：编写 Java 程序的程序员使用的软件</li><li>Java Runtime Environment（JRE）：运行 Java 程序的用户使用的软件</li><li>Standard Edition（SE）：用于桌面或简单服务器应用的 Java 平台</li><li>Enterprise Edition（EE）：用于复杂服务器应用的 Java 平台</li><li>Micro Edition（ME）：用于手机和其他小型设备的 Java 平台</li><li>OpenJDK：Java SE 的开源实现</li></ul><blockquote><p><a href="https://www.oracle.com/java/technologies/downloads/#java8">Java Downloads | Oracle</a></p></blockquote><h3 id="2-1-Windows"><a href="#2-1-Windows" class="headerlink" title="2.1 Windows"></a>2.1 Windows</h3><ol><li>安装包下载并安装（需要账号），<a href="https://www.oracle.com/java/technologies/downloads/#java8-windows">jdk-8u301-windows-x64.exe</a></li><li>配置 JAVA_HOME 系统变量，变量值为 <code>C:\env\jdk1.8</code>(JDK安装目录)</li><li>配置 PATH 系统变量，添加 <code>%JAVA_HOME%\bin</code>、<code>%JAVA_HOME%\jre\bin</code></li><li>测试是否配置完成，<code>java -version</code>、<code>javac -version</code></li></ol><h3 id="2-2-Linux"><a href="#2-2-Linux" class="headerlink" title="2.2 Linux"></a>2.2 Linux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># (CentOS7)</span><br><span class="hljs-comment"># 1、下载安装包并上传到 Linux，jdk-8u301-linux-x64.tar.gz</span><br><br><span class="hljs-comment"># 2、解压在 opt 目录下</span><br>sudo tar zxf jdk-8u301-linux-x64.tar.gz -C /opt<br><br><span class="hljs-comment"># 3、配置全局变量</span><br>vim /etc/profile<br><br><span class="hljs-comment"># 3.1 最后添加三项</span><br><span class="hljs-built_in">export</span> JAVA_HOME=/opt/jdk1.8.0_301<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$JAVA_HOME</span>/jre/bin:<span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment"># 4、激活配置</span><br><span class="hljs-built_in">source</span> /etc/profile<br><br><span class="hljs-comment"># 5、测试</span><br>java -version<br>javac -version<br></code></pre></td></tr></table></figure><h3 id="2-3-HelloWorld"><a href="#2-3-HelloWorld" class="headerlink" title="2.3 HelloWorld"></a>2.3 HelloWorld</h3><p>1、创建文件 HelloWorld.java 文件（严格区分大小写）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World, Java 8!&quot;</span>);<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><p>2、使用 javac 编译 Java 文件，<code>javac HelloWorld.java</code></p><p>3、执行（没有任何后缀，直接就是 HelloWorld），<code>java HelloWorld</code></p><h2 id="3-Java-基础程序设计"><a href="#3-Java-基础程序设计" class="headerlink" title="3 Java 基础程序设计"></a>3 Java 基础程序设计</h2><h3 id="3-1-注释"><a href="#3-1-注释" class="headerlink" title="3.1 注释"></a>3.1 注释</h3><ol><li>单行注释：<code>// 开始到本行结尾</code></li><li>多行注释：<code>/* 开始，以 */ 结束</code></li><li>文档注释：<code>/** 开始，以 */ 结束</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这是一个文档注释</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@filename</span> CommentsTest.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.01 2021-10-18</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ReaJason</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommentsTest</span>&#123;<br>    <span class="hljs-comment">/* 每个 Java 程序都必须有一个 main 方法，声明如下*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">// 这是一个单行注释，下面是打印一句话</span><br>        System.out.println(<span class="hljs-string">&quot;We will not use &#x27;Hello, World!&#x27;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-数据类型"><a href="#3-2-数据类型" class="headerlink" title="3.2 数据类型"></a>3.2 数据类型</h3><h4 id="3-2-1-整型"><a href="#3-2-1-整型" class="headerlink" title="3.2.1 整型"></a>3.2.1 整型</h4><table><thead><tr><th>类型</th><th>存储需求</th><th>取值范围</th></tr></thead><tbody><tr><td>int</td><td>4 字节</td><td>-2^31 ~ 2^31-1</td></tr><tr><td>short</td><td>2 字节</td><td>-2^7 ~ 2^7-1</td></tr><tr><td>long</td><td>8 字节</td><td>-2^63 ~ 2^63-1</td></tr><tr><td>byte</td><td>1 字节</td><td>-128 ~ 127</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 长整型有 l 或 L 后缀</span><br><span class="hljs-type">long</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">4000000000L</span>;<br><br><span class="hljs-comment">// 十六进制有 0x 或 0X 前缀</span><br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0xa1f</span>;<br><br><span class="hljs-comment">// 八进制有 0 前缀，不建议使用</span><br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0173</span>;<br><br><span class="hljs-comment">// 二进制有 0b 或 0B 前缀，java7 开始</span><br><span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">0b1001</span>;<br><br><span class="hljs-comment">// Java7 开始数字字面量可以加_，使之易读，编译器会去除这些下划线</span><br><span class="hljs-type">int</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-number">0b1111_0100_0010_0100_0000</span>;<br></code></pre></td></tr></table></figure><h4 id="3-2-2-浮点型"><a href="#3-2-2-浮点型" class="headerlink" title="3.2.2 浮点型"></a>3.2.2 浮点型</h4><table><thead><tr><th>类型</th><th>存储需求</th><th>取值范围</th></tr></thead><tbody><tr><td>float</td><td>4 字节</td><td></td></tr><tr><td>double</td><td>8 字节</td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// float 类型必须添加 f 或 F 后缀</span><br><span class="hljs-type">float</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1010.101010f</span>;<br><br><span class="hljs-comment">// double 类型可添加 d 或 D 后缀，小数默认为 double 类型</span><br><span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10.101010231</span>;<br><br><span class="hljs-comment">// 使用十六进制表示浮点数，指数采用十进制，尾数采用十六进制，指数的基数为 2</span><br><span class="hljs-comment">// 0.125 = 0x1.0p-3</span><br><span class="hljs-type">double</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x1.0p-3</span>;<br></code></pre></td></tr></table></figure><ul><li>正无穷大，Double.POSITIVE_INFINITY</li><li>负无穷大，Double.NEGATIVE_INFINITY</li><li>NaN，Double.NaN</li></ul><blockquote><p> 浮点数不适合用于无法接受舍入误差的金融计算，应该使用 BigDecimal 类</p></blockquote><h4 id="3-2-3-char-类型"><a href="#3-2-3-char-类型" class="headerlink" title="3.2.3 char 类型"></a>3.2.3 char 类型</h4><p>char 类型的字面量值需要用单引号括起来。char 类型的值也可以表示为十六进制值。</p><table><thead><tr><th>转义序列</th><th>名称</th><th>Unicode 值</th></tr></thead><tbody><tr><td>\b</td><td>退格</td><td>\u0008</td></tr><tr><td>\t</td><td>制表</td><td>\u0009</td></tr><tr><td>\n</td><td>换行</td><td>\u00a</td></tr><tr><td>\r</td><td>回车</td><td>\u00d</td></tr><tr><td>\“</td><td>双引号</td><td>\u0022</td></tr><tr><td>\‘</td><td>单引号</td><td>\u0027</td></tr><tr><td>\\</td><td>反斜杠</td><td>\u005c</td></tr></tbody></table><p>Unicode 转义序列会在解析代码之前处理，例如 <code>// \u00A0 is a newline</code>，由于 <code>\u00A0</code> 会替换成一个换行符，因此会产生语法错误</p><p>char 类型描述了 UTF-16 编码中的一个代码单元，占 2 个字节</p><p>不建议使用 char 类型，除非需要处理 UTF-16 代码单元</p><h4 id="3-2-4-boolean-类型"><a href="#3-2-4-boolean-类型" class="headerlink" title="3.2.4 boolean 类型"></a>3.2.4 boolean 类型</h4><p>boolean 类型有两个值：false 和 true。整型值和布尔值不能相互转换</p><h3 id="3-3-变量"><a href="#3-3-变量" class="headerlink" title="3.3 变量"></a>3.3 变量</h3><p>声明变量为，变量类型+变量名，例如 <code>int a;</code>。变量名不能以数字开头的，由数字、字母、_、$组成。大小写敏感，长度没有限制。</p><ul><li>尽管 $ 是合法的命名字符，但不要个人使用，它只用在 Java 编译器或其它工具生成的名字中</li><li>不能使用 Java 保留字作为变量名</li></ul><h4 id="3-3-1-变量初始化"><a href="#3-3-1-变量初始化" class="headerlink" title="3.3.1 变量初始化"></a>3.3.1 变量初始化</h4><p>声明变量后，必须使用赋值语句进行显式初始化，例如 <code>int a = 10;</code>，千万不要使用未初始化的变量。变量的声明尽可能靠近变量第一次使用的地方。</p><p>Java 10 开始如果变量能推断出类型可以使用 var 来声明变量。</p><h4 id="3-3-2-常量"><a href="#3-3-2-常量" class="headerlink" title="3.3.2 常量"></a>3.3.2 常量</h4><p>使用 final 指定常量，常量只能被赋值一次，无法修改，static final 指定类常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Constants</span>&#123;<br>    <span class="hljs-comment">// 这是一个类常量，可以通过 Constants.COUNT 访问</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.14</span>;<br>System.out.println(PI + Constants.COUNT);<br>System.out.println(PI + COUNT);<br>        <span class="hljs-comment">// 两个都输出 13.14</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-运算符"><a href="#3-4-运算符" class="headerlink" title="3.4 运算符"></a>3.4 运算符</h3><p>算术运算符 +、-、*、&#x2F;、% 表示加、减、乘、除、求余（取模）运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 当两个整数参与 / 运算为整数除法</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> / <span class="hljs-number">3</span>;<br><br><span class="hljs-comment">// 有小数才为浮点除法</span><br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> / <span class="hljs-number">3.0</span>;<br><br><span class="hljs-comment">// 整数除 0 产生异常，浮点数除 0 会的都无穷大或 NaN 结果</span><br></code></pre></td></tr></table></figure><h4 id="3-4-1-数学函数"><a href="#3-4-1-数学函数" class="headerlink" title="3.4.1 数学函数"></a>3.4.1 数学函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">// 平方根</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">a</span>  <span class="hljs-operator">=</span> Math.sqrt(<span class="hljs-number">4</span>);<br><span class="hljs-comment">// 幂运算</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Math.pow(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// 整数取余，返回 0 ~ 11 内的数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Math.floorMod(<span class="hljs-number">13</span>, <span class="hljs-number">12</span>);<br><span class="hljs-comment">// 近似常量值</span><br>        System.out.println(Math.PI);<br>        <br>        System.out.println(a);<br>        System.out.println(b);<br>        System.out.println(c);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4-2-数值类型转换"><a href="#3-4-2-数值类型转换" class="headerlink" title="3.4.2 数值类型转换"></a>3.4.2 数值类型转换</h4><p>int，long 转为 float 以及 long 转 double 会有精度损失。</p><p>二元运算中，两个操作数有一个 double，另一个也转 double；否则，有一个 float，另一个转 float；否则，有一个 long，另一个转 long；否则两个都转为 int。</p><h4 id="3-4-3-强制类型转换"><a href="#3-4-3-强制类型转换" class="headerlink" title="3.4.3 强制类型转换"></a>3.4.3 强制类型转换</h4><p>强制类型转换的语法格式是在圆括号中给出想要转换的目标类型，后面紧跟待转换的变量名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// double 转 int，会有精度损失</span><br><span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">9.997</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)a;<br></code></pre></td></tr></table></figure><h4 id="3-4-4-赋值运算符"><a href="#3-4-4-赋值运算符" class="headerlink" title="3.4.4 赋值运算符"></a>3.4.4 赋值运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 算术运算符与赋值运算符结合使用,+=、-=、/=、*=、%=</span><br><span class="hljs-type">int</span> x += <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><h4 id="3-4-5-自增自减运算符"><a href="#3-4-5-自增自减运算符" class="headerlink" title="3.4.5 自增自减运算符"></a>3.4.5 自增自减运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 自增,++n、n++</span><br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * ++m; <span class="hljs-comment">// 16</span><br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * n++; <span class="hljs-comment">// 14</span><br><br><br><span class="hljs-comment">// 自减,--n、n--</span><br></code></pre></td></tr></table></figure><h4 id="3-4-6-关系运算符"><a href="#3-4-6-关系运算符" class="headerlink" title="3.4.6 关系运算符"></a>3.4.6 关系运算符</h4><p>&#x3D;&#x3D;、!&#x3D;、&lt;、&lt;&#x3D;、&gt;&#x3D;、&amp;&amp;（短路与）、||（短路或）</p><ul><li><code>expression1 &amp;&amp; expression2</code>，如果第一个表达式会 false，就不会再管第二个表达式</li><li><code>expression1 || expression2</code>，如果第一个表达式会 true，就不会再管第二个表达式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorTest</span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br>       <span class="hljs-keyword">if</span>(a &gt; <span class="hljs-number">10</span> &amp;&amp; (b+=<span class="hljs-number">1</span>) &gt; <span class="hljs-number">12</span>)&#123;<br>       &#125;<br>       System.out.println(a); <span class="hljs-comment">// 10</span><br>       System.out.println(b); <span class="hljs-comment">// 11</span><br>       <span class="hljs-keyword">if</span>((a+=<span class="hljs-number">1</span>) &gt; <span class="hljs-number">11</span> || (b+=<span class="hljs-number">1</span>) &gt; <span class="hljs-number">11</span>)&#123;<br>       &#125;<br>       System.out.println(a); <span class="hljs-comment">// 11</span><br>       System.out.println(b); <span class="hljs-comment">// 12</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4-7-位运算"><a href="#3-4-7-位运算" class="headerlink" title="3.4.7 位运算"></a>3.4.7 位运算</h4><p>&amp;（and）、|（or）、^（xor）、~（not），这些运算符按位模式处理。&amp; 和 | 也能返回布尔值，不采用短路方式求值。</p><p>&gt;&gt;（逻辑右移，除 2），&lt;&lt;（逻辑左移，乘 2），&gt;&gt;&gt;（算术右移，符号位填充高位），不存在 &lt;&lt;&lt; 运算符。</p><h4 id="3-4-8-运算符级别"><a href="#3-4-8-运算符级别" class="headerlink" title="3.4.8 运算符级别"></a>3.4.8 运算符级别</h4><table><thead><tr><th>运算符</th><th>结合性</th></tr></thead><tbody><tr><td>[]、()</td><td>左 -&gt; 右</td></tr><tr><td>!、~、++、–、+（一元运算）、-（一元运算）、()（强制类型转换）、new</td><td>右 -&gt; 左</td></tr><tr><td>*、&#x2F;、%</td><td>左 -&gt; 右</td></tr><tr><td>+、-</td><td>左 -&gt; 右</td></tr><tr><td>&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</td><td>左 -&gt; 右</td></tr><tr><td>&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;、instanceof</td><td>左 -&gt; 右</td></tr><tr><td>&#x3D;&#x3D;、!&#x3D;</td><td>左 -&gt; 右</td></tr><tr><td>&amp;</td><td>左 -&gt; 右</td></tr><tr><td>^</td><td>左 -&gt; 右</td></tr><tr><td>|</td><td>左 -&gt; 右</td></tr><tr><td>&amp;&amp;</td><td>左 -&gt; 右</td></tr><tr><td>||</td><td>左 -&gt; 右</td></tr><tr><td>?:</td><td>右 -&gt; 左</td></tr><tr><td>&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;、&amp;&#x3D;、|&#x3D;、^&#x3D;、&lt;&lt;&#x3D;、&gt;&gt;&#x3D;、&gt;&gt;&gt;&#x3D;</td><td>右 -&gt; 左</td></tr></tbody></table><h4 id="3-4-9-枚举类型"><a href="#3-4-9-枚举类型" class="headerlink" title="3.4.9 枚举类型"></a>3.4.9 枚举类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Size</span>&#123; SMALL, MEDIUM, LARGE&#125;;<br><br><span class="hljs-type">Size</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Size.SMALL;<br></code></pre></td></tr></table></figure><h3 id="3-5-字符串"><a href="#3-5-字符串" class="headerlink" title="3.5 字符串"></a>3.5 字符串</h3><p>字符串从概念上来说即是 Unicode 字符序列，使用双引号括起来，字符串都是 String 类的一个实例。字符串不可变，无法修改。</p><p>不可修改的优点就是编译器可以让字符串共享，存在一个字符串池，如果字符串相同则直接引用。</p><p>实际上只有字符串字面量是共享的，而 + 或 substring 等操作产生的字符串不共享。</p><h4 id="3-5-1-子串"><a href="#3-5-1-子串" class="headerlink" title="3.5.1 子串"></a>3.5.1 子串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// String substring(int beginIndex) 截取 [beginIndex, arr.length - 1]</span><br><span class="hljs-comment">// String substring(int beginIndex, int endIndex) 截取 [beginIndex, endIndex)</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">sub</span> <span class="hljs-operator">=</span> s.substring(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// &quot;el&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-5-2-拼接"><a href="#3-5-2-拼接" class="headerlink" title="3.5.2 拼接"></a>3.5.2 拼接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// +</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span> + <span class="hljs-string">&quot;,World!&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span> + <span class="hljs-string">&quot;123&quot;</span>;<br><br><span class="hljs-comment">// String join()</span><br><span class="hljs-type">String</span> <span class="hljs-variable">all</span> <span class="hljs-operator">=</span> String.join(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>,<span class="hljs-string">&quot;M&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="3-5-3-检测相等"><a href="#3-5-3-检测相等" class="headerlink" title="3.5.3 检测相等"></a>3.5.3 检测相等</h4><blockquote><p>千万不要使用 &#x3D;&#x3D; 运算符比较字符串是否相等，这个运算符是比较两个字符串的地址是否相等</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// equals()</span><br><br><span class="hljs-comment">// equalsIgnoreCase() 忽略大小写</span><br><br><span class="hljs-comment">// 只有字符串常量是共享的，+ 或 substring 等操作产生的结果都不是共享的</span><br></code></pre></td></tr></table></figure><h4 id="3-5-4-空串与-Null"><a href="#3-5-4-空串与-Null" class="headerlink" title="3.5.4 空串与 Null"></a>3.5.4 空串与 Null</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 空串即长度为 0 的字符串</span><br><br><span class="hljs-comment">// String 是类对象，引用类型，可以赋值为 null，表示没有和任何对象关联</span><br><span class="hljs-comment">// 判断字符串不为空且不为空串，需要先判断 null</span><br><span class="hljs-keyword">if</span>(str != <span class="hljs-literal">null</span> &amp;&amp; str.length() != <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h4 id="3-5-5-码点与代码单元"><a href="#3-5-5-码点与代码单元" class="headerlink" title="3.5.5 码点与代码单元"></a>3.5.5 码点与代码单元</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// length() 获取的是字符串的代码单元长度</span><br><br><span class="hljs-comment">// charAt(int index) 获取 index 位置的代码单元</span><br><br><span class="hljs-comment">// 码点即 Unicode 码点，有些 Unicode 码点需要两个代码单元表示</span><br><span class="hljs-comment">// codePointAt(int index) 获取 index 位置的码点</span><br><span class="hljs-comment">// 遍历字符串打印码点</span><br><span class="hljs-type">int</span>[] codePoints = str.codePoints.toArray();<br></code></pre></td></tr></table></figure><h4 id="3-5-6-String-API"><a href="#3-5-6-String-API" class="headerlink" title="3.5.6 String API"></a>3.5.6 String API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// String 位于 java.lang.String</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、返回给定位置的代码单元</span><br><span class="hljs-comment">char charAt() </span><br><span class="hljs-comment">2、返回从给定位置开始的码点</span><br><span class="hljs-comment">int codePointAt(int index)</span><br><span class="hljs-comment">3、返回从 startIndex 代码点开始，位移 cpCount 后的码点索引</span><br><span class="hljs-comment">int offsetByCodePoints(int startIndex, int cpCount) </span><br><span class="hljs-comment">4、按照字段顺序，比较，字符串位于 other 之前返回负数，相等返回 0，之后返回正数</span><br><span class="hljs-comment">int compareTo(String other)</span><br><span class="hljs-comment">5、将字符串的码点作为一个流返回，toArray 放入数组中</span><br><span class="hljs-comment">IntStream codePoints()</span><br><span class="hljs-comment">6、用数组中从 offset 开始的 count 个码点构造新字符串</span><br><span class="hljs-comment">new String(int[] codePoints, int offset, int count)</span><br><span class="hljs-comment">7、字符串相等返回 true</span><br><span class="hljs-comment">boolean equals(Object other)</span><br><span class="hljs-comment">8、忽略大小写比较，相等返回 true</span><br><span class="hljs-comment">boolean euqlasIgnoreCase(String other)</span><br><span class="hljs-comment">9、以 prefix 为前缀返回 true</span><br><span class="hljs-comment">boolean startsWith(String prefix)</span><br><span class="hljs-comment">10、以 suffix 为后缀返回 true</span><br><span class="hljs-comment">boolean endsWith(String suffix)</span><br><span class="hljs-comment">11、返回字符串 str 或 代码点 cp 匹配的第一个字串开始，这个位置从 0 或 fromIndex 计算，如果原字符串不存在 str 返回 -1</span><br><span class="hljs-comment">int indexOf(String str)</span><br><span class="hljs-comment">int indexOf(String str, int fromIndex)</span><br><span class="hljs-comment">int indexOf(int cp)</span><br><span class="hljs-comment">int indexOf(int cp, int fromIndex)</span><br><span class="hljs-comment">12、返回字符串长度</span><br><span class="hljs-comment">int length()</span><br><span class="hljs-comment">13、返回 [startIndex, endIndex) 的代码点数量</span><br><span class="hljs-comment">int codePointCount(int startIndex, int endIndex)</span><br><span class="hljs-comment">14、返回新字符串，newString 代替原字符串中的所有 oldString</span><br><span class="hljs-comment">String replace(CharSquence oldString, CharSequence newString)</span><br><span class="hljs-comment">15、返回新字符串，范围为 [beginIndex, endIndex)</span><br><span class="hljs-comment">String substring(int beginIndex)</span><br><span class="hljs-comment">String substring(int beginIndex, int endIndex)</span><br><span class="hljs-comment">16、返回新字符串，全转小写</span><br><span class="hljs-comment">String toLowerCase()</span><br><span class="hljs-comment">17、返回新字符串，全转大写</span><br><span class="hljs-comment">String toUpperCase()</span><br><span class="hljs-comment">18、返回新字符串，删除原字符串前后的空格</span><br><span class="hljs-comment">String trim()</span><br><span class="hljs-comment">19、返回新字符串，使用 delimiter 连接所有元素</span><br><span class="hljs-comment">String join(CharSequence delimiter, CharSequence... elements)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="3-5-7-构建字符串"><a href="#3-5-7-构建字符串" class="headerlink" title="3.5.7 构建字符串"></a>3.5.7 构建字符串</h4><p>每次连接字符串都是构建一个新的 String 对象，可以使用 StringBuilder 高效创建字符串。StringBuffer 有线程同步机制，但效率低，StringBuilder 线程不安全，效率高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBuilderTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        builder.append(<span class="hljs-string">&quot;welcome&quot;</span>);<br>        builder.append(<span class="hljs-string">&quot; new&quot;</span>);<br>        builder.append(<span class="hljs-string">&quot; world&quot;</span>);<br>        builder.append(<span class="hljs-string">&quot;, CoreJava&quot;</span>);<br><br>        builder.delete(<span class="hljs-number">8</span>, <span class="hljs-number">11</span>);<br>        builder.insert(<span class="hljs-number">7</span>, <span class="hljs-string">&quot; to the&quot;</span>);<br><br>        System.out.println(builder.length());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">completedString</span> <span class="hljs-operator">=</span> builder.toString();<br>        System.out.println(completedString);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-6-输入输出"><a href="#3-6-输入输出" class="headerlink" title="3.6 输入输出"></a>3.6 输入输出</h3><h4 id="3-6-1-读取输入"><a href="#3-6-1-读取输入" class="headerlink" title="3.6.1 读取输入"></a>3.6.1 读取输入</h4><p>使用 Scanner 类完成键盘读取输入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、用给定的输入流创建一个 Scanner 对象</span><br><span class="hljs-comment">Scanner(InputStream in)</span><br><span class="hljs-comment">2、读取输入的下一行内容</span><br><span class="hljs-comment">String nextLine()</span><br><span class="hljs-comment">3、读取输入的下一个单词（空格为分隔符）</span><br><span class="hljs-comment">String next()</span><br><span class="hljs-comment">4、读取并转换下一个表示整数或浮点数的字符序列</span><br><span class="hljs-comment">double nextDouble()</span><br><span class="hljs-comment">5、检测输入中是否还有其他单词</span><br><span class="hljs-comment">boolean hasNext()</span><br><span class="hljs-comment">6、检测是否还有表示整数或浮点数的下一个字符序列</span><br><span class="hljs-comment">boolean hasNextDouble()</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputTest</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>System.out.print(<span class="hljs-string">&quot;What&#x27;s your name?&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> in.nextLine();<br><br>System.out.print(<span class="hljs-string">&quot;How old are you?&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> in.nextInt();<br><br>System.out.print(<span class="hljs-string">&quot;How much are your salary every month?&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">salary</span> <span class="hljs-operator">=</span> in.nextDouble();<br><br>System.out.println(<span class="hljs-string">&quot;Hello，&quot;</span> + name + <span class="hljs-string">&quot;.Next year, you&#x27;ll be &quot;</span> + (age+<span class="hljs-number">1</span>) + <span class="hljs-string">&quot;.And if you don&#x27;t take any money, you&#x27;ll save &quot;</span>+ (salary * <span class="hljs-number">12</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-6-2-格式化输出"><a href="#3-6-2-格式化输出" class="headerlink" title="3.6.2 格式化输出"></a>3.6.2 格式化输出</h4><p>使用 printf 进行格式化输出，也可以使用 String.format()。转换符表如下：</p><table><thead><tr><th>转换符</th><th>类型</th><th>举例</th></tr></thead><tbody><tr><td>d</td><td>十进制整数</td><td>159</td></tr><tr><td>x</td><td>十六进制整数</td><td>9f</td></tr><tr><td>o</td><td>八进制整数</td><td>237</td></tr><tr><td>e</td><td>定点浮点数</td><td>15.9</td></tr><tr><td>g</td><td>通用浮点数</td><td>–</td></tr><tr><td>a</td><td>十六进制浮点数</td><td>0x1.fccdp3</td></tr><tr><td>s</td><td>字符串</td><td>Hello</td></tr><tr><td>c</td><td>字符</td><td>H</td></tr><tr><td>b</td><td>布尔</td><td>True</td></tr><tr><td>h</td><td>散列码</td><td>42628b2</td></tr><tr><td>tx、Tx</td><td>日期时间（T 强制大写）</td><td>已经过时的</td></tr><tr><td>%</td><td>百分号</td><td>%</td></tr><tr><td>n</td><td>与平台有关的行分隔符</td><td>–</td></tr></tbody></table><h3 id="3-7-控制流程"><a href="#3-7-控制流程" class="headerlink" title="3.7 控制流程"></a>3.7 控制流程</h3><p>Java 没有 goto 语句，但是 break 语句可以带标签，达到从内存循环跳出的目的。</p><h4 id="3-7-1-块作用域"><a href="#3-7-1-块作用域" class="headerlink" title="3.7.1 块作用域"></a>3.7.1 块作用域</h4><p>一个块中可以嵌套另一个块，但是不能在嵌套的两个块中声明同名的变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; <span class="hljs-comment">// 错误: 已在方法 main(String[])中定义了变量 n</span><br>        &#125;<br>System.out.println(n);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-7-2-条件语句"><a href="#3-7-2-条件语句" class="headerlink" title="3.7.2 条件语句"></a>3.7.2 条件语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 条件语句格式</span><br><span class="hljs-keyword">if</span>(condition) statement;<br><br><span class="hljs-comment">// 执行多条使用块语句</span><br><span class="hljs-keyword">if</span>(condition)&#123;<br>    statement1;<br>    statement2;<br>    ...<br>&#125;<br><br><span class="hljs-comment">// if-else，else 和 离他最近的 if 结合在一起</span><br><span class="hljs-keyword">if</span>(condition) statement1 <span class="hljs-keyword">else</span> statement2;<br><br><span class="hljs-comment">// if-else 执行多条语句</span><br><span class="hljs-keyword">if</span>(condition)&#123;<br>    statemen1;<br>    statemen2;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    statement3;<br>    statement4;<br>&#125;<br><br><span class="hljs-comment">// if-else if-else</span><br><span class="hljs-keyword">if</span>(condition1)&#123;<br>    statement1;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(condition2)&#123;<br>    statement2;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    statement3;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;How much are your salary?&quot;</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">salary</span> <span class="hljs-operator">=</span> in.nextDouble();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-number">4000</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">performance</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(salary &gt;= <span class="hljs-number">2</span> * target)&#123;<br>            performance = <span class="hljs-string">&quot;Excellent&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(salary &gt;= <span class="hljs-number">1.5</span> * target)&#123;<br>            performance = <span class="hljs-string">&quot;Fine&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(salary &gt;= target)&#123;<br>            performance = <span class="hljs-string">&quot;Satisfactory&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;You&#x27;re fired&quot;</span>);<br>        &#125;<br>        System.out.println(performance + <span class="hljs-string">&quot;~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-7-3-循环语句"><a href="#3-7-3-循环语句" class="headerlink" title="3.7.3 循环语句"></a>3.7.3 循环语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// while 循环一般格式</span><br><span class="hljs-keyword">while</span>(condition) statement;<br><br><span class="hljs-comment">// do/while 循环</span><br><span class="hljs-keyword">do</span> statement <span class="hljs-title function_">while</span><span class="hljs-params">(condition)</span>;<br></code></pre></td></tr></table></figure><h4 id="3-7-4-for-循环"><a href="#3-7-4-for-循环" class="headerlink" title="3.7.4 for 循环"></a>3.7.4 for 循环</h4><ul><li>for 语句第一部分是计数器初始化，第二部分是循环条件，第三部分是如何更新计数器</li><li>for 语句内部定义的变量外部无法使用，每个独立的 for 语句可以定义同名变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++)&#123;<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-7-5-switch-语句"><a href="#3-7-5-switch-语句" class="headerlink" title="3.7.5 switch 语句"></a>3.7.5 switch 语句</h4><p>switch 语句从选择项匹配的 case 标签处开始执行直到遇到 break 语句或执行到 switch 语句结尾处。如果没有匹配的而有 default 语句，就执行 default 子句。如果某个 case 分支没有 break 语句，就有可能继续执行下一个 case 分支。</p><p>case 标签可以是：</p><ul><li>类型为 char、byte、short、int 的常量表达式</li><li>枚举常量</li><li>字符串字面量（Java SE 7 开始）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入你想使用的功能：（1,2）&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">choice</span> <span class="hljs-operator">=</span> in.next();<br>        <span class="hljs-keyword">switch</span>(choice)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;你选择了 1 功能，什么也没发生&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;你选择了 2 功能，什么也没发生&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;没有该功能...&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-7-6-中断控制语句"><a href="#3-7-6-中断控制语句" class="headerlink" title="3.7.6 中断控制语句"></a>3.7.6 中断控制语句</h4><ul><li>break：跳出当前循环</li><li>break tag：跳出循环，从内到外，跳出语句块，到 tag 位置</li><li>continue：跳出当前循环，继续下一次循环</li></ul><h3 id="3-8-大数值"><a href="#3-8-大数值" class="headerlink" title="3.8 大数值"></a>3.8 大数值</h3><p>java.math 包中有 BigInteger 和 BigDecimal。这两个类可以处理包含任意长度数字序列的数值。BigInteger 实现任意精度的整数运算，BigDecimal 实现任意精度的浮点运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BigTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> BigInteger.valueOf(<span class="hljs-number">100</span>);<br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> BigInteger.valueOf(<span class="hljs-number">200</span>);<br><span class="hljs-comment">// 加</span><br>        System.out.println(a.add(b));<br>        <span class="hljs-comment">// 减</span><br>        System.out.println(a.subtract(b));<br>        <span class="hljs-comment">// 乘</span><br>        System.out.println(a.multiply(b));<br>        <span class="hljs-comment">// 除</span><br>        System.out.println(a.divide(b));<br>        <span class="hljs-comment">// 取余</span><br>        System.out.println(a.mod(b));<br>        <span class="hljs-comment">// 比较</span><br>        System.out.println(a.compareTo(b));<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// BigDecimal 中 divide 需要指定舍入方式，RoundingMode.HALF_UP 即四舍五入</span><br></code></pre></td></tr></table></figure><h3 id="3-9-数组"><a href="#3-9-数组" class="headerlink" title="3.9 数组"></a>3.9 数组</h3><p>数组是一种数据结构，用来存储同一类型值的集合。通过整型下标可以访问数组的每一个值。声明数组时，需要指出数组类型和数组变量的名字，<code>int[] a 或 int a[]</code>，初始化使用 new 运算符，<code>int[] a = new int[10]</code>，其中 10 表示数组长度，不要求是常量，数组一但初始化长度就不能再修改大小。</p><ul><li>创建数字数组时，所有元素都初始化 0</li><li>创建 boolean 数组时，元素都初始化为 false</li><li>创建对象数组，元素都初始化为 null，表示还未存放对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">创建一个长度为 10 的数组，可访问的范围为 0 ~ 9，索引 0 开始</span><br><span class="hljs-comment">arr.length 可以获取数组的元素个数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntArrayTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-comment">// 也可以创建并赋予初始值</span><br>        <span class="hljs-comment">// int[] arr = new int[] &#123;1, 4, 9, 16&#125;</span><br>        <span class="hljs-comment">// int[] arr = &#123;1, 4, 9, 16&#125;</span><br>        <br>        <span class="hljs-comment">// 初始化数组</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>            arr[i] = i * i;<br>        &#125;<br>        <br>        <span class="hljs-comment">// arr[i] 通过索引取值，并打印出来</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-9-1-数组遍历"><a href="#3-9-1-数组遍历" class="headerlink" title="3.9.1 数组遍历"></a>3.9.1 数组遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntArrayTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;;<br><br>        <span class="hljs-comment">// 常规 for 循环</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 增强 for 循环</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a: arr)&#123;<br>            System.out.print(a + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// Arrays.toString()</span><br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-9-2-数组拷贝"><a href="#3-9-2-数组拷贝" class="headerlink" title="3.9.2 数组拷贝"></a>3.9.2 数组拷贝</h4><ul><li><code>int[] a = new int[10]; int[] b = a;</code> b 和 a 引用的是一个同一个数组</li><li>如果需要所有值拷贝到新数组则需要使用 Arrays.copyOf() 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntArrayTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;;<br>        <span class="hljs-type">int</span>[] arr1 = arr;<br>        <span class="hljs-comment">// 两个打印为一个地址，即指向同一个数组引用，浅拷贝</span><br>        System.out.println(arr);<br>        System.out.println(arr1);<br>        arr1[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;<br>        <span class="hljs-comment">// 修改 arr1 即修改 arr</span><br>        System.out.println(Arrays.toString(arr));<br>        System.out.println(Arrays.toString(arr1));<br><br>        <span class="hljs-comment">// 第二个参数为新数组的长度，大于原数组就默认初始化，小于就裁剪原数组</span><br>        <span class="hljs-type">int</span>[] arr2 = Arrays.copyOf(arr, <span class="hljs-number">2</span> * arr.length);<br>        <span class="hljs-type">int</span>[] arr3 = Arrays.copyOf(arr, <span class="hljs-number">3</span>);<br>        System.out.println(Arrays.toString(arr2));<br>        System.out.println(Arrays.toString(arr3));<br>        System.out.println(arr2);<br>        System.out.println(arr);<br>        arr2[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;<br>        <span class="hljs-comment">// 两个数组没有指向一个数组，因此单个修改不印象原数组，深拷贝</span><br>        System.out.println(Arrays.toString(arr));<br>        System.out.println(Arrays.toString(arr2));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-9-3-命令行参数"><a href="#3-9-3-命令行参数" class="headerlink" title="3.9.3 命令行参数"></a>3.9.3 命令行参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArgsTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;args[&quot;</span> + i + <span class="hljs-string">&quot;]: &quot;</span> + args[i]);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">$ java ArgsTest -h hello -a -b</span><br><span class="hljs-comment">args[0]: -h</span><br><span class="hljs-comment">args[1]: hello</span><br><span class="hljs-comment">args[2]: -a</span><br><span class="hljs-comment">args[3]: -b</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="3-9-4-数组排序"><a href="#3-9-4-数组排序" class="headerlink" title="3.9.4 数组排序"></a>3.9.4 数组排序</h4><p>可以使用 Arrays.sort()，对数组进行排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* Arrays 中的常用方法</span><br><span class="hljs-comment">1、返回数组字符串</span><br><span class="hljs-comment">static String toString(type[] a)</span><br><span class="hljs-comment">2、拷贝数组，length 大于 a.length 则初始化，小于则只截取 length 长度。[start, end)</span><br><span class="hljs-comment">static type copeOf(type[] a, int length)</span><br><span class="hljs-comment">static type copeOfRange(type[] a, int start, int end).</span><br><span class="hljs-comment">3、使用优化的快速排序对数组进行排序</span><br><span class="hljs-comment">static void sort(type[] a)</span><br><span class="hljs-comment">4、二分查找，原数组必须有序,查找成功返回对应下标，查找失败返回负数 r,-r-1 则是查找元素可插入的位置</span><br><span class="hljs-comment">static int binarySearch(type[] a, type v)</span><br><span class="hljs-comment">static int binarySearch(type[] a, int start, int end, type v)</span><br><span class="hljs-comment">5、填充数组</span><br><span class="hljs-comment">static void fill(type[] a, type v)</span><br><span class="hljs-comment">6、如果两个数组大小相同，下标相同的元素也相等，就返回 true</span><br><span class="hljs-comment">static boolean equals(type[] a, type[] b)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="3-9-6-多维数组"><a href="#3-9-6-多维数组" class="headerlink" title="3.9.6 多维数组"></a>3.9.6 多维数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 声明二维数组</span><br><span class="hljs-type">double</span>[][] a;<br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-type">double</span>[][] a = nwe <span class="hljs-type">double</span>[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<br><br><span class="hljs-type">double</span>[][] a = &#123;<br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;,<br>    &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;,<br>    &#123;<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;<br>&#125;<br><br><span class="hljs-comment">// 遍历二维数组</span><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiArrayTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span>[][] a = &#123;<br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;,<br>            &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;,<br>            &#123;<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; a[i].length; j++)&#123;<br>                System.out.print(a[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>[] nums: a)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num: nums)&#123;<br>                System.out.print(num + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>        System.out.println(Arrays.deepToString(a));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-9-7-不规则数组"><a href="#3-9-7-不规则数组" class="headerlink" title="3.9.7 不规则数组"></a>3.9.7 不规则数组</h4><p>Java 实际上没有多维数组，只有一维数组。多维数组其实是“数组的数组”，a[i] 处存放的数组的引用，因此可以方便的构造“不规则”数组，即数组的每一行有不同的长度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IrregularArrayTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>][];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>            arr[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[i + <span class="hljs-number">1</span>];<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>[] nums: arr)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num: nums)&#123;<br>                System.out.print(num + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">0 </span><br><span class="hljs-comment">0 0 </span><br><span class="hljs-comment">0 0 0 </span><br><span class="hljs-comment">0 0 0 0 </span><br><span class="hljs-comment">0 0 0 0 0</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="4-对象与类"><a href="#4-对象与类" class="headerlink" title="4 对象与类"></a>4 对象与类</h2><h3 id="4-1-OOP-概述"><a href="#4-1-OOP-概述" class="headerlink" title="4.1 OOP 概述"></a>4.1 OOP 概述</h3><h4 id="4-1-1-类"><a href="#4-1-1-类" class="headerlink" title="4.1.1 类"></a>4.1.1 类</h4><p>类是构造对象的模板或蓝图，由类构造对象的过程成为创建类的实例。</p><p>封装是将数据和行为组合在一个包中，并对对象的使用者隐藏了数据的实现方式。对象中的数据称为实例域，操纵数据的过程称为方法。封装的关键在于绝不能让类中的方法直接访问其他类的实例域。</p><p>继承是扩展一个已有的类，并且新类具有所扩展类的全部属性和方法，并且新类可以提供新类的新方法和数据域。Java 中所有类都继承 Object。</p><h4 id="4-1-2-对象"><a href="#4-1-2-对象" class="headerlink" title="4.1.2 对象"></a>4.1.2 对象</h4><ul><li>对象的行为 —— 可以对对象应用哪些方法？</li><li>对象的状态 —— 当调用方法时，对象如何响应？</li><li>对象标识 —— 如何区分具有相同行为与状态的不同对象</li></ul><p>每个对象都保存着描述当前特征的信息。对象的状态必须通过调用方法实现（如果不是通过方法调用能改变对象的状态，封装则被破坏了）。作为类的实例，每个类的标识永远不同。</p><h4 id="4-1-3-识别类"><a href="#4-1-3-识别类" class="headerlink" title="4.1.3 识别类"></a>4.1.3 识别类</h4><p>识别类的简单规则时分析问题的过程中寻找名词，而方法对应着动词。在创建类的时候，哪些是名词和动词是重要的完全取决于个人的开发经验。</p><h4 id="4-1-4-类之间的关系"><a href="#4-1-4-类之间的关系" class="headerlink" title="4.1.4 类之间的关系"></a>4.1.4 类之间的关系</h4><ul><li>依赖（uses-a）：一个类的方法操纵另一个类的对象。应该尽可能将相互依赖的类减至最小</li><li>聚合（has-a）：类 A 的对象包含类 B 的对象，比如 Order 对象包含 Item 类</li><li>继承（is-a）：类 A 扩展 类 B，则类 A 不但包含从类 B 继承的方法，还会拥有一些额外的功能</li></ul><p>通常使用 UML（Unified Modeling Language）统一建模语言绘制类图，描述类之间的关系。</p><h3 id="4-2-预定义类"><a href="#4-2-预定义类" class="headerlink" title="4.2 预定义类"></a>4.2 预定义类</h3><h4 id="4-2-1-对象与对象变量"><a href="#4-2-1-对象与对象变量" class="headerlink" title="4.2.1 对象与对象变量"></a>4.2.1 对象与对象变量</h4><p>使用对象之前，必须构造对象并指定其初始状态。通过构造器构造实例，构造器是一个特殊方法，用来构造并初始化对象。</p><p>构造器的名字应该与类名相同，构造对象需要在构造器前加上 new 操作符。构造的对象可以赋给变量对此使用，声明一个类变量时如果没有初始化对象则无法调用方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// new 出来一个 Date 对象</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br><span class="hljs-comment">// 调用方法</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toString();<br><br><span class="hljs-comment">// 赋给一个变量多次使用</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br><span class="hljs-comment">// 声明 Date 对象变量</span><br>Date date;<br>date.toString(); <span class="hljs-comment">// error date 变量没有引用对象，无法调用方法</span><br><br><span class="hljs-comment">// 对象变量仅仅是引用一个对象，对象变量可以设为 null，表示没有引用任何对象</span><br>date = <span class="hljs-literal">null</span>;<br><span class="hljs-comment">// 局部变量不会自动初始化为 null，必须调用 new 或手动设置为 null 进行初始化</span><br></code></pre></td></tr></table></figure><h4 id="4-2-2-LocalDate-类"><a href="#4-2-2-LocalDate-类" class="headerlink" title="4.2.2 LocalDate 类"></a>4.2.2 LocalDate 类</h4><p>LocalDate 类采用熟悉的日历表示法。</p><ul><li>更改器方法，调用该方法对象状态会发生改变</li><li>访问器方法，只访问对象而不修改对象的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* LocalDate </span><br><span class="hljs-comment">1、构造一个表示当前日期的对象</span><br><span class="hljs-comment">static LocalTime now()</span><br><span class="hljs-comment">2、构造一个给定日期的对象</span><br><span class="hljs-comment">static LocalTime of(int year, int month, int day)</span><br><span class="hljs-comment">3、获取日期的年月日</span><br><span class="hljs-comment">int getYear()</span><br><span class="hljs-comment">int getMonthValue()</span><br><span class="hljs-comment">int getDayOfMonth()</span><br><span class="hljs-comment">4、获取当前星期几，使用 getValue 的到 1 ~ 7 的数字</span><br><span class="hljs-comment">DayOfWeek getDayOfWeek()</span><br><span class="hljs-comment">5、日期加减</span><br><span class="hljs-comment">LocalDate plusDays(int n)</span><br><span class="hljs-comment">LocalDate minusDays(int n)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalendarTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> LocalDate.now();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> date.getMonthValue();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> date.getDayOfMonth();<br><br>        date = date.minusDays(day - <span class="hljs-number">1</span>);<br>        <span class="hljs-type">DayOfWeek</span> <span class="hljs-variable">weekday</span> <span class="hljs-operator">=</span> date.getDayOfWeek();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> weekday.getValue();<br><br>        System.out.println(<span class="hljs-string">&quot;Mon Tue Wed Thu Fri Sat Sun&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; value; i++)&#123;<br>            System.out.print(<span class="hljs-string">&quot;    &quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">while</span>(date.getMonthValue() == month)&#123;<br>            System.out.printf(<span class="hljs-string">&quot;%3d&quot;</span>, date.getDayOfMonth());<br>            <span class="hljs-keyword">if</span>(date.getDayOfMonth() == day)&#123;<br>                System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            date = date.plusDays(<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(date.getDayOfWeek().getValue() == <span class="hljs-number">1</span>)&#123;<br>                System.out.println();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(date.getDayOfWeek().getValue() != <span class="hljs-number">1</span>)&#123;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">$ java CalendarTest      </span><br><span class="hljs-comment">Mon Tue Wed Thu Fri Sat Sun</span><br><span class="hljs-comment">                  1   2   3 </span><br><span class="hljs-comment">  4   5   6   7   8   9  10 </span><br><span class="hljs-comment"> 11  12  13  14  15  16  17 </span><br><span class="hljs-comment"> 18  19* 20  21  22  23  24 </span><br><span class="hljs-comment"> 25  26  27  28  29  30  31 </span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="4-3-自定义类"><a href="#4-3-自定义类" class="headerlink" title="4.3 自定义类"></a>4.3 自定义类</h3><h4 id="4-3-1-Employee-类"><a href="#4-3-1-Employee-类" class="headerlink" title="4.3.1 Employee 类"></a>4.3.1 Employee 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br>    <span class="hljs-keyword">private</span> LocalDate hireDay;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">()</span>&#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String n, <span class="hljs-type">double</span> s, <span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span>&#123;<br>        name = n;<br>        salary = s;<br>        hireDay = LocalDate.of(year, month, day);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> LocalDate <span class="hljs-title function_">getHireDay</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> hireDay;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">raiseSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> byPercent)</span>&#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">raise</span> <span class="hljs-operator">=</span> salary * byPercent / <span class="hljs-number">100</span>;<br>        salary += raise;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>类的所有方法都标记为 public，意味着任何类的任何方法都能调用这个方法。</p><p>三个实例域都用 private 修饰，意味着只有 Employee 自身能访问这些实例域，其他类方法不能。强烈建议实例域标记为 private。</p><h4 id="4-3-2-构造器"><a href="#4-3-2-构造器" class="headerlink" title="4.3.2 构造器"></a>4.3.2 构造器</h4><p>构造器总是伴随着 new 操作符被调用，而不能对一个已经存在的对象调用构造器到达重新设置实例域的目的。</p><ul><li>构造器与类同名</li><li>每个类可以有一个以上的构造器</li><li>构造器可以有 0 个、1 个或多个参数</li><li>构造器没有返回值</li><li>构造器总是伴随着 new 操作符一起调用</li><li>类默认会有一个无参数构造器方法，当定义了有参数的构造器方法，默认的无参构造器就无了，需要显式定义</li></ul><h4 id="4-3-3-隐式参数和显式参数"><a href="#4-3-3-隐式参数和显式参数" class="headerlink" title="4.3.3 隐式参数和显式参数"></a>4.3.3 隐式参数和显式参数</h4><p>在每一个方法中，关键字 this 代表隐式参数，代表当前对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">raiseSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> byPercent)</span>&#123;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">raise</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.salary * byPercent / <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">this</span>.salary += raise;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-4-封装的优点"><a href="#4-3-4-封装的优点" class="headerlink" title="4.3.4 封装的优点"></a>4.3.4 封装的优点</h4><p>实例域进行私有化，提供域访问器和域更改器方法有两个优点，一除了类的方法之外，不会影响其他代码。二更改器方法能执行错误检查。不要返回引用可变的对象的访问器方法，如果需要可变对象引用应该克隆。</p><p>不要编写返回可变对象引用的访问器方法。若需要返回一个可变对象的引用，应将其克隆返回。</p><h4 id="4-3-5-私有方法"><a href="#4-3-5-私有方法" class="headerlink" title="4.3.5 私有方法"></a>4.3.5 私有方法</h4><p>将方法的修饰为 private，外部则无法调用，类的辅助方法通常不需要在外部调用声明为私有方法</p><h4 id="4-3-6-final-实例域"><a href="#4-3-6-final-实例域" class="headerlink" title="4.3.6 final 实例域"></a>4.3.6 final 实例域</h4><p>将实例域定义为 final，构建对象时必须初始化这样的域，且后面的操作无法修改该域。</p><h3 id="4-4-静态域和静态方法"><a href="#4-4-静态域和静态方法" class="headerlink" title="4.4 静态域和静态方法"></a>4.4 静态域和静态方法</h3><h4 id="4-4-1-静态域"><a href="#4-4-1-静态域" class="headerlink" title="4.4.1 静态域"></a>4.4.1 静态域</h4><p>如果实例域定义为 static，那么每个类只有一个这样的域，每个对象的所有实例域都有自己的一份拷贝。它属于类，不属于任何对象。</p><h4 id="4-4-2-静态常量"><a href="#4-4-2-静态常量" class="headerlink" title="4.4.2 静态常量"></a>4.4.2 静态常量</h4><p>static final 修饰，例如 Math.PI，System.out。</p><h4 id="4-4-3-静态方法"><a href="#4-4-3-静态方法" class="headerlink" title="4.4.3 静态方法"></a>4.4.3 静态方法</h4><p>静态方法是一种不能向对象实施操作的方法。建议使用类名调用静态方法不造成混淆。以下两种情况使用静态方法。</p><ul><li>一个方法不需要访问对象状态，其所需参数都是以通过显式参数提供</li><li>一个方法只需要访问类的静态域</li></ul><h4 id="4-4-4-工厂方法"><a href="#4-4-4-工厂方法" class="headerlink" title="4.4.4 工厂方法"></a>4.4.4 工厂方法</h4><p>静态工厂方法，用于构造不同的对象。</p><h4 id="4-4-5-main-方法"><a href="#4-4-5-main-方法" class="headerlink" title="4.4.5 main 方法"></a>4.4.5 main 方法</h4><p>main 方法不对任何对象进行操作，静态 main 方法将执行并创建程序所需要的对象。main 可用来做单元测试。</p><h3 id="4-5-方法参数"><a href="#4-5-方法参数" class="headerlink" title="4.5 方法参数"></a>4.5 方法参数</h3><p>Java 中，总是采用按值调用。方法得到的是所有参数的拷贝。</p><ul><li>一个方法不能修改一个基本数据类型的参数</li><li>一个方法可以改变一个对象参数的状态</li><li>一个方法不能让对象参数引用一个新的对象</li></ul><h3 id="4-6-对象构造"><a href="#4-6-对象构造" class="headerlink" title="4.6 对象构造"></a>4.6 对象构造</h3><h4 id="4-6-1-重载"><a href="#4-6-1-重载" class="headerlink" title="4.6.1 重载"></a>4.6.1 重载</h4><p>多个方法，相同的名字、不同的参数，便产生了重载。要完整的描述一个方法，需要指定方法名和参数类型，返回类型不是其中的一部分，因此不能有两个名字相同、参数类型相同但返回类型不同的方法。</p><h4 id="4-6-2-默认域初始化"><a href="#4-6-2-默认域初始化" class="headerlink" title="4.6.2 默认域初始化"></a>4.6.2 默认域初始化</h4><p>如果构造器中没有给实例域初始化，则自动初始化：数值为 0、布尔为 false、对象引用为 null。</p><h4 id="4-6-3-显式域初始化"><a href="#4-6-3-显式域初始化" class="headerlink" title="4.6.3 显式域初始化"></a>4.6.3 显式域初始化</h4><p>在实例域定义时就给其赋一个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-6-4-this-使用"><a href="#4-6-4-this-使用" class="headerlink" title="4.6.4 this 使用"></a>4.6.4 this 使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 参数名与实例域相同</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> salary)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.salary = salary;<br>&#125;<br><br><span class="hljs-comment">// 调用另一个构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(<span class="hljs-type">double</span> salary)</span>&#123;<br>    <span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;Employee #&quot;</span> + nextId, salary);<br>    nextId++;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-6-5-初始化块"><a href="#4-6-5-初始化块" class="headerlink" title="4.6.5 初始化块"></a>4.6.5 初始化块</h4><p>首先执行初始化块，然后再运行构造器。</p><p>静态初始化块，在类第一次加载的时候，会进行静态域的初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> nextId;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;静态初始化代码块&quot;</span>);<br>        nextId = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">10000</span>);<br>    &#125;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;初始化代码块&quot;</span>);<br>        id = nextId;<br>        nextId++;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> salary)</span>&#123;<br>        System.out.println(name + <span class="hljs-string">&quot;两个参数的构造方法&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(<span class="hljs-type">double</span> salary)</span>&#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;Employee #&quot;</span> + nextId, salary);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-7-包"><a href="#4-7-包" class="headerlink" title="4.7 包"></a>4.7 包</h3><h4 id="4-7-1-类的导入"><a href="#4-7-1-类的导入" class="headerlink" title="4.7.1 类的导入"></a>4.7.1 类的导入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// import</span><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">// 只能使用 * 导入 一个包，不能 *.*</span><br><br><br><span class="hljs-comment">// 命名冲突的问题，可以导入实际使用的确定包</span><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">// 也可以使用完全包名</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Date();<br></code></pre></td></tr></table></figure><h4 id="4-7-2-静态导入"><a href="#4-7-2-静态导入" class="headerlink" title="4.7.2 静态导入"></a>4.7.2 静态导入</h4><p>导入静态方法和静态字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Math.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticImportTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        System.out.println(pow(a, <span class="hljs-number">2</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-7-3-组织类"><a href="#4-7-3-组织类" class="headerlink" title="4.7.3 组织类"></a>4.7.3 组织类</h4><p> 类文件开头，写上 <code>package 包名;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">javac top/reajason/PayrollApp.java<br>java top.reajason.PayrollApp<br></code></pre></td></tr></table></figure><h3 id="4-8-类路径"><a href="#4-8-类路径" class="headerlink" title="4.8 类路径"></a>4.8 类路径</h3><p>unix：<code>/home/user/classdir:.:/home/user/archives/archive.jar</code></p><p>windows：<code>c:\classdir;.;c:\archives\archive.jar</code></p><p>类路径所列出的目录和归档文件是搜寻类的起始点，默认类路径包含 . (当前目录)。</p><p>Java 6 开始可在 JAR 文件目录指定通配符，例如（archives 中所有 JAR 文件都包含到类路径中）：</p><p>windows：<code>c:\classdir;.;c:\archives\*</code></p><p>java.lang 包被默认导入。</p><h4 id="4-8-1-设置类路径"><a href="#4-8-1-设置类路径" class="headerlink" title="4.8.1 设置类路径"></a>4.8.1 设置类路径</h4><p><code>java -classpath /home/user/classdir:.:/home/user/archives/archive.jar MyApp</code></p><p>不要将 CLASSPATH 设置成全局变量。</p><h3 id="4-9-文档注释"><a href="#4-9-文档注释" class="headerlink" title="4.9 文档注释"></a>4.9 文档注释</h3><p>javadoc 能将源文件生成一个 HTML 文档。</p><p>javadoc 将在以下中抽取信息：</p><ul><li>包</li><li>公有类与接口</li><li>公有的和受保护的构造器及方法</li><li>共有的和受保护的域</li></ul><h4 id="4-9-1-类注释"><a href="#4-9-1-类注释" class="headerlink" title="4.9.1 类注释"></a>4.9.1 类注释</h4><p>类注释必须放在 import 语句之后，类定义之前。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 类注释</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Card</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-9-2-方法注释"><a href="#4-9-2-方法注释" class="headerlink" title="4.9.2 方法注释"></a>4.9.2 方法注释</h4><p>每一个方法注释必须放在所描述的方法之前。</p><ul><li>@param 变量描述，可占据多行，一个方法的所有 @param 标记必须放在一起</li><li>@return 描述，可占据多行</li><li>@throws 类描述，表示方法可能抛出的异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 增加雇工的工资</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> byPercent 为 10 则是增长 10%</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回增加后的工资</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">raiseSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> byPercent)</span>&#123;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">raise</span> <span class="hljs-operator">=</span> salary * byPercent / <span class="hljs-number">100</span>;<br>    salary += raise;<br>    <span class="hljs-keyword">return</span> raise;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-9-3-域注释"><a href="#4-9-3-域注释" class="headerlink" title="4.9.3 域注释"></a>4.9.3 域注释</h4><p>只建立文档需要对公共域（通常指静态常量）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 利率</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">RATES</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><h4 id="4-9-4-通用注释"><a href="#4-9-4-通用注释" class="headerlink" title="4.9.4 通用注释"></a>4.9.4 通用注释</h4><ul><li>@author 姓名：可以使用多个</li><li>@version 文本：版本描述</li><li>@since 文本：引入特性的描述</li><li>@deprecated 文本：不再使用的注释，并给出建议</li><li>@see 引用：可以添加多个，但必须放在一起</li></ul><h4 id="4-9-6-包与概述注释"><a href="#4-9-6-包与概述注释" class="headerlink" title="4.9.6 包与概述注释"></a>4.9.6 包与概述注释</h4><p>包注释的两种方式（在包目录添加一个单独的文件）：</p><ol><li>提供一个 package.html。在标记 &lt;body&gt;&lt;&#x2F;body&gt; 之间的所有文本都会抽取出来。</li><li>提供一个 package-info.java 文件。文件开头即写文档注释后面是 package 语句。</li></ol><p>概述：</p><p>创建一个名为 overview.html 文件，这个文件位于所有源文件的父目录中。标记 &lt;body&gt;&lt;&#x2F;body&gt; 之间的所有文本都会抽取出来。</p><h4 id="4-9-7-注释抽取"><a href="#4-9-7-注释抽取" class="headerlink" title="4.9.7 注释抽取"></a>4.9.7 注释抽取</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">javadoc -d docDirectory nameOfPackage<br><br>javadoc -d docDirectory nameOfPackage1 nameOfPackage2<br><br>javadoc -d docDirectory *.java<br></code></pre></td></tr></table></figure><h3 id="4-10-类设计技巧"><a href="#4-10-类设计技巧" class="headerlink" title="4.10 类设计技巧"></a>4.10 类设计技巧</h3><ol><li>一定要保证数据私有</li><li>一定要对数据初始化，手动初始化</li><li>不要在类中使用过多的基本类型</li><li>不是所有的域都需要独立的域访问器和域更改器</li><li>将职责过多的类进行分解</li><li>类名和方法名能够体现它们的职责</li><li>优先使用不可变的类</li></ol><h2 id="5-继承"><a href="#5-继承" class="headerlink" title="5 继承"></a>5 继承</h2><h3 id="5-1-类、超类和子类"><a href="#5-1-类、超类和子类" class="headerlink" title="5.1 类、超类和子类"></a>5.1 类、超类和子类</h3><h4 id="5-1-1-定义子类"><a href="#5-1-1-定义子类" class="headerlink" title="5.1.1 定义子类"></a>5.1.1 定义子类</h4><p>关键字 extends 表示继承，超类和子类是 Java 程序员最常用的两个术语。子类比超类拥有更多的功能。将通用方法放在超类中，而将特殊扩展方法放在子类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-1-2-覆盖方法"><a href="#5-1-2-覆盖方法" class="headerlink" title="5.1.2 覆盖方法"></a>5.1.2 覆盖方法</h4><p>子类可覆盖超类的方法（同名，同参数），子类不能直接访问超类的私有域，可通过 super 关键字调用父类的方法。super 不是一个对象的引用，只是指示编译器调用超类方法的特殊关键字。</p><h4 id="5-1-3-子类构造器"><a href="#5-1-3-子类构造器" class="headerlink" title="5.1.3 子类构造器"></a>5.1.3 子类构造器</h4><p>使用 super 调用超类构造器的语句必须放在子类构造器的第一条语句，如果超类没有不带参数的构造器，子类又没有显示调用超类的其他构造器，编译器则会报错。</p><p>一个对象变量可以指示多个实际类型的现象被称为多态，在运行时能够自动地选择调用哪个方法的现象称为动态绑定。</p><h4 id="5-1-4-继承层次"><a href="#5-1-4-继承层次" class="headerlink" title="5.1.4 继承层次"></a>5.1.4 继承层次</h4><p>由一个公共超类派生出来的所有类的集合称为继承层次，在继承层次中，某个特定类到其祖先的路径称为该类的继承链。Java 不支持多继承。</p><h4 id="5-1-5-多态"><a href="#5-1-5-多态" class="headerlink" title="5.1.5 多态"></a>5.1.5 多态</h4><p>继承关系 is-a 的另一表述是置换法则，程序中出现超类对象的任何地方都可以用子类对象置换。Java 中，对象变量是多态的。子类数组的引用可以转换成超类数组的引用，而无需强制类型转换。</p><p>如果方法或构造器由 private 或 static 或 final 修饰，那么编译器能准确知道调用哪个方法，这种调用方式称为静态绑定。由于动态绑定的机制，运行时，调用方法先查询当前类对象的方法，然后查询所继承超类的方法。</p><h4 id="5-1-6-final-类和方法"><a href="#5-1-6-final-类和方法" class="headerlink" title="5.1.6 final 类和方法"></a>5.1.6 final 类和方法</h4><p>用 final 修饰的类无法被继承，用 final 修饰的方法，子类无法覆盖。声明为 final 的主要目的是确保它们在子类中不会改变语义。</p><h4 id="5-1-7-强制类型转换"><a href="#5-1-7-强制类型转换" class="headerlink" title="5.1.7 强制类型转换"></a>5.1.7 强制类型转换</h4><ul><li>只能在继承层次内进行类型转换</li><li>在将超类转换成子类之前，应该使用 instanceof 进行检查</li></ul><p>一般情况下应该尽量少用类型转换和 instanceof 运算符</p><h4 id="5-1-8-抽象类"><a href="#5-1-8-抽象类" class="headerlink" title="5.1.8 抽象类"></a>5.1.8 抽象类</h4><p>使用关键字 abstract 声明一个抽象类和抽象方法。为了程序的清晰度，包含一个或多个抽象方法的类本身必须被声明为抽象的。除了抽象方法外，抽象类还可以包含字段和具体方法。</p><ul><li>类即使不含抽象方法，也能声明为抽象类</li><li>抽象类不能实例化</li><li>可定义抽象类的对象变量指向非抽象子类的对象</li></ul><p>扩展抽象类的两种选择：</p><ul><li>子类中任由部分抽象方法，即子类仍为抽象类</li><li>子类定义全部的抽象方法，子类不再是抽象类</li></ul><h4 id="5-1-9-受保护访问"><a href="#5-1-9-受保护访问" class="headerlink" title="5.1.9 受保护访问"></a>5.1.9 受保护访问</h4><p>超类中的某些方法允许被子类访问，或允许子类的方法访问超类的某个域，可以将方法或域声明为 protected。</p><ul><li>private —— 仅对本类可见</li><li>public —— 对所有类可见</li><li>protected —— 对本包和所有子类可见</li><li>默认 —— 对本包可见</li></ul><h3 id="5-2-Object"><a href="#5-2-Object" class="headerlink" title="5.2 Object"></a>5.2 Object</h3><p>Object 是 Java 中所有类的超类。</p><h4 id="5-2-1-equals-方法"><a href="#5-2-1-equals-方法" class="headerlink" title="5.2.1 equals 方法"></a>5.2.1 equals 方法</h4><p>equals 方法是用于检测一个对象是否等于另一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Objects.equals(a, b), a，b 都为 null 返回 true，某一个为 null 返回 false</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br>    ...<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object otherObject)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span> == otherObject)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(otherObject == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(getClass() != otherObject.getClass())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (Employee)otherObject;<br>        <span class="hljs-keyword">return</span> Objects.euqals(name, other.name).<br>            &amp;&amp; salary == other.salary<br>            &amp;&amp; Objects.equals(hireDay, other.hireDay);<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span>&#123;<br>    ...<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object otherObject)</span>&#123;<br>        <span class="hljs-comment">// 子类先调用超类的 equals 方法检测</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">super</span>.equals(otherObject))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">Manager</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (Manager)otherObject;<br>        <span class="hljs-keyword">return</span> bonus == other.bonus;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Java 语言规范要求 equals 方法具有以下的特性：</p><ol><li>自反性：对于任意非空引用 x，x.equals(x) 返回 true</li><li>对称性：对于任何引用 x、y，y.equals(x) 返回 true，x.equals(y) 也要返回 true</li><li>传递性：对于任何引用 x、y、z，x.equals(y) 返回 true，y.equals(z) 返回 true，那么 x.equals(z) 也要返回 true</li><li>一致性：</li><li>对于任意非空引用 x, x.equals(null) 返回 false</li></ol><p>编写一个完美的 equals 方法的建议：</p><ol><li><p>显式参数命名为 otherObject</p></li><li><p>检测 this 与 otherObject 是否引用同一个对象</p><p><code>if(this == otherObject) return true;</code></p></li><li><p>检测 otherObject 是否为 null</p><p><code>if(otherObject == null) return false;</code></p></li><li><p>比较 this 与 otherObject 是否是同一个类</p><ul><li><p>如果 equals 的语义在每个子类都有改变，使用 getClass 检测</p><p><code>if(getClass() != otherObject.getClass() return false;</code></p></li><li><p>如果所有子类都使用统一的语义，就是用 instanceof 检测</p><p><code>if(!(otherObject instanceof ClassName)) return false;</code></p></li></ul></li><li><p>将 otherObject 转换为相应的类类型变量</p><p><code>ClassName other = (ClassName)otherObject;</code></p></li><li><p>将所需要比较的域进行比较，基础类型使用 &#x3D;&#x3D;，对象引用使用 Objects.equals()</p><p><code>return field1 == other.field1 &amp;&amp; Objects.equals(field2, other.field2) &amp;&amp; ...;</code></p></li></ol><p>子类如果重新定义 equals 方法，就要先调用 super.equals(OtherObject) 检测</p><h4 id="5-2-2-hashCode-方法"><a href="#5-2-2-hashCode-方法" class="headerlink" title="5.2.2 hashCode 方法"></a>5.2.2 hashCode 方法</h4><p>散列码是由对象导出的一个整型值。如果重新定义了 equals 方法，就必须重新定义 hashCode 方法，以便将对象插入到散列表中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Objects.hash(Object... objects) 返回由提供对象的散列码组合而得到的散列码</span><br><span class="hljs-comment">// Objects.hashCode(Object a) 如果 a 为 null 返回 0，否则返回 a.hashCode()</span><br></code></pre></td></tr></table></figure><h4 id="5-2-3-toString-方法"><a href="#5-2-3-toString-方法" class="headerlink" title="5.2.3 toString 方法"></a>5.2.3 toString 方法</h4><p>它用于返回对象值的字符串。只要对象与一个字符串通过操作符 + 连接起来，Java 编译器就自动调用 toString 方法。Object 类定义的 toString 方法，用来打印对象所属的类名和散列码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> equals;<br><br><span class="hljs-keyword">import</span> java.time.*;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br>    <span class="hljs-keyword">private</span> LocalDate hireDay;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> salary, <span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>        hireDay = LocalDate.of(year, month, day);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> LocalDate <span class="hljs-title function_">getHireDya</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> hireDay;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">raiseSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> byPercent)</span>&#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">raise</span> <span class="hljs-operator">=</span> salary * byPercent / <span class="hljs-number">100</span>;<br>        salary += raise;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object otherObject)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span> == otherObject)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(otherObject == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(getClass() != otherObject.getClass())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (Employee)otherObject;<br><br>        <span class="hljs-keyword">return</span> Objects.equals(name, other.name) &amp;&amp; salary == other.salary<br>            &amp;&amp; Objects.equals(hireDay, other.hireDay);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name, salary, hireDay);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> getClass().getName() + <span class="hljs-string">&quot;[name=&quot;</span> + name + <span class="hljs-string">&quot;,salary=&quot;</span> + salary<br>            + <span class="hljs-string">&quot;,hireDay=&quot;</span> + hireDay + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> equals;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> bonus;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Manager</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> salary, <span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name, salary, year, month, day);<br>        bonus = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">baseSalary</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.getSalary();<br>        <span class="hljs-keyword">return</span> baseSalary + bonus;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBonus</span><span class="hljs-params">(<span class="hljs-type">double</span> bonus)</span>&#123;<br>        <span class="hljs-built_in">this</span>.bonus = bonus;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object otherObject)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!(<span class="hljs-built_in">super</span>.equals(otherObject)))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">Manager</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (Manager)otherObject;<br>        <span class="hljs-keyword">return</span> bonus == other.bonus;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.hashCode() + <span class="hljs-number">17</span> * Double.hashCode(bonus);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString() + <span class="hljs-string">&quot;[bonus=&quot;</span> + bonus + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3-泛型数组列表"><a href="#5-3-泛型数组列表" class="headerlink" title="5.3 泛型数组列表"></a>5.3 泛型数组列表</h3><p>ArrayList 是一个采用类型参数的泛型类，为了指定数组列表中保存的类型需要使用一对尖括号将类名括起来加在后面，例如 <code>ArrayList&lt;Employee&gt;</code>。ArrayList 是一个动态扩容数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、构造一个空数组列表</span><br><span class="hljs-comment">ArrayList&lt;E&gt;()</span><br><span class="hljs-comment">2、用指定容量构造一个空数组列表</span><br><span class="hljs-comment">ArrayList&lt;E&gt;(int initialCapacity)</span><br><span class="hljs-comment">3、在数组列表尾端添加一个元素，永远返回 true</span><br><span class="hljs-comment">boolean add(E obj)</span><br><span class="hljs-comment">4、返回存储在数组列表中当前元素数量</span><br><span class="hljs-comment">int size()</span><br><span class="hljs-comment">5、将数组列表的存储容量削减到当前尺寸</span><br><span class="hljs-comment">void trimToSize()</span><br><span class="hljs-comment">6、设置指定位置的元素值</span><br><span class="hljs-comment">void set(int index, E obj)</span><br><span class="hljs-comment">7、获取指定位置的元素值</span><br><span class="hljs-comment">E get(int index)</span><br><span class="hljs-comment">8、指定位置插入元素，后面的元素向后移</span><br><span class="hljs-comment">void add(int index, E obj)</span><br><span class="hljs-comment">9、删除指定位置元素并返回，后面的元素向前移</span><br><span class="hljs-comment">E remove(int index)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayListTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        ArrayList&lt;Employee&gt; staff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        staff.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Carl&quot;</span>, <span class="hljs-number">75000</span>, <span class="hljs-number">1987</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>));<br>        staff.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Harry&quot;</span>, <span class="hljs-number">50000</span>, <span class="hljs-number">1987</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>));<br>        staff.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Tony&quot;</span>, <span class="hljs-number">40000</span>, <span class="hljs-number">1990</span>, <span class="hljs-number">3</span>, <span class="hljs-number">15</span>));<br><br>        <span class="hljs-keyword">for</span>(Employee e : staff)&#123;<br>            System.out.println(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-4-对象包装器"><a href="#5-4-对象包装器" class="headerlink" title="5.4 对象包装器"></a>5.4 对象包装器</h3><p>对象包装器是不可变的，一旦创建就无法改变其中的值，而且对象包装类是 final，不允许有子类。Integer 类对应的基本类型是 int，尖括号中的类型参数不允许是基本类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-comment">// 编译器会自动翻译为 list.add(Integer.valueOf(3))，称为自动装箱</span><br>list.add(<span class="hljs-number">3</span>);<br><br><span class="hljs-comment">// 编译器会自动翻译为 list.get(i).intValue()，称为自动拆箱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> list.get(i)<br></code></pre></td></tr></table></figure><p>自动装箱规范要求 boolean、byte、char &lt;&#x3D; 127，介于 -128 ~ 127 之间的 short 和 int 被包装到固定的对象中（常量池？）。</p><p>装箱和拆箱是编译器要做的事情，而不是虚拟机。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* Integer 常用 API，其他包装类也实现了相应的方法</span><br><span class="hljs-comment">1、以 int 类型返回 Integer 对象的值</span><br><span class="hljs-comment">int intValue()</span><br><span class="hljs-comment">2、返回数值类型的字符串，默认十进制，也可指定进制</span><br><span class="hljs-comment">static String toString(int i)</span><br><span class="hljs-comment">static String toString(int i, int radix)</span><br><span class="hljs-comment">3、返回字符串 s 的整型数值</span><br><span class="hljs-comment">static int parseInt(String s)</span><br><span class="hljs-comment">static int parseInt(String s, int radix)</span><br><span class="hljs-comment">4、将 s 表示的整型数值进行初始化乘一个新的 Integer 对象</span><br><span class="hljs-comment">static Integer valueOf(String s)</span><br><span class="hljs-comment">static Integer valueOf(String s, int radix)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="5-5-可变数量参数"><a href="#5-5-可变数量参数" class="headerlink" title="5.5 可变数量参数"></a>5.5 可变数量参数</h3><p><code>Object... 与 Object[] 完全一样 </code>，因此 main 方法可以改写为<code>public static void main(String... args)</code></p><h3 id="5-6-枚举类"><a href="#5-6-枚举类" class="headerlink" title="5.6 枚举类"></a>5.6 枚举类</h3><p>在比较枚举类型的值时，永远不需要调用 equals，直接使用 &#x3D;&#x3D; 即可。枚举类型中可以添加构造器、方法和域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、返回指定名字、给定类的枚举常量</span><br><span class="hljs-comment">static Enum valueOf(Class enumClass, String name)</span><br><span class="hljs-comment">2、返回枚举常量名</span><br><span class="hljs-comment">String toString()</span><br><span class="hljs-comment">3、返回枚举常量在 enum 声明中的位置，从 0 开始</span><br><span class="hljs-comment">int ordinal()</span><br><span class="hljs-comment">4、如果枚举常量在 other 之前，返回负值，相等返回 0，之后返回正值</span><br><span class="hljs-comment">int caompareTo(E other)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnumTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String... args)</span>&#123;<br>        <span class="hljs-type">Size</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> Enum.valueOf(Size.class, <span class="hljs-string">&quot;SMALL&quot;</span>);<br>        System.out.println(size);<br>        System.out.println(size.getAbbreviation());<br>        System.out.println(size == Size.SMALL);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Size</span>&#123;<br>    SMALL(<span class="hljs-string">&quot;S&quot;</span>), MEDIUM(<span class="hljs-string">&quot;M&quot;</span>), LARGE(<span class="hljs-string">&quot;L&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Size</span><span class="hljs-params">(String abbreviation)</span>&#123;<br>        <span class="hljs-built_in">this</span>.abbreviation = abbreviation;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAbbreviation</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> abbreviation;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String abbreviation;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-7-反射"><a href="#5-7-反射" class="headerlink" title="5.7 反射"></a>5.7 反射</h3><p>能够分析类能力的程序称为反射，反射机制可以用来：</p><ul><li>在运行时分析类的能力</li><li>在运行时查看对象</li><li>实现通用数组操作代码</li><li>利用 Method 对象</li></ul><h4 id="5-7-1-Class-类"><a href="#5-7-1-Class-类" class="headerlink" title="5.7.1 Class 类"></a>5.7.1 Class 类</h4><p>在运行期间，Java 运行时系统始终为所有对象维护一个称为运行时的类型标识，保存这个这些信息的类被称为 CLass。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">// getClass()</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cl1</span> <span class="hljs-operator">=</span> i.getClass();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java.lang.Integer&quot;</span>;<br>        <span class="hljs-comment">// Class.forName()</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cl2</span> <span class="hljs-operator">=</span> Class.forName(className);<br>        <span class="hljs-comment">// 类.class</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cl3</span> <span class="hljs-operator">=</span> Integer.class;<br><br>        System.out.println(cl1);<br>        System.out.println(cl2);<br>        System.out.println(cl3);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-7-2-分析类的能力"><a href="#5-7-2-分析类的能力" class="headerlink" title="5.7.2 分析类的能力"></a>5.7.2 分析类的能力</h4><p>java.lang.relect 包中有三个类 Field、Method 和 Constructor 分别用于描述类的字段、方法和构造器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* Class</span><br><span class="hljs-comment">1、获取类的 Field 对象数组</span><br><span class="hljs-comment">Field[] getFields() // 获取这个类或其超类的公共字段</span><br><span class="hljs-comment">Field getField(String name)</span><br><span class="hljs-comment">Field[] getDeclareFields() // 获取这个类的全部字段</span><br><span class="hljs-comment">Field getDeclareField(String name)</span><br><span class="hljs-comment">2、获取类的 Method 对象数组</span><br><span class="hljs-comment">Method[] getMethods()</span><br><span class="hljs-comment">Method[] getDeclareMethods()</span><br><span class="hljs-comment">3、获取类包名</span><br><span class="hljs-comment">String getPackageName()</span><br><span class="hljs-comment">4、获取数组类型</span><br><span class="hljs-comment">Class getComponentType()</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* Field\Method\Constructor</span><br><span class="hljs-comment">1、返回当前对象所在的 Class 对象</span><br><span class="hljs-comment">Class getDelcaringClass()</span><br><span class="hljs-comment">2、返回修饰符</span><br><span class="hljs-comment">int getModifiers()</span><br><span class="hljs-comment">String getModifiers().toString()</span><br><span class="hljs-comment">3、返回名字</span><br><span class="hljs-comment">String getName()</span><br><span class="hljs-comment">4、获取方法参数</span><br><span class="hljs-comment">Class[] getParameterTypes()</span><br><span class="hljs-comment">5、获取 Method 对象返回值类型</span><br><span class="hljs-comment">Class getReturnType()</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>访问私有字段、方法、构造器时，需要设置 setAccessible 为 true。</p><h4 id="5-7-3-反射使用"><a href="#5-7-3-反射使用" class="headerlink" title="5.7.3 反射使用"></a>5.7.3 反射使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1、通过 forName 获取 Class 对象</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;top.reajason.test.Student&quot;</span>);<br><br><span class="hljs-comment">// 获取公共无参构造 getDeclaredConstructor() 能获取到私有的</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor1</span> <span class="hljs-operator">=</span> clazz.getConstructor();<br>System.out.println(constructor1);<br><br><span class="hljs-comment">// 获取公共有参构造 getDeclaredConstructors() 能获取到私有的</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor2</span> <span class="hljs-operator">=</span> clazz.getConstructor(String.class, <span class="hljs-type">int</span>.class);<br>System.out.println(constructor2);<br><br><span class="hljs-comment">// 获取所有公共构造方法的数组(无法获取私有的) getDeclaredConstructors() 能获取到私有的</span><br>Constructor[] constructors = clazz.getConstructors();<br><span class="hljs-keyword">for</span> (Constructor constructor : constructors) &#123;<br>    System.out.println(constructor);<br>&#125;<br><br><span class="hljs-comment">// 创建 Student 实例</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> (Student) constructor1.newInstance();<br><span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> (Student) constructor2.newInstance(<span class="hljs-string">&quot;你好&quot;</span>, <span class="hljs-number">13</span>);<br>System.out.println(s2); <span class="hljs-comment">// Student&#123;name=&#x27;你好&#x27;, age=13&#125;</span><br><br><span class="hljs-comment">// 使用私有化需要取消访问检查（暴力反射）</span><br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Field[] getFields()  获取所有公共成员变量对象的数组</span><br><span class="hljs-comment">Field[] getDeclaredFields(); 获取所有成员变量对象的数组</span><br><span class="hljs-comment">Field getField(String name); 获取单个公共的成员变量对象</span><br><span class="hljs-comment">Field getDeclaredField(String name); 获取单个成员变量对象</span><br><span class="hljs-comment">int getModifuers(); 获取修饰符值</span><br><span class="hljs-comment">getType(); 属性的类型</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// void set(Object obj, Object value) 给指定对象的成员变量赋值</span><br><br><span class="hljs-comment">// Object get(Object obj) 获取指定对象的 Field 的值</span><br><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;top.reajason.test.Student&quot;</span>);<br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> clazz.getConstructor(String.class, <span class="hljs-type">int</span>.class);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> (Student) constructor.newInstance(<span class="hljs-string">&quot;xiaobai&quot;</span>, <span class="hljs-number">23</span>);<br><span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>name.setAccessible(<span class="hljs-literal">true</span>);<br>System.out.println(name.get(s1)); <span class="hljs-comment">// xiaobai</span><br>name.set(s1, <span class="hljs-string">&quot;nitama&quot;</span>);<br>System.out.println(name.get(s1)); <span class="hljs-comment">// nitama</span><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Method[] getMethods() 获取所有公共成员方法对象的数组，包括继承的</span><br><span class="hljs-comment">Method[] hetDeclaredMethods() 获取所有成员方法对象的数组，不包含继承的</span><br><span class="hljs-comment">Method getMethod(String name, Class&lt;?&gt;...parameterTypes)  获取单个公共成员方法对象</span><br><span class="hljs-comment">Method hetDeclaredMethod(String name, Class&lt;?&gt;...parameterTypes) 获取单个成员方法对象</span><br><span class="hljs-comment">getName(); 获取方法名称</span><br><span class="hljs-comment">getModifiers(); 获取修饰符值</span><br><span class="hljs-comment">getReturnType(); 获取返回类型</span><br><span class="hljs-comment">getParameterTypes(); 获取参数类型数组</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// Object invoke(Object obj, Object...args) 调用方法</span><br><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;top.reajason.test.Student&quot;</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> (Student) clazz.getConstructor(String.class, <span class="hljs-type">int</span>.class).newInstance(<span class="hljs-string">&quot;xioabai&quot;</span>, <span class="hljs-number">13</span>);<br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;getAge&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(s1);<br>System.out.println(result); <span class="hljs-comment">// 13</span><br></code></pre></td></tr></table></figure><h3 id="5-8-继承技巧"><a href="#5-8-继承技巧" class="headerlink" title="5.8 继承技巧"></a>5.8 继承技巧</h3><ol><li>将公共操作和域放在超类</li><li>不要使用受保护的域</li><li>使用继承实现 is-a 关系</li><li>除非所有继承的方法都有意义，否则不要使用继承</li><li>在覆盖方法时，不要改变预期的行为</li><li>使用多态而非类型信息</li><li>不要过多的使用反射</li></ol><h2 id="6-接口、lambda-表达式、内部类"><a href="#6-接口、lambda-表达式、内部类" class="headerlink" title="6 接口、lambda 表达式、内部类"></a>6 接口、lambda 表达式、内部类</h2><h3 id="6-1-接口"><a href="#6-1-接口" class="headerlink" title="6.1 接口"></a>6.1 接口</h3><h4 id="6-1-1-接口概念"><a href="#6-1-1-接口概念" class="headerlink" title="6.1.1 接口概念"></a>6.1.1 接口概念</h4><p>接口不是类，而是对类的一组需求的描述。接口的所有方法默认是 public 而无需指定。接口中不能有实例域，Java SE8 之前不能在接口中实现方法。</p><p>类实现一个接口的两个步骤：</p><ul><li>让类声明为实现给定的接口，使用 implements</li><li>对接口中的所有方法进行定义，实现接口时必须声明为 public</li></ul><h4 id="6-1-2-接口的特性"><a href="#6-1-2-接口的特性" class="headerlink" title="6.1.2 接口的特性"></a>6.1.2 接口的特性</h4><p>接口不是类，不能使用 new 实例化一个接口，但是可以声明接口变量，指向实现了接口的类对象，也可以使用 instanceof 检测一个对象是否实现了某个接口，接口可以扩展接口，接口中不能包含实例域或静态方法，但是可以包含常量 public static final，一个类只能拥有一个超类，但是可以实现多个接口。</p><p>Java SE 8 中，允许接口中增加静态方法，通常放在伴随类中</p><p>可以使用 default 声明默认方法，提供默认实现，主要用来接口演化升级，默认方法冲突的两种情况：</p><ol><li>一个类实现了多个接口，并且多个接口有共同方法，此时需要类自己实现这个方法，解决冲突</li><li>一个类继承的超类和实现的接口中有重名方法，类优先原则，会自动忽略接口的方法。</li></ol><h3 id="6-2-接口示例"><a href="#6-2-接口示例" class="headerlink" title="6.2 接口示例"></a>6.2 接口示例</h3><h4 id="6-2-1-Comparator-接口"><a href="#6-2-1-Comparator-接口" class="headerlink" title="6.2.1 Comparator 接口"></a>6.2.1 Comparator 接口</h4><p>对一个对象数组进行排序的前提是这个对象必须是 Comparable 接口的类的实例。Arrays.sort 方法有两个版本一个是传入单个数组，一个是数组加一个比较器，比较器就是实现了 Comparator 接口的类的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompareStringTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        String[] friends = &#123;<span class="hljs-string">&quot;Peter&quot;</span>, <span class="hljs-string">&quot;Paul&quot;</span>, <span class="hljs-string">&quot;Mary&quot;</span>, <span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-string">&quot;Silly&quot;</span>&#125;;<br><br>        <span class="hljs-comment">// 使用 String 类实现了 Comparable 接口的 compareTo 方法进行比较（按照字典顺序）</span><br>        Arrays.sort(friends);<br>        <span class="hljs-comment">// ASCII 先后顺序</span><br>        System.out.println(Arrays.toString(friends));<br><br>        <span class="hljs-comment">// 自定义比较器，进行排序</span><br>        Arrays.sort(friends, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LengthComparator</span>());<br>        <span class="hljs-comment">// 根据字符串的长度</span><br>        System.out.println(Arrays.toString(friends));<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LengthComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;String&gt;&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(String first, String second)</span>&#123;<br>        <span class="hljs-keyword">return</span> first.length() - second.length();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-2-2-Cloneable-接口"><a href="#6-2-2-Cloneable-接口" class="headerlink" title="6.2.2 Cloneable 接口"></a>6.2.2 Cloneable 接口</h4><p>Cloneable 接口是 Java 提供的一组标记接口之一，Object 的 clone 方法是 protected，因此支只支持子类调用 clone 方法克隆它自己的对象，必须重新定义为 clone 为 public 才能允许所有方法克隆对象。</p><ul><li>实现 Clonable 接口</li><li>重新定义 clone 方法，并指定 public 访问修饰符</li></ul><p>深拷贝需要拷贝可变实例域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br>    <span class="hljs-keyword">private</span> Date hireDay;<br><br>    ...<br><br>    <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException&#123;<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">cloned</span> <span class="hljs-operator">=</span> (Employee)<span class="hljs-built_in">super</span>.clone();<br><br>        cloned.hireDay = (Date)hireDay.clone();<br><br>        <span class="hljs-keyword">return</span> cloned;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-3-lambda-表达式"><a href="#6-3-lambda-表达式" class="headerlink" title="6.3 lambda 表达式"></a>6.3 lambda 表达式</h3><p>lambda 表达式是一个可传递的代码块，之后可以执行一次或多次。</p><h4 id="6-3-1-lambda-表达式语法"><a href="#6-3-1-lambda-表达式语法" class="headerlink" title="6.3.1 lambda 表达式语法"></a>6.3.1 lambda 表达式语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 声明参数类型，返回一行代码的执行结果</span><br>(String first, String second) -&gt; <br>    first.length() - second.length()<br><br><span class="hljs-comment">// 声明参数类型，代码块，返回结果，每一个分支都必须返回结果</span><br>(String first, String second) -&gt; &#123;<br>    <span class="hljs-keyword">if</span>(first.length() &lt; second.length())&#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(first.length() &gt; second.length())&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 无参数</span><br>() -&gt; &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>        System.out.println(i);<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 如果参数类型可推导则省略，如果只有单个参数且类型可推导，可省略括号</span><br></code></pre></td></tr></table></figure><h4 id="6-3-2-函数式接口"><a href="#6-3-2-函数式接口" class="headerlink" title="6.3.2 函数式接口"></a>6.3.2 函数式接口</h4><p>对于只有一个抽象方法的接口，需要这种接口的对象时，就可以提供一个 lambda 表达式，这种接口称为函数式接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Comparator 就是一个函数式接口</span><br>Arrays.sort(words, (first, second) -&gt; &#123;<br>    first.length() - second.length()<br>&#125;);<br><br><span class="hljs-comment">// java.util.function 中有许多函数式接口</span><br>list.removeIf(e -&gt; e==<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><h4 id="6-3-3-方法引用"><a href="#6-3-3-方法引用" class="headerlink" title="6.3.3 方法引用"></a>6.3.3 方法引用</h4><ul><li>object::instanceMethod</li><li>Class::staticMethod</li><li>Class::instanceMethod</li></ul><p><code>System.out::println</code> 等价于 <code>x -&gt; System.out.println(x)</code></p><p><code>String::compareToIgnoreCase</code> 等价于 <code>(x, y) -&gt; x.compareToIgnoreCase(y)</code></p><p>this\super：this::equals、super::greet</p><p>构造器引用：Person::new、Person[]::new</p><h4 id="6-3-6-变量作用域"><a href="#6-3-6-变量作用域" class="headerlink" title="6.3.6 变量作用域"></a>6.3.6 变量作用域</h4><p>lambda 表达式看可以捕获外围作用域中的变量，且是最终变量（final，初始化之后不会再赋给新值），不过只能引用而不能修改。</p><h4 id="6-3-7-Comparator"><a href="#6-3-7-Comparator" class="headerlink" title="6.3.7 Comparator"></a>6.3.7 Comparator</h4><p>Comparator 接口中包含了静态方法创建比较器，camparing 方法即是一个键提取器函数。p242</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 比较名字</span><br>Arrays.sort(people, Comparator.comparing(Person::getName));<br><br><span class="hljs-comment">// 比较姓再比较名</span><br>Arrays.sort(people, Comparator.comparing(Person::getLastName).thenComparing(Person::getFirstName());<br><br><span class="hljs-comment">// 比较名字长度</span><br>Arrays.sort(people, Comparator.compringInt(p -&gt; p.getName().length()));<br><br><span class="hljs-comment">// null 默认比较器</span><br>Arrays.sort(people, compring(Person::getMiddleName(), nullFirst(naturalOrder()));<br></code></pre></td></tr></table></figure><h3 id="6-4-内部类"><a href="#6-4-内部类" class="headerlink" title="6.4 内部类"></a>6.4 内部类</h3><p>内部类是定义在另一个类中的类</p><ul><li>内部类方法可以访问该类定义所在的作用域中的数据</li><li>内部类可以对同一个包中的其他类隐藏起来</li><li>当想要定义一个回调函数且不想编写大量代码就可以使用匿名内部类</li></ul><p>内部类中声明的所有静态域必须是 final，内部类不能有 static 方法（可以有但是不要写）</p><h4 id="6-4-1-内部类的特殊语法"><a href="#6-4-1-内部类的特殊语法" class="headerlink" title="6.4.1 内部类的特殊语法"></a>6.4.1 内部类的特殊语法</h4><p>OuterClass.this 表示外围类的引用</p><p>OuterClass.InnerClass 在外围类作用于之外，引用内部类</p><h4 id="6-4-2-局部内部类"><a href="#6-4-2-局部内部类" class="headerlink" title="6.4.2 局部内部类"></a>6.4.2 局部内部类</h4><p>在方法中定义局部内部类，局部内部类不能用 public 或 private 修饰，它的作用域被限定在这个局部内部类所在的块中。局部内部类访问局部变量必须是 final。</p><h4 id="6-4-3-匿名内部类"><a href="#6-4-3-匿名内部类" class="headerlink" title="6.4.3 匿名内部类"></a>6.4.3 匿名内部类</h4><p>没有名字的内部类，如果构造参数的小括号跟一个大括号，正在定义的就是匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通用语法格式</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperType</span>(construction parameters)&#123;<br>inner <span class="hljs-keyword">class</span> <span class="hljs-title class_">methods</span> and data<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-4-4-静态内部类"><a href="#6-4-4-静态内部类" class="headerlink" title="6.4.4 静态内部类"></a>6.4.4 静态内部类</h4><p>静态内部类不能访问外围类对象数据，静态内部类可以有静态域和方法，内部类不需要访问外围类对象的时候应该使用静态内部类。</p><h3 id="6-5-代理"><a href="#6-5-代理" class="headerlink" title="6.5 代理"></a>6.5 代理</h3><p>利用代理可以在运行时创建一个实现了一组给定接口的新类。</p><h2 id="7-异常、断言、日志"><a href="#7-异常、断言、日志" class="headerlink" title="7 异常、断言、日志"></a>7 异常、断言、日志</h2><h3 id="7-1-处理错误"><a href="#7-1-处理错误" class="headerlink" title="7.1 处理错误"></a>7.1 处理错误</h3><h4 id="7-1-1-异常分类"><a href="#7-1-1-异常分类" class="headerlink" title="7.1.1 异常分类"></a>7.1.1 异常分类</h4><p>所有异常都是由 Throwable 继承而来，又分为 Error 和 Exception。Error 描述了 Java 运行时系统的内部错误和资源耗尽错误。Exception 中分为 RuntimeException 和 其他异常 两个分支。Java 语言规范将派生于 Error 类或 RuntimeException 类的所有异常称为非受查异常，所有其他的异常称为受查异常。编译器将核查是否为所有的受查异常提供了异常处理器。</p><h4 id="7-1-2-声明受查异常"><a href="#7-1-2-声明受查异常" class="headerlink" title="7.1.2 声明受查异常"></a>7.1.2 声明受查异常</h4><p>下面四个情况应该抛出异常：</p><ol><li>调用一个抛出受查异常的方法</li><li>程序运行过程中发现错误，使用 throw 抛出</li><li>程序出现错误</li><li>Java 虚拟机和运行库出现的内部错误</li></ol><p>一个方法有可能抛出多个受查异常类型，就需要在方法的首部使用 throws 列出所有的异常类，不应该声明从 RuntimeException 继承的非受查异常。</p><p>子类方法中应该比超类方法抛出更特定的异常，或者根本不抛出异常。如果超类没有抛出受查异常，子类也不能抛出受查异常。</p><h4 id="7-1-3-创建异常类"><a href="#7-1-3-创建异常类" class="headerlink" title="7.1.3 创建异常类"></a>7.1.3 创建异常类</h4><ul><li>继承一个异常类</li><li>编写一个构造器方法和一个带有详细描述信息的构造器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileFormatException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IOException</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FileFormatException</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FileFormatException</span><span class="hljs-params">(String msg)</span>&#123;<br>        <span class="hljs-built_in">super</span>(msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-2-捕获异常"><a href="#7-2-捕获异常" class="headerlink" title="7.2 捕获异常"></a>7.2 捕获异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// try/catch 语句</span><br><span class="hljs-keyword">try</span>&#123;<br>    code<br>&#125;<span class="hljs-keyword">catch</span>(ExceptionType e)&#123;<br>    handler <span class="hljs-keyword">for</span> <span class="hljs-built_in">this</span> type<br>&#125;<br><br><span class="hljs-comment">// 捕获多个异常</span><br><span class="hljs-keyword">try</span>&#123;<br>    code<br>&#125;<span class="hljs-keyword">catch</span>(ExceptionType1 e)&#123;<br>    handler <span class="hljs-keyword">for</span> <span class="hljs-built_in">this</span> type<br>&#125;<span class="hljs-keyword">catch</span>(ExceptionType2 e)&#123;<br>    handler <span class="hljs-keyword">for</span> <span class="hljs-built_in">this</span> type<br>&#125;<br><br><span class="hljs-keyword">try</span>&#123;<br>    code<br>&#125;<span class="hljs-keyword">catch</span>(ExceptionType1 | ExceptionType2 e)&#123;<br>    handler <span class="hljs-keyword">for</span> <span class="hljs-built_in">this</span> type<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-2-1-再次抛出异常"><a href="#7-2-1-再次抛出异常" class="headerlink" title="7.2.1 再次抛出异常"></a>7.2.1 再次抛出异常</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">catch</span>(SQLException e)&#123;<br><span class="hljs-type">Throwable</span> <span class="hljs-variable">se</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(<span class="hljs-string">&quot;database error&quot;</span>);<br>    se.iniiCase(e);<br>    <span class="hljs-keyword">throw</span> se;<br>&#125;<br><br><span class="hljs-comment">// 获取原始的 e 错误</span><br><span class="hljs-type">Throwable</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> se.getCause()<br></code></pre></td></tr></table></figure><h4 id="7-2-2-finally"><a href="#7-2-2-finally" class="headerlink" title="7.2.2 finally"></a>7.2.2 finally</h4><p>try 语句可以只有 finall 子句而没有 catch 语句， finnal 语句无论是否遇到异常都会执行，通常用于资源关闭。当 try 和 finally 中有 return 语句时，会走 finally 子句。</p><p>强烈建议使用 try&#x2F;catch 和 try&#x2F;finally 语句块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br><br>    &#125;<span class="hljs-keyword">finally</span>&#123;<br><br>    &#125;<br>&#125;<span class="hljs-keyword">catch</span>()&#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="7-2-3-try-with-resource"><a href="#7-2-3-try-with-resource" class="headerlink" title="7.2.3 try-with-resource"></a>7.2.3 try-with-resource</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 最简形式</span><br><span class="hljs-keyword">try</span>(<span class="hljs-type">Resource</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> ...)&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-2-4-Throwable"><a href="#7-2-4-Throwable" class="headerlink" title="7.2.4 Throwable"></a>7.2.4 Throwable</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、将这个对象设置为原因</span><br><span class="hljs-comment">Throwable initCause(Throwable cause)</span><br><span class="hljs-comment">2、获取产生这个异常的原因的异常对象</span><br><span class="hljs-comment">Throwable getCause()</span><br><span class="hljs-comment">3、获取构造这个对象时待用堆栈的跟踪</span><br><span class="hljs-comment">StackTraceElement[] getStackTrace()</span><br><span class="hljs-comment">4、为一个增加抑制异常</span><br><span class="hljs-comment">void addSuppressed(Throwable t)</span><br><span class="hljs-comment">5、获取异常的所有抑制异常</span><br><span class="hljs-comment">Throwable[] getSuppressed()</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="7-3-使用异常机制技巧"><a href="#7-3-使用异常机制技巧" class="headerlink" title="7.3 使用异常机制技巧"></a>7.3 使用异常机制技巧</h3><ol><li>异常处理不能代替简单的测试</li><li>不要过分细化异常</li><li>利用异常层次结构</li><li>不要压制异常</li><li>检查错误时，苛刻要比放任更好</li><li>不要羞于传递异常</li></ol><h3 id="7-4-断言"><a href="#7-4-断言" class="headerlink" title="7.4 断言"></a>7.4 断言</h3><p>确信某个属性符合要求，并且代码的执行依赖这个属性，语法为 <code>assert 条件</code>和 <code>assert 条件 : 表达式</code>，表达式的目的时产生一个消息字符串。默认情况下，断言是被禁用的。</p><ul><li>开启断言，-enableassertions 或 -ea</li><li>关闭断言，-disablesssertions 或 -da</li></ul><p>断言只用于开发和测试阶段。</p><h3 id="7-5-日志"><a href="#7-5-日志" class="headerlink" title="7.5 日志"></a>7.5 日志</h3><h4 id="7-5-1-日志对象"><a href="#7-5-1-日志对象" class="headerlink" title="7.5.1 日志对象"></a>7.5.1 日志对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 全局日志记录器</span><br>Logger.getGlobal().info(<span class="hljs-string">&quot;&quot;</span>);<br><br><span class="hljs-comment">// getLogger 创建或获取记录器，声明为静态变量是防止被垃圾回收</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">myLogger</span> <span class="hljs-operator">=</span> Logger.getLogger(<span class="hljs-string">&quot;top.reajason.corejava&quot;</span>)<br></code></pre></td></tr></table></figure><p>与包名类似，日志记录器名也具有层次结构，子记录器会继承父记录器的级别。7 个日志记录器级别如下：</p><ul><li>SEVERE</li><li>WARNING</li><li>INFO</li><li>CONFIG</li><li>FINE</li><li>FINER</li><li>FINEST</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置日志级别,Level.ALL 开启所有级别，Level.OFF 关闭所有级别</span><br>logger.setLevel(Level.FINE);<br><br><span class="hljs-comment">// 记录日志</span><br>logger.waring(message);<br>logger.info(message);<br>logger.log(Level.FINE, message);<br></code></pre></td></tr></table></figure><h4 id="7-5-2-日志管理器配置"><a href="#7-5-2-日志管理器配置" class="headerlink" title="7.5.2 日志管理器配置"></a>7.5.2 日志管理器配置</h4><p>默认情况下，配置位于：<code>jre/lib/logging.prperties</code></p><h4 id="7-5-3-处理器"><a href="#7-5-3-处理器" class="headerlink" title="7.5.3 处理器"></a>7.5.3 处理器</h4><p>默认是 ConsoleHandler 控制台处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 添加文件的处理器，还有其他处理器例如 StreamHandler</span><br><span class="hljs-type">FileHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileHnadler</span>();<br>logger.addHandler(handler);<br></code></pre></td></tr></table></figure><p>自定义处理器需要扩展 Handler 类，并实现 publish、flush 和 close 方法。</p><h4 id="7-5-4-过滤器"><a href="#7-5-4-过滤器" class="headerlink" title="7.5.4 过滤器"></a>7.5.4 过滤器</h4><p>同一时刻只能有一个过滤器，通过实现 Fileter 接口并定义 isLoggable 方法自定义过滤器，使用 setFilter 方法添加过滤器。</p><h4 id="7-5-5-格式化器"><a href="#7-5-5-格式化器" class="headerlink" title="7.5.5 格式化器"></a>7.5.5 格式化器</h4><p>扩展 Formatter 类并实现 format 方法，进行格式化，使用 setFormatter 方法加入到处理器中。</p><h3 id="7-6-调试技巧"><a href="#7-6-调试技巧" class="headerlink" title="7.6 调试技巧"></a>7.6 调试技巧</h3><ol><li>打印或记录任意变量值</li><li>类中加入 main 方法进行单元测试</li><li>使用 JUnit 进行测试</li><li>日志代理</li><li>利用 Throwable 类提供的 printStackTrace 方法，打印堆栈情况，并重新抛出异常。</li><li>堆栈轨迹显示在 System.err 上，将错误信息保存在文件中</li><li>查看类的加载过程，使用 -verbose 启动虚拟机</li><li>-Xlint 告诉编译器对普遍容易出现的代码问题进行检查</li><li>jconsole processID 可以监控和管理程序</li><li>jmap 可以获得堆的转储</li><li>-Xprof 标志运行虚拟机，就会将进场被调用的方法的剖析信息发送到 System.out 中</li></ol><h2 id="8-泛型程序设计"><a href="#8-泛型程序设计" class="headerlink" title="8 泛型程序设计"></a>8 泛型程序设计</h2><p>泛型程序设计意味着编写的代码可以被很多类型的对象所重用。泛型提供了类型参数，使程序具有更好的可读性和安全性。</p><h3 id="8-1-定义简单泛型类"><a href="#8-1-定义简单泛型类" class="headerlink" title="8.1 定义简单泛型类"></a>8.1 定义简单泛型类</h3><p>泛型类就是具有一个或多个类型变量的类。</p><p>Java 中，E 表示集合的元素类型；K 和 V 分别表示表的关键字和值的类型；T（U 或 S）表示 “任意类型”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span>&lt;T&gt;&#123;<br>    <span class="hljs-keyword">private</span> T first;<br>    <span class="hljs-keyword">private</span> T second;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pair</span><span class="hljs-params">()</span>&#123;<br>        first = <span class="hljs-literal">null</span>;<br>        second = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pair</span><span class="hljs-params">(T first, T second)</span>&#123;<br>        <span class="hljs-built_in">this</span>.first = first;<br>        <span class="hljs-built_in">this</span>.second = second;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getFirst</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getSecond</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> second;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFirst</span><span class="hljs-params">(T value)</span>&#123;<br>        first = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSecond</span><span class="hljs-params">(T value)</span>&#123;<br>        second = value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>类定义中的类型变量指定方法的返回类型以及域和局部变量的类型，可用具体的类型替换类型变量就可以实例化泛型类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Pair&lt;String&gt;;<br><br><span class="hljs-comment">/* 将 String 替换类型变量 T 得到 Piar 类</span><br><span class="hljs-comment">Pair&lt;String&gt;()</span><br><span class="hljs-comment">pair&lt;String&gt;(String, String)</span><br><span class="hljs-comment">String getFirst()</span><br><span class="hljs-comment">String getSecond()</span><br><span class="hljs-comment">void setFirst(String)</span><br><span class="hljs-comment">void setSecond(String)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="8-2-泛型方法"><a href="#8-2-泛型方法" class="headerlink" title="8.2 泛型方法"></a>8.2 泛型方法</h3><p>类型变量放在修饰符之后，返回值类型前，泛型方法可定义在普通类也可定义在泛型类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayAlg</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">getMiddle</span><span class="hljs-params">(T... a)</span>&#123;<br>        <span class="hljs-keyword">return</span> a[a.length / <span class="hljs-number">2</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 调用时方法名前的尖括号放入具体类型</span><br>ArrayAlg.&lt;String&gt;getMiddle(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-string">&quot;Public&quot;</span>);<br><br><span class="hljs-comment">// 也可省略，后面的参数 String 足以推出 T 是 String</span><br>ArrayAlg.getMiddle(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-string">&quot;Public&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="8-3-类型变量的限定"><a href="#8-3-类型变量的限定" class="headerlink" title="8.3 类型变量的限定"></a>8.3 类型变量的限定</h3><p><code>&lt;T extends BoundingType&gt;</code> 表示 T 应该是绑定类型的子类型，T 和绑定类型可以是类也可以是接口。一个类型变量或通配符可有多个限定，使用 &amp; 分隔，限定中至多一个类，且类要放在第一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayAlg</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&gt; Pair&lt;T&gt; <span class="hljs-title function_">minmax</span><span class="hljs-params">(T[] a)</span>&#123;<br>        ...<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>&lt;&gt;(a[<span class="hljs-number">0</span>], a[a.length - <span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-4-泛型代码与虚拟机"><a href="#8-4-泛型代码与虚拟机" class="headerlink" title="8.4 泛型代码与虚拟机"></a>8.4 泛型代码与虚拟机</h3><p>虚拟机没有泛型类型对象，所有对象都是普通类。</p><h4 id="8-4-1-类型擦除"><a href="#8-4-1-类型擦除" class="headerlink" title="8.4.1 类型擦除"></a>8.4.1 类型擦除</h4><p>泛型类型都会自动提供一个相应的原始类型。原始类型的名字就是删去类型参数后的泛型类型名。擦除类型变量，并替换为限定类型（无限定类型，替换为 Object）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Pair&lt;T&gt; 会变成以下情况</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span>&#123;<br>    <span class="hljs-keyword">private</span> Object first;<br>    <span class="hljs-keyword">private</span> Object second;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pair</span><span class="hljs-params">()</span>&#123;<br>        first = <span class="hljs-literal">null</span>;<br>        second = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pair</span><span class="hljs-params">(Object first, Object second)</span>&#123;<br>        <span class="hljs-built_in">this</span>.first = first;<br>        <span class="hljs-built_in">this</span>.second = second;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getFirst</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getSecond</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> second;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFirst</span><span class="hljs-params">(Object value)</span>&#123;<br>        first = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSecond</span><span class="hljs-params">(Object value)</span>&#123;<br>        second = value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-4-2-翻译泛型表达式"><a href="#8-4-2-翻译泛型表达式" class="headerlink" title="8.4.2 翻译泛型表达式"></a>8.4.2 翻译泛型表达式</h4><p>调用泛型方法或者存取泛型域时，编译器会自动插入强制类型转换。</p><h4 id="8-4-3-翻译泛型方法"><a href="#8-4-3-翻译泛型方法" class="headerlink" title="8.4.3 翻译泛型方法"></a>8.4.3 翻译泛型方法</h4><p>子类继承泛型类并且子类重写泛型类中的泛型方法制定了确定类型，为了防止类型擦除与多态发生冲突，编译器会在子类生成一个桥方法，虚拟机运行时会调用子类桥方法。</p><ul><li>虚拟机没有泛型，只有普通的类和方法</li><li>所有参数类型都用它们的限定类型替换</li><li>桥方法被合成用来保持多态</li><li>为保持类型安全，必要时插入强制类型转换</li></ul><h4 id="8-4-4-调用遗留代码"><a href="#8-4-4-调用遗留代码" class="headerlink" title="8.4.4 调用遗留代码"></a>8.4.4 调用遗留代码</h4><p>设计泛型类型时，主要目标是运行泛型代码和遗留代码互操作。</p><p><code>@SuppressWarning(&quot;unchecked&quot;)</code> 可以抑制警告</p><h3 id="8-5-约束和局限性"><a href="#8-5-约束和局限性" class="headerlink" title="8.5 约束和局限性"></a>8.5 约束和局限性</h3><h4 id="8-5-1-不能用基本类型实例化类型参数"><a href="#8-5-1-不能用基本类型实例化类型参数" class="headerlink" title="8.5.1 不能用基本类型实例化类型参数"></a>8.5.1 不能用基本类型实例化类型参数</h4><p>原因是类型擦除</p><h4 id="8-5-2-运行时类型查询只适用于原始类型"><a href="#8-5-2-运行时类型查询只适用于原始类型" class="headerlink" title="8.5.2 运行时类型查询只适用于原始类型"></a>8.5.2 运行时类型查询只适用于原始类型</h4><p>虚拟机中的对象总是一个特定的非泛型方法，所以类型查询只产生原始类型。</p><h4 id="8-5-3-不能创建参数化类型数组"><a href="#8-5-3-不能创建参数化类型数组" class="headerlink" title="8.5.3 不能创建参数化类型数组"></a>8.5.3 不能创建参数化类型数组</h4><p>类型擦除，会使 <code>Pair&lt;String&gt;[] table</code> 变成 <code>Pair[] table</code>，可以声明但是使用会有问题，会得到一个警告，可以使用注解抑制警告 <code>@SuppressWarning(&quot;unchecked&quot;)</code> 或 <code>@SafeVarargs</code></p><h4 id="8-5-4-不能实例化类型变量"><a href="#8-5-4-不能实例化类型变量" class="headerlink" title="8.5.4 不能实例化类型变量"></a>8.5.4 不能实例化类型变量</h4><p>new T() 不能使用，因为类型擦除，T 变成 Object 了，可以使用构造器表达式解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用 Supplier&lt;T&gt; 表示一个无参数且返回值时 T 的函数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Pair&lt;T&gt; <span class="hljs-title function_">makePair</span><span class="hljs-params">(Supplier&lt;T&gt; constr)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>&lt;&gt;(constr.get, constr.get());<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br>Pair&lt;String&gt; p = Pair.makePair(String::<span class="hljs-keyword">new</span>);<br><br><span class="hljs-comment">// 使用反射</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Pair&lt;T&gt; <span class="hljs-title function_">makePair</span><span class="hljs-params">(Class&lt;T&gt; cl)</span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>&lt;&gt;(cl.newInstance(), cl.newInstance());<br>    &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br>Pair&lt;String&gt; p = Pair.makePair(String.class);<br></code></pre></td></tr></table></figure><h4 id="8-5-5-不能构造泛型数组"><a href="#8-5-5-不能构造泛型数组" class="headerlink" title="8.5.5 不能构造泛型数组"></a>8.5.5 不能构造泛型数组</h4><h4 id="8-5-6-泛型类的静态上下文中类型变量无效"><a href="#8-5-6-泛型类的静态上下文中类型变量无效" class="headerlink" title="8.5.6 泛型类的静态上下文中类型变量无效"></a>8.5.6 泛型类的静态上下文中类型变量无效</h4><h4 id="8-5-7-不能抛出或捕获泛型类的实例"><a href="#8-5-7-不能抛出或捕获泛型类的实例" class="headerlink" title="8.5.7 不能抛出或捕获泛型类的实例"></a>8.5.7 不能抛出或捕获泛型类的实例</h4><h4 id="8-5-8-可以消除对受查异常的检查"><a href="#8-5-8-可以消除对受查异常的检查" class="headerlink" title="8.5.8 可以消除对受查异常的检查"></a>8.5.8 可以消除对受查异常的检查</h4><h4 id="8-5-9-注意擦除后的冲突"><a href="#8-5-9-注意擦除后的冲突" class="headerlink" title="8.5.9 注意擦除后的冲突"></a>8.5.9 注意擦除后的冲突</h4><h3 id="8-6-泛型类型的继承规则"><a href="#8-6-泛型类型的继承规则" class="headerlink" title="8.6 泛型类型的继承规则"></a>8.6 泛型类型的继承规则</h3><p><code>Pair&lt;Manager&gt;</code> 和 <code>Pair&lt;Employee&gt;</code> 没有任何关系。可以将参数化类型转换为原始类型，泛型类可以扩展或实现其他的泛型类。</p><h3 id="8-7-通配符类型"><a href="#8-7-通配符类型" class="headerlink" title="8.7 通配符类型"></a>8.7 通配符类型</h3><p>通配符类型，允许类型参数变化。<code>Pair&lt;? extends Employee&gt;</code> 表示类型参数是 Employee 的子类。<code>Pair&lt;? super Manager&gt;</code> 表示类型参数是 Manager 的超类。</p><p><code>?</code> 表示无限定通配符。</p><h2 id="9-集合"><a href="#9-集合" class="headerlink" title="9 集合"></a>9 集合</h2><h3 id="9-1-集合框架"><a href="#9-1-集合框架" class="headerlink" title="9.1 集合框架"></a>9.1 集合框架</h3><p>集合接口与实现分离，集合有两个基本接口 Collection 和 Map。</p><h4 id="9-1-1-Collection-接口"><a href="#9-1-1-Collection-接口" class="headerlink" title="9.1.1 Collection 接口"></a>9.1.1 Collection 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Iterator&lt;E&gt; iterator()</span><br><span class="hljs-comment">int Size()</span><br><span class="hljs-comment">boolean isEmpty()</span><br><span class="hljs-comment">boolean contains(Object obj)</span><br><span class="hljs-comment">boolean containsAll(Collection&lt;?&gt; other)</span><br><span class="hljs-comment">boolean add(Object element)</span><br><span class="hljs-comment">boolean addAll(Collection&lt;? extends E&gt; other)</span><br><span class="hljs-comment">boolean remove(Object obj)</span><br><span class="hljs-comment">boolean removeAll(Collection&lt;?&gt; other)</span><br><span class="hljs-comment">default boolean removeIf(Predicate&lt;? super E&gt; filter)</span><br><span class="hljs-comment">void clear()</span><br><span class="hljs-comment">boolean retainAll(Collection&lt;?&gt; other)</span><br><span class="hljs-comment">Object[] toArray()</span><br><span class="hljs-comment">&lt;T&gt; T[] toArray(T[] arrayToFill)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="9-1-2-Iterator"><a href="#9-1-2-Iterator" class="headerlink" title="9.1.2 Iterator"></a>9.1.2 Iterator</h4><p>迭代器认为是位于两个元素之间，remove 只能删除上次访问的元素，不能连续调用两次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">boolean hasNext()</span><br><span class="hljs-comment">E next()</span><br><span class="hljs-comment">void remove()</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="9-2-具体的集合"><a href="#9-2-具体的集合" class="headerlink" title="9.2 具体的集合"></a>9.2 具体的集合</h3><table><thead><tr><th>集合类型</th><th>描述</th></tr></thead><tbody><tr><td>ArrayList</td><td>一种可以动态增长和缩减的索引序列</td></tr><tr><td>LinkedList</td><td>一种可以在任何位置进行搞笑地插入和删除操作的有序序列</td></tr><tr><td>ArrayDeque</td><td>一种用循环数组实现的双端队列</td></tr><tr><td>HashSet</td><td>一种没有重复元素的无序集合</td></tr><tr><td>TreeSet</td><td>一种有序集</td></tr><tr><td>EnumSet</td><td>一种包含枚举类型的值</td></tr><tr><td>LinkedHashSet</td><td>一种可以记住元素插入次序的集</td></tr><tr><td>PriorityQueue</td><td>一种允许高效删除最小元素的集合</td></tr><tr><td>HashMap</td><td>一种存储键值关联的数据结构</td></tr><tr><td>TreeMap</td><td>一种键值有序排列的映射表</td></tr><tr><td>EnumMap</td><td>一种键值属于枚举类型的映射表</td></tr><tr><td>LinkedHashMap</td><td>一种可以记住键值项添加次序的映射表</td></tr><tr><td>WeakHashMap</td><td>一种其值无用武之地后可以被垃圾回收回收的映射表</td></tr><tr><td>IdentityHashMap</td><td>一种用 &#x3D;&#x3D; 而不是用 equals 比较键值的映射表</td></tr></tbody></table><h4 id="9-2-1-链表"><a href="#9-2-1-链表" class="headerlink" title="9.2.1 链表"></a>9.2.1 链表</h4><p>插入和删除操作高效，ListIterator 继承于 Iterator 支持添加、修改值和反向遍历。Java 设计上不合理，不要使用 get 获取链表上的元素，每次都需要从头遍历，应该使用迭代器。LinkedList 继承于 List</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* List</span><br><span class="hljs-comment">ListIterator&lt;E&gt; listIterator()</span><br><span class="hljs-comment">ListIterator&lt;E&gt; listIterator(int index)</span><br><span class="hljs-comment">void add(int i, E element)</span><br><span class="hljs-comment">void addAll(int i, Collection&lt;? extends E&gt; elements)</span><br><span class="hljs-comment">E remove(int i)</span><br><span class="hljs-comment">E get(int i)</span><br><span class="hljs-comment">E set(int i, E element)</span><br><span class="hljs-comment">int indexOf(Object emelent)</span><br><span class="hljs-comment">int lastIndexOf(Object element)</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* ListIterator</span><br><span class="hljs-comment">void add(E newElement)</span><br><span class="hljs-comment">void set(E newElement)</span><br><span class="hljs-comment">boolean hasPrevious()</span><br><span class="hljs-comment">E previous()</span><br><span class="hljs-comment">int nextiIndex()</span><br><span class="hljs-comment">int previousIndex()</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">LinkedList()</span><br><span class="hljs-comment">LinkedList(Collection&lt;? extends E&gt; elements)</span><br><span class="hljs-comment">void addFirst(E element)</span><br><span class="hljs-comment">void addLast(E element)</span><br><span class="hljs-comment">E getFirst()</span><br><span class="hljs-comment">E getLast()</span><br><span class="hljs-comment">E removeFirst()</span><br><span class="hljs-comment">E removeLast()</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="9-2-2-数组链表"><a href="#9-2-2-数组链表" class="headerlink" title="9.2.2 数组链表"></a>9.2.2 数组链表</h4><p>ArrayList 继承于 List，可以随机遍历数组</p><h4 id="9-2-3-散列集"><a href="#9-2-3-散列集" class="headerlink" title="9.2.3 散列集"></a>9.2.3 散列集</h4><p>HashSet 继承于 Set，没有重复元素的集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">HashSet()</span><br><span class="hljs-comment">HashSet(Collection&lt;? extends E&gt; element)</span><br><span class="hljs-comment">HashSet(int initialCapacity)</span><br><span class="hljs-comment">HashSet(int initialCapacity, float loadFactor)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="9-2-4-树集"><a href="#9-2-4-树集" class="headerlink" title="9.2.4 树集"></a>9.2.4 树集</h4><p>TreeSet 有序集合，排序使用的红黑树结构，要使用树集，元素必须实现 Comparable 接口，或构造集时提供 Comparator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* TreeSet</span><br><span class="hljs-comment">TreeSet()</span><br><span class="hljs-comment">TreeSet(Comparator&lt;? super E&gt; comparator)</span><br><span class="hljs-comment">TreeSet(Collection&lt;? extends E&gt; elements)</span><br><span class="hljs-comment">TreeSet(SortedSet&lt;E&gt; s)</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* SortedSet</span><br><span class="hljs-comment">Comparator&lt;? super E&gt; comparator()</span><br><span class="hljs-comment">E first()</span><br><span class="hljs-comment">E last()</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* NavigableSet</span><br><span class="hljs-comment">E higher(E value)</span><br><span class="hljs-comment">E lower(E value)</span><br><span class="hljs-comment">E ceiling(E value)</span><br><span class="hljs-comment">E floor(E value)</span><br><span class="hljs-comment">E pollFirst()</span><br><span class="hljs-comment">E pollLast()</span><br><span class="hljs-comment">Iterator&lt;E&gt; descendingIterator()</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="9-2-5-队列"><a href="#9-2-5-队列" class="headerlink" title="9.2.5 队列"></a>9.2.5 队列</h4><p>双端队列，高效地在头部和尾部同时进行添加或删除元素，不支持在队列中间添加元素，ArrayDeque 和 LinkedList 有实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* Queue 队列</span><br><span class="hljs-comment">boolean add(E element)</span><br><span class="hljs-comment">boolean offer(E element)</span><br><span class="hljs-comment">E remove()</span><br><span class="hljs-comment">E poll()</span><br><span class="hljs-comment">E element()</span><br><span class="hljs-comment">E peek()</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* Deque 双端队列</span><br><span class="hljs-comment">void addFirst(E element)</span><br><span class="hljs-comment">void addLast(E element)</span><br><span class="hljs-comment">boolean offerFirst(E element)</span><br><span class="hljs-comment">boolean offerLast(E element)</span><br><span class="hljs-comment">E removeFirst()</span><br><span class="hljs-comment">E removeLast()</span><br><span class="hljs-comment">E pollFirst()</span><br><span class="hljs-comment">E pollLast()</span><br><span class="hljs-comment">E getFirst()</span><br><span class="hljs-comment">E getLast()</span><br><span class="hljs-comment">E peekFirst()</span><br><span class="hljs-comment">E peekLast()</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="9-2-6-优先级队列"><a href="#9-2-6-优先级队列" class="headerlink" title="9.2.6 优先级队列"></a>9.2.6 优先级队列</h4><p>堆结构，小根堆，大根堆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">PriorityQueue()</span><br><span class="hljs-comment">PriorityQueue(int initialCapcity)</span><br><span class="hljs-comment">PriorityQueue(int initialCapcity, Comparator&lt;? super E&gt; c)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="9-3-映射"><a href="#9-3-映射" class="headerlink" title="9.3 映射"></a>9.3 映射</h3><p>HashMap 和 TreeMap 都实现了 Map 接口。键必须是唯一的</p><h4 id="9-3-1-基本映射操作"><a href="#9-3-1-基本映射操作" class="headerlink" title="9.3.1 基本映射操作"></a>9.3.1 基本映射操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* Map</span><br><span class="hljs-comment">V get(Object key)</span><br><span class="hljs-comment">default V getOrDefault(Object key, V defaultValue)</span><br><span class="hljs-comment">V put(K key, V value)</span><br><span class="hljs-comment">void putAll(Map&lt;? extends K, ? extends V&gt; entries)</span><br><span class="hljs-comment">boolean containsKey(Object key)</span><br><span class="hljs-comment">boolean containsValue(Object value)</span><br><span class="hljs-comment">default void forEach(BiConsumer&lt;? super K, ? super V&gt; action)</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* HashMap</span><br><span class="hljs-comment">HashMap()</span><br><span class="hljs-comment">HashMap(int initialCapacity)</span><br><span class="hljs-comment">HashMap(int initialCapacity, float loadFactor)</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* TreeMap</span><br><span class="hljs-comment">TreeMap()</span><br><span class="hljs-comment">TreeMap(Comparator&lt;? super K&gt; c)</span><br><span class="hljs-comment">TreeMap(Map&lt;? extends K, ? extends V&gt; entries)</span><br><span class="hljs-comment">TreeMap(SortedMap&lt;? extends K, ? extends V&gt; entries)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="9-3-2-更新映射项"><a href="#9-3-2-更新映射项" class="headerlink" title="9.3.2 更新映射项"></a>9.3.2 更新映射项</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* Map</span><br><span class="hljs-comment">default V merge(K key, V value, BitFunction&lt;? super V, ? super V,? extends V&gt; remappingFunction)</span><br><span class="hljs-comment">default V compute(K key, BitFunction&lt;? super K, ? super V, ? extends V&gt; remappingFunction)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="9-3-3-映射视图"><a href="#9-3-3-映射视图" class="headerlink" title="9.3.3 映射视图"></a>9.3.3 映射视图</h4><p>映射的视图（实现了 Collection 接口或某个子接口的对象）有三种：键集、值集合以及键值对集。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;K&gt; <span class="hljs-title function_">keySet</span><span class="hljs-params">()</span>;<br>Collection&lt;V&gt; <span class="hljs-title function_">values</span><span class="hljs-params">()</span>;<br>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet();<br></code></pre></td></tr></table></figure><h4 id="9-3-4-弱散列映射"><a href="#9-3-4-弱散列映射" class="headerlink" title="9.3.4 弱散列映射"></a>9.3.4 弱散列映射</h4><p>WeakHashMap，当对键的唯一引用来自散列条目时，这一数据结构将与垃圾回收器协同删除键值对。使用弱引用保存键。</p><h4 id="9-3-5-链接散列集与映射"><a href="#9-3-5-链接散列集与映射" class="headerlink" title="9.3.5 链接散列集与映射"></a>9.3.5 链接散列集与映射</h4><p>LinkedHashSet 和 LinkedHashMap 能记住插入元素的顺序。</p><h4 id="9-3-6-枚举集与映射"><a href="#9-3-6-枚举集与映射" class="headerlink" title="9.3.6 枚举集与映射"></a>9.3.6 枚举集与映射</h4><p>EnumSet内部用位序列实现。EnumMap 是一个键类型为枚举类型的映射</p><h4 id="9-3-7-标识散列映射"><a href="#9-3-7-标识散列映射" class="headerlink" title="9.3.7 标识散列映射"></a>9.3.7 标识散列映射</h4><p>IdentityHashMap 使用 &#x3D;&#x3D; 而不是 equals 比较两个对象</p><h3 id="9-4-视图与包装类"><a href="#9-4-视图与包装类" class="headerlink" title="9.4 视图与包装类"></a>9.4 视图与包装类</h3><p>keySet 方法返回一个实现 Set 接口的类对象，这个类的方法对原映射进行操作，这种集合称为视图。</p><h4 id="9-4-1-轻量集合包装器"><a href="#9-4-1-轻量集合包装器" class="headerlink" title="9.4.1 轻量集合包装器"></a>9.4.1 轻量集合包装器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* Arrays 返回数组列表视图</span><br><span class="hljs-comment">List&lt;E&gt; asList(E... array)</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* Collections，获取不可修改集合</span><br><span class="hljs-comment">static &lt;E&gt; List&lt;E&gt; nCopies(int n, E value)</span><br><span class="hljs-comment">static &lt;E&gt; Set&lt;E&gt; singleton(E value)</span><br><span class="hljs-comment">static &lt;E&gt; List&lt;E&gt; singletonList(E value)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="9-4-2-子范围"><a href="#9-4-2-子范围" class="headerlink" title="9.4.2 子范围"></a>9.4.2 子范围</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* List</span><br><span class="hljs-comment">subList(int firstIncluded, int firstExcluded)</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">subSet()</span><br><span class="hljs-comment">subMap()</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="9-4-3-不可修改的视图"><a href="#9-4-3-不可修改的视图" class="headerlink" title="9.4.3 不可修改的视图"></a>9.4.3 不可修改的视图</h4><p>Collections 有方法获取集合不可修改视图，如果尝试修改则抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">static &lt;E&gt; Collection unmodifiableCollection(Collection&lt;&gt;E c)</span><br><span class="hljs-comment">......</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="9-4-4-同步视图"><a href="#9-4-4-同步视图" class="headerlink" title="9.4.4 同步视图"></a>9.4.4 同步视图</h4><p>使用视图机制确保常规集合的线程安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">static &lt;E&gt; Collection&lt;E&gt; synchronizedCollection(Collection&lt;E&gt; c)</span><br><span class="hljs-comment">......</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="9-4-5-受查视图"><a href="#9-4-5-受查视图" class="headerlink" title="9.4.5 受查视图"></a>9.4.5 受查视图</h4><p>受查视图可以探测到集合不能探测到的代码问题，受查视图受限于虚拟机可以运行的运行时检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">static &lt;E&gt; Collection&lt;E&gt; checkedCollection(Collection&lt;E&gt; c)</span><br><span class="hljs-comment">......</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="9-5-算法"><a href="#9-5-算法" class="headerlink" title="9.5 算法"></a>9.5 算法</h3><h4 id="9-5-1-排序与混排"><a href="#9-5-1-排序与混排" class="headerlink" title="9.5.1 排序与混排"></a>9.5.1 排序与混排</h4><p>Arrays.sort()</p><h4 id="9-5-2-二分查找"><a href="#9-5-2-二分查找" class="headerlink" title="9.5.2 二分查找"></a>9.5.2 二分查找</h4><p>Collections.binarySearch()</p><h4 id="9-5-3-Collections-其他"><a href="#9-5-3-Collections-其他" class="headerlink" title="9.5.3 Collections 其他"></a>9.5.3 Collections 其他</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* Collections</span><br><span class="hljs-comment">T min(Collection&lt;T&gt; elements)</span><br><span class="hljs-comment">T max(Collection&lt;T&gt; elements)</span><br><span class="hljs-comment">void copy(List&lt;? super T&gt; to, List&lt;T&gt; from)</span><br><span class="hljs-comment">void fill(List&lt;? super T&gt; l, T value)</span><br><span class="hljs-comment">void swap(List&lt;?&gt; l, int i, int j)</span><br><span class="hljs-comment">void reverse(List&lt;?&gt; l)</span><br><span class="hljs-comment">旋转列表元素</span><br><span class="hljs-comment">void rotate(List&lt;?&gt; l, int d)</span><br><span class="hljs-comment">获取与 o 相同元素个数</span><br><span class="hljs-comment">int frequency(Collection&lt;?&gt; c, Object o)</span><br><span class="hljs-comment">两集合没有共同元素返回 true</span><br><span class="hljs-comment">boolean disjoint(Collection&lt;?&gt; cl, Collection&lt;?&gt; c2)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="9-5-4-集合与数组转换"><a href="#9-5-4-集合与数组转换" class="headerlink" title="9.5.4 集合与数组转换"></a>9.5.4 集合与数组转换</h4><p>数组转集合，Arrays.asList()</p><p>集合转数组，list.toArray() 返回 Object[]，转为特定类型需要使用 list.toArray(new String[0]) 或 list.toArray(new String[list.size()]) 这种不会创建新数组</p><h4 id="9-5-5-编写自己的算法"><a href="#9-5-5-编写自己的算法" class="headerlink" title="9.5.5 编写自己的算法"></a>9.5.5 编写自己的算法</h4><p>集合声明时应该尽可能使用接口而非具体的实现，返回集合的方法，可能还要返回接口，而不是返回类。</p><h3 id="9-6-遗留的集合"><a href="#9-6-遗留的集合" class="headerlink" title="9.6 遗留的集合"></a>9.6 遗留的集合</h3><h4 id="9-6-1-Hashtable"><a href="#9-6-1-Hashtable" class="headerlink" title="9.6.1 Hashtable"></a>9.6.1 Hashtable</h4><p>Hashtable 与 HashMap 作用一样</p><h4 id="9-6-2-枚举"><a href="#9-6-2-枚举" class="headerlink" title="9.6.2 枚举"></a>9.6.2 枚举</h4><p>hasMoreElements 和 nextElement 与迭代器的 hasNext 和 next 方法相似。</p><h4 id="9-6-3-属性映射"><a href="#9-6-3-属性映射" class="headerlink" title="9.6.3 属性映射"></a>9.6.3 属性映射</h4><ul><li>键值都是字符串</li><li>表可以保存到文件，也可以从文件加载</li><li>使用一个默认的辅助表</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* Properties</span><br><span class="hljs-comment">Properties()</span><br><span class="hljs-comment">Properties(Properties defaults)</span><br><span class="hljs-comment">String getProperty(String key)</span><br><span class="hljs-comment">String getProperty(String key, String defaultValue)</span><br><span class="hljs-comment">从输入流中加载属性映射</span><br><span class="hljs-comment">void load(InputStream in)</span><br><span class="hljs-comment">将属性映射存储到输出流中</span><br><span class="hljs-comment">void store(OutputStream out, String commentString)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="9-6-4-栈"><a href="#9-6-4-栈" class="headerlink" title="9.6.4 栈"></a>9.6.4 栈</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* Stack</span><br><span class="hljs-comment">E push(E item)</span><br><span class="hljs-comment">E pop()</span><br><span class="hljs-comment">E peek()</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="9-6-5-位集"><a href="#9-6-5-位集" class="headerlink" title="9.6.5 位集"></a>9.6.5 位集</h4><p>BitSet 存放一个位序列，高效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">BitSet(int initialCapacity)</span><br><span class="hljs-comment">int length()</span><br><span class="hljs-comment">boolean get(int bit)</span><br><span class="hljs-comment">void set(int bit)</span><br><span class="hljs-comment">void clear(int bit)</span><br><span class="hljs-comment">void add(BitSet set)</span><br><span class="hljs-comment">void or(BitSet set)</span><br><span class="hljs-comment">void xor(BitSet set)</span><br><span class="hljs-comment">void andNot(BitSet set)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="13-部署-Java-应用程序"><a href="#13-部署-Java-应用程序" class="headerlink" title="13 部署 Java 应用程序"></a>13 部署 Java 应用程序</h2><h3 id="13-1-JAR-文件"><a href="#13-1-JAR-文件" class="headerlink" title="13.1 JAR 文件"></a>13.1 JAR 文件</h3><h4 id="13-1-1-创建-JAR-文件"><a href="#13-1-1-创建-JAR-文件" class="headerlink" title="13.1.1 创建 JAR 文件"></a>13.1.1 创建 JAR 文件</h4><p><code>jar cvf JARFileName File1 File2</code></p><h4 id="13-1-2-清单文件"><a href="#13-1-2-清单文件" class="headerlink" title="13.1.2 清单文件"></a>13.1.2 清单文件</h4><p><code>jar cfm JARFileName MainifestFileName ...</code></p><h4 id="13-1-3-可执行-JAR"><a href="#13-1-3-可执行-JAR" class="headerlink" title="13.1.3 可执行 JAR"></a>13.1.3 可执行 JAR</h4><p>使用 e 指定程序入口，或在清单中国指定</p><p><code>jar cvfe MyProgram.jar com.mycompany.mypkg.MainAppClass ...</code></p><p>启动 jar：<code>jar -jar MyProgram.jar</code></p><h4 id="13-1-4-资源"><a href="#13-1-4-资源" class="headerlink" title="13.1.4 资源"></a>13.1.4 资源</h4><p>文件的自动装载是利用资源加载特性完成的。</p><h4 id="13-1-5-密封"><a href="#13-1-5-密封" class="headerlink" title="13.1.5 密封"></a>13.1.5 密封</h4><p>在清单中加入 <code>Sealed: true</code> 则指定密封</p><h3 id="13-2-应用首选项的存储"><a href="#13-2-应用首选项的存储" class="headerlink" title="13.2 应用首选项的存储"></a>13.2 应用首选项的存储</h3><h4 id="13-2-1-属性映射"><a href="#13-2-1-属性映射" class="headerlink" title="13.2.1 属性映射"></a>13.2.1 属性映射</h4><p>使用 properties 存储属性，获取主目录：<code>System.getProperties(&quot;user.home&quot;)</code></p><h4 id="13-2-2-首选项-API"><a href="#13-2-2-首选项-API" class="headerlink" title="13.2.2 首选项 API"></a>13.2.2 首选项 API</h4><p>Preferences</p>]]></content>
    
    
    <categories>
      
      <category>Reading</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Servlet</title>
    <link href="/2021/10/28/JavaWebServlet/"/>
    <url>/2021/10/28/JavaWebServlet/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Servlet"><a href="#1-Servlet" class="headerlink" title="1 Servlet"></a>1 Servlet</h2><h3 id="1-1-UML-图"><a href="#1-1-UML-图" class="headerlink" title="1.1 UML 图"></a>1.1 UML 图</h3><p>Servlet 是接口，我们常使用的 HttpServlet 是一个实现类，支持 Http 协议。创建我们自己的 Servlet 类继承 HttpServlet 时，必须重写 doPost 和 doGet 两个方法中的一个。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/JavaWebServlet_img/HttpServletUML.png" alt="HttpServletUML"></p><h3 id="1-2-Servlet-生命周期"><a href="#1-2-Servlet-生命周期" class="headerlink" title="1.2 Servlet 生命周期"></a>1.2 Servlet 生命周期</h3><ol><li>Web 容器加载我们创建的 Servlet 类 class 到内存中</li><li>当第一次请求时先调用构造器构造一个 servlet 实例，Web 容器中一个 Servlet 类只有一个实例</li><li>第一次构造了一个 Servlet 实例后，调用 init 方法进行初始化，只会调用一次</li><li>service 方法处理请求参数和响应，每个请求都会在单个线程中执行</li><li>Web 容器停止或实例被回收，会调用 destroy 进行资源回收操作，只会调用一次</li></ol><p>servlet 初始化参数配置中 load-on-startup 可以指定当前 Servlet 类在 Web 容器启动时而不是等到第一个请求到来时就构造 Servlet 实例并执行 init 方法。</p><h3 id="1-3-搭建-Servlet-程序"><a href="#1-3-搭建-Servlet-程序" class="headerlink" title="1.3 搭建 Servlet 程序"></a>1.3 搭建 Servlet 程序</h3><h4 id="1-3-1-目录结构"><a href="#1-3-1-目录结构" class="headerlink" title="1.3.1 目录结构"></a>1.3.1 目录结构</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stylus">\apache-tomcat-<span class="hljs-number">9.0</span>.<span class="hljs-number">54</span>\webapps\<br>D:.<br>├─docs<br>├─examples<br>├─host-manager<br>├─ROOT<br>│<br>└─servlet<br>    │<br>    ├─<span class="hljs-attribute">src</span><br>    │  └─<span class="hljs-attribute">top</span><br>    │      └─reajason<br>    │              HelloServlet<span class="hljs-selector-class">.java</span><br>    └─WEB-INF<br>        │  web<span class="hljs-selector-class">.xml</span><br>        │<br>        ├─classes<br>        │  └─<span class="hljs-attribute">top</span><br>        │      └─reajason<br>        │              HelloServlet<span class="hljs-selector-class">.class</span><br>        └─lib<br></code></pre></td></tr></table></figure><ol><li>在 tomacat 主目录中 webapps 下新建一个 servlet 目录，作为 web 项目</li><li>在 src 下编写 Java 代码</li><li>WEB-INF 中 web.xml 配置当前 web 项目</li><li>WEB-INF 中 classes 用来接收 Java 代码生成的 class 文件</li><li>WEB-INF 中 lib 用来放第三方库</li></ol><h4 id="1-3-2-代码编写"><a href="#1-3-2-代码编写" class="headerlink" title="1.3.2 代码编写"></a>1.3.2 代码编写</h4><p>.\src\top\reajason\HelloServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> top.reajason;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>    <span class="hljs-keyword">throws</span> IOException, ServletException<br>    &#123;<br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br>        out.println(<span class="hljs-string">&quot;&lt;h1&gt;Hello Servlet&lt;/h1&gt;&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>    <span class="hljs-keyword">throws</span> IOException, ServletException<br>    &#123;<br>        doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>.\WEB-INF\web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">web-app</span></span><br><span class="hljs-meta">    <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="hljs-meta">    <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>top.reajason.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-3-3-编译运行"><a href="#1-3-3-编译运行" class="headerlink" title="1.3.3 编译运行"></a>1.3.3 编译运行</h4><p>在 servlet 目录下打开终端运行如下命令：<code>apache-tomcat-9.0.54\webapps\servlet</code></p><ul><li>-d：指定编译后的 class 文件到 .\WEB-INF\classes\ 下</li><li>-classpath：指定类路径</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">javac -encoding utf-8 -d .\WEB-INF\classes\ -classpath <span class="hljs-string">&quot;..\..\lib\servlet-api.jar;.;.\WEB-INF\classes\&quot; .\src\top\reajason\*.java</span><br></code></pre></td></tr></table></figure><p>进入 tomcat 主目录的 bin 下面运行 startup.bat，开启 tomcat 服务</p><p>浏览器输入：<code>http://localhost:8080/servlet/hello</code></p><h2 id="2-请求与响应"><a href="#2-请求与响应" class="headerlink" title="2 请求与响应"></a>2 请求与响应</h2><p>Servlet 绝大多数都在 service 方法中响应处理请求，HttpServlet 重写了 Servlet 接口的 service 方法以请求方式分成了 doGet、doPost、doHead……，当请求方式是哪一种就走哪一个方法。方法的参数类型也变成了 HttpServletRequest 和 HttpServletResponse。</p><h3 id="2-1-请求"><a href="#2-1-请求" class="headerlink" title="2.1 请求"></a>2.1 请求</h3><h4 id="2-1-1-UML-图"><a href="#2-1-1-UML-图" class="headerlink" title="2.1.1 UML 图"></a>2.1.1 UML 图</h4><p>HttpServletRequest 实现了 ServletRequest 接口，并定义了更多关于 Http 的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/JavaWebServlet_img/HttpServletRequestUML.png" alt="HttpServletRequestUML"></p><h4 id="2-1-2-常用方法"><a href="#2-1-2-常用方法" class="headerlink" title="2.1.2 常用方法"></a>2.1.2 常用方法</h4><p>获取请求参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取请求方法</span><br>String <span class="hljs-title function_">getMethod</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 获取指定 name 的请求的值，第二个方法返回数组，比如前端使用多选框带过来的值</span><br>String <span class="hljs-title function_">getParameter</span><span class="hljs-params">(String name)</span>;<br>String[] getParameterValues(String name);<br><span class="hljs-comment">// 获取请求参数名称列表</span><br>Enumeration&lt;String&gt; <span class="hljs-title function_">getParameterNames</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>获取请求头：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取指定 name 的请求头值</span><br>String <span class="hljs-title function_">getHeader</span><span class="hljs-params">(String name)</span>;<br><span class="hljs-comment">// 获取指定 name 的请求头值，返回枚举集合，例如 accept-encoding 就可能有很多值</span><br>Enumeration&lt;String&gt; <span class="hljs-title function_">getHeaders</span><span class="hljs-params">(String name)</span>;<br><span class="hljs-comment">// 返回 int 值，例如 Content-Length 返回一个整数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getIntHeader</span><span class="hljs-params">(String name)</span>;<br><span class="hljs-comment">// 获取所有请求头</span><br>Enumeration&lt;String&gt; <span class="hljs-title function_">getHeaderNames</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>会话相关：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取请求 cookie</span><br>Cookie[] getCookies();<br><span class="hljs-comment">// 获取 session 对象</span><br>HttpSession <span class="hljs-title function_">getSession</span><span class="hljs-params">()</span>;<br>HttpSession <span class="hljs-title function_">getSession</span><span class="hljs-params">(<span class="hljs-type">boolean</span> b)</span>;<br></code></pre></td></tr></table></figure><p>获取请求输入流：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取请求字节输入流，可获取用户上传的文件</span><br>ServletInputStream <span class="hljs-title function_">getInputStream</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">// 获取请求字符缓冲流</span><br>BufferedReader <span class="hljs-title function_">getReader</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>获取地址相关：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取客户端地址，Servlet 编写于服务端，因此对于服务端 remote 就是指的客户端</span><br>String <span class="hljs-title function_">getRemoteAddr</span><span class="hljs-params">()</span>;<br>String <span class="hljs-title function_">getRemoteHost</span><span class="hljs-params">()</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">getRemotePort</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">// 获取服务端</span><br>String <span class="hljs-title function_">getServerName</span><span class="hljs-params">()</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">getServerPort</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>请求转发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取请求转发对象</span><br>RequestDispatcher <span class="hljs-title function_">getRequestDispatcher</span><span class="hljs-params">(String name)</span>;<br><span class="hljs-comment">// include() 请求转发之后，又回到当前 Servlet 类继续处理</span><br><span class="hljs-comment">// forward() 请求转发，直接将请求交给其他 Servlet 类处理，地址栏不发生变化，区别于重定向</span><br></code></pre></td></tr></table></figure><p>属性相关：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置属性，可以将自定义类实例设为属性值</span><br>setAttribute(String name, Object obj);<br><span class="hljs-comment">// 获取属性</span><br>Object <span class="hljs-title function_">getAttribute</span><span class="hljs-params">(String name)</span>;<br>Enumeration&lt;String&gt; <span class="hljs-title function_">getAttributeNames</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 删除属性</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">removeAttribute</span><span class="hljs-params">(String name)</span>;<br></code></pre></td></tr></table></figure><p>其他：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取单个文件</span><br>Part <span class="hljs-title function_">getPart</span><span class="hljs-params">(String name)</span>;<br><span class="hljs-comment">// 获取多个文件</span><br>Collection&lt;Part&gt; <span class="hljs-title function_">getParts</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 获取 ServletContext</span><br>ServletContext <span class="hljs-title function_">getServletContext</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// ......</span><br></code></pre></td></tr></table></figure><h3 id="2-2-响应"><a href="#2-2-响应" class="headerlink" title="2.2 响应"></a>2.2 响应</h3><h4 id="2-2-1-UML-图"><a href="#2-2-1-UML-图" class="headerlink" title="2.2.1 UML 图"></a>2.2.1 UML 图</h4><p>HttpServletResponse 实现了 ServletResponse 接口，并定义了更多关于 Http 的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/JavaWebServlet_img/HttpServletResponse.png" alt="HttpServletResponse"></p><h4 id="2-2-2-常用方法"><a href="#2-2-2-常用方法" class="headerlink" title="2.2.2 常用方法"></a>2.2.2 常用方法</h4><p>设置响应头：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置响应头</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeader</span><span class="hljs-params">(String head, String value)</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setIntHeader</span><span class="hljs-params">(String head, <span class="hljs-type">int</span> value)</span>;<br><span class="hljs-comment">// 设置响应状态，200，404...</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setStatus</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<br><span class="hljs-comment">// 设置响应类型，常见的有：text/html、image/jpeg、application/pdf...</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setContentType</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>获取输出流：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取字符输出流</span><br>PrintWriter <span class="hljs-title function_">getWriter</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 获取字节输出流</span><br>ServletOutputStream <span class="hljs-title function_">getOutputStream</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>重定向：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">sendRedirect</span><span class="hljs-params">(String url)</span>;<br></code></pre></td></tr></table></figure><h2 id="3-ServletConfig"><a href="#3-ServletConfig" class="headerlink" title="3 ServletConfig"></a>3 ServletConfig</h2><p>每一个 Servlet 类都有一个 ServletConfig，不能共享。Web 容器启动后 Servlet 类初始化后 ServletConfig 中的值就不变了。</p><p>使用方法：</p><p>在 web.xml 中配置 ServletConfig 初始化参数，在 servlet 标签中使用 init-param 标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">web-app</span></span><br><span class="hljs-meta">    <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="hljs-meta">    <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>rq<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>top.reajason.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>username<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>ReaJason<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>gender<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>male<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 Servlet 类中获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">getServletConfig().getInitParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>getServletConfig().getInitParameter(<span class="hljs-string">&quot;gender&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="4-ServletContext"><a href="#4-ServletContext" class="headerlink" title="4 ServletContext"></a>4 ServletContext</h2><p>每一个 Web 应用有一个 ServletContext（每个 JVM 有一个 ServletContext，分布式应用时会有不同的），该应用类所有 Servlet 类都可以访问</p><p>初始化参数使用方法：</p><p>在 web.xml 中配置 ServletContext 初始化参数，使用 context-param 标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">web-app</span></span><br><span class="hljs-meta">    <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="hljs-meta">    <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>username<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>ReaJason<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>rq<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>top.reajason.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>username<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>ReaJason<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>rq<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/rq<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 Servlet 类中调用获取参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">getServletContext().getInitParameter(<span class="hljs-string">&quot;username&quot;</span>);<br></code></pre></td></tr></table></figure><p>ServletContext 也有属性相关的方法，设置之后可以 Web 应用全局访问，用于数据共享，可配合 ServletContextListener 监听器在创建时初始化属性。</p><h2 id="5-HttpSession"><a href="#5-HttpSession" class="headerlink" title="5 HttpSession"></a>5 HttpSession</h2><p>HttpSession 对象在与一个特定客户的整个会话期间都存在，对于会话期间客户做的所有请求，从中得到的所有信息都可以用 HttpSession 对象保存。</p><p>会话死亡的三种情况：</p><ol><li>超时</li><li>调用 invalidate() 方法</li><li>应用结束</li></ol><p>在分布式应用中 ServletContext、ServletConfig 每个 VM 都会有一个备份，但是 HttpSession 只会有一个，相同的 HttpSession 不会出现在两个 VM 中。Web 容器会操作 HttpSession 对象在多个 VM 中进行移动完成请求，这个过程中 HttpSessionAttributeListener 监听器发挥作用。</p><h3 id="5-1-获取-HttpSession-对象"><a href="#5-1-获取-HttpSession-对象" class="headerlink" title="5.1 获取 HttpSession 对象"></a>5.1 获取 HttpSession 对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 从请求中获取会话对象，没有则创建，有则直接拿</span><br>request.getSession();<br><span class="hljs-comment">// 从请求中获取会话对象，没有则返回 null，有则直接拿</span><br>request.getSession(<span class="hljs-literal">false</span>);<br><span class="hljs-comment">// 每次获取都是新的</span><br>request.getSession(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h3 id="5-2-HttpSession-常用方法"><a href="#5-2-HttpSession-常用方法" class="headerlink" title="5.2 HttpSession 常用方法"></a>5.2 HttpSession 常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 判断当前 HttpSession 是否是新创建的</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">isNew</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 获取创建时间</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">getCreationTime</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 获取最近一次获取时间</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">getLastAccessedTime</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 设置用户请求最大间隔时间，超过时间未请求会话撤销（秒）</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setMaxInactiveInterval</span><span class="hljs-params">(<span class="hljs-type">int</span> seconds)</span>;<br><span class="hljs-comment">// 获取用户请求最大间隔时间（秒）</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getMaxInactiveInterval</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 结束会话</span><br>coid <span class="hljs-title function_">invalidate</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>属性相关：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置属性</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setAttribute</span><span class="hljs-params">(String name, Object obj)</span>;<br><span class="hljs-comment">// 获取属性</span><br>Object <span class="hljs-title function_">getAttribute</span><span class="hljs-params">(String name)</span>;<br>Enumeration&lt;String&gt; <span class="hljs-title function_">getAttributeNames</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 删除属性</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">removeAttribute</span><span class="hljs-params">(String name)</span>;<br></code></pre></td></tr></table></figure><p>当客户端不支持 Cookie 时使用 URL 重写的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// encodeURL 会将 session 里面的属性拼接在 URL 后当作请求参数</span><br>response.encodeURL(<span class="hljs-string">&quot;/login&quot;</span>);<br>response.sendRedirect(response.encodeRedirectURL(<span class="hljs-string">&quot;/login&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="5-3-Cookie"><a href="#5-3-Cookie" class="headerlink" title="5.3 Cookie"></a>5.3 Cookie</h3><p>向响应中添加 Cookie 的步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1、创建一个新的 Cookie 对象</span><br><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;ReaJason&quot;</span>);<br><span class="hljs-comment">// 2、设置 cookie 的存活时间（秒）</span><br>cookie.setMaxAge(<span class="hljs-number">30</span>*<span class="hljs-number">60</span>);<br><span class="hljs-comment">// 3、添加到响应中</span><br>response.addCookie(cookie);<br></code></pre></td></tr></table></figure><p>从请求中获取特定 cookie 的步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1、获取 cookie 数组</span><br>Cookie[] cookies = request.getCookies();<br><span class="hljs-comment">// 2、遍历获取</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cookies.length; i++)&#123;<br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> cookie[i];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;username&quot;</span>.equals(cookie.getName()))&#123;<br>        out.println(cookie.getValue());<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-监听器"><a href="#6-监听器" class="headerlink" title="6 监听器"></a>6 监听器</h2><h3 id="6-1-ServletContextListener"><a href="#6-1-ServletContextListener" class="headerlink" title="6.1 ServletContextListener"></a>6.1 ServletContextListener</h3><p>ServletContext 监听器，监听 ServletContext 初始化时和销毁时执行对应方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ServletContextListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EventListener</span> &#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextInitialized</span><span class="hljs-params">(ServletContextEvent sce)</span> &#123;&#125;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextDestroyed</span><span class="hljs-params">(ServletContextEvent sce)</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用方法：</p><ol><li><p>编写自定义类实现 ServletContextListener，并实现两个方法</p></li><li><p>在 web.xml 中注册监听器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>top.reajason.listener.MyServletContextListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="6-2-ServletContextAttributeListener"><a href="#6-2-ServletContextAttributeListener" class="headerlink" title="6.2 ServletContextAttributeListener"></a>6.2 ServletContextAttributeListener</h3><p>ServletContext 属性监听器，监听 ServletContext 添加、删除、修改属性时调用对应方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ServletContextAttributeListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EventListener</span> &#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeAdded</span><span class="hljs-params">(ServletContextAttributeEvent event)</span> &#123;&#125;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeRemoved</span><span class="hljs-params">(ServletContextAttributeEvent event)</span> &#123;&#125;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeReplaced</span><span class="hljs-params">(ServletContextAttributeEvent event)</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用方法同 ServletContextListener</p><h3 id="6-3-ServletRequestListener"><a href="#6-3-ServletRequestListener" class="headerlink" title="6.3 ServletRequestListener"></a>6.3 ServletRequestListener</h3><p>ServletRequest 监听器，监听请求初始化和销毁的时候调用对应方法，比如记录请求日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ServletRequestListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EventListener</span> &#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestDestroyed</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;&#125;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestInitialized</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用方法同 ServletContextListener</p><h3 id="6-4-ServletRequestAttributeListener"><a href="#6-4-ServletRequestAttributeListener" class="headerlink" title="6.4 ServletRequestAttributeListener"></a>6.4 ServletRequestAttributeListener</h3><p>ServletRequest 属性监听器，监听 ServletRequest 添加、删除、修改属性时调用对应方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ServletRequestAttributeListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EventListener</span> &#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeAdded</span><span class="hljs-params">(ServletRequestAttributeEvent srae)</span> &#123;&#125;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeRemoved</span><span class="hljs-params">(ServletRequestAttributeEvent srae)</span> &#123;&#125;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeReplaced</span><span class="hljs-params">(ServletRequestAttributeEvent srae)</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用方法同 ServletContextListener</p><h3 id="6-5-HttpSessionListener"><a href="#6-5-HttpSessionListener" class="headerlink" title="6.5 HttpSessionListener"></a>6.5 HttpSessionListener</h3><p>HttpSession 监听器，监听 HttpSession 创建和销毁时调用对应方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HttpSessionListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EventListener</span> &#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionCreated</span><span class="hljs-params">(HttpSessionEvent se)</span> &#123;&#125;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionDestroyed</span><span class="hljs-params">(HttpSessionEvent se)</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用方法同 ServletContextListener</p><h3 id="6-6-HttpSessionBindingListener"><a href="#6-6-HttpSessionBindingListener" class="headerlink" title="6.6 HttpSessionBindingListener"></a>6.6 HttpSessionBindingListener</h3><p>HttpSession 绑定监听器，监听一个自定类与 HttpSession 绑定状态调用对应方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HttpSessionBindingListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EventListener</span> &#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">valueBound</span><span class="hljs-params">(HttpSessionBindingEvent event)</span> &#123;&#125;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">valueUnbound</span><span class="hljs-params">(HttpSessionBindingEvent event)</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用方法，在属性类中实现 HttpSessionBindingListener 接口中对应方法，无需在 web.xml 中注册。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpSessionBindingListener</span>&#123;<br>    ...;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">valueBound</span><span class="hljs-params">(HttpSessionBindingEvent event)</span>&#123;<br>        <span class="hljs-comment">// 当前类实例添加到会话时会触发当前方法</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">valueUnbound</span><span class="hljs-params">(HttpSessionBindingEvent event)</span>&#123;<br>        <span class="hljs-comment">// 当前类实例从会话中移除时会触发当前方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-7-HttpSessionAttributeListener"><a href="#6-7-HttpSessionAttributeListener" class="headerlink" title="6.7 HttpSessionAttributeListener"></a>6.7 HttpSessionAttributeListener</h3><p>HttpSession 属性监听器，监听 HttpSession 添加、删除、修改属性时调用对应方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HttpSessionAttributeListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EventListener</span> &#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeAdded</span><span class="hljs-params">(HttpSessionBindingEvent event)</span> &#123;&#125;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeRemoved</span><span class="hljs-params">(HttpSessionBindingEvent event)</span> &#123;&#125;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeReplaced</span><span class="hljs-params">(HttpSessionBindingEvent event)</span> &#123;&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>使用方法同 ServletContextListener</p><h3 id="6-8-HttpSessionActivationListener"><a href="#6-8-HttpSessionActivationListener" class="headerlink" title="6.8 HttpSessionActivationListener"></a>6.8 HttpSessionActivationListener</h3><p>HttpSession 迁移监听器，监听绑定在 HttpSession 的自定义类从一个 JVM 迁移时调用对应方法。</p><p>HttpSession 迁移时只会迁移 Serialization 属性，因此非 Serializable 属性可以通过该监听器解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HttpSessionActivationListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EventListener</span> &#123; <br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionWillPassivate</span><span class="hljs-params">(HttpSessionEvent se)</span> &#123;&#125;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionDidActivate</span><span class="hljs-params">(HttpSessionEvent se)</span> &#123;&#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>使用方法：</p><ol><li>在自定义类中实现当前监听器接口</li><li>在 web.xml 注册当前监听器</li></ol><h2 id="7-过滤器"><a href="#7-过滤器" class="headerlink" title="7 过滤器"></a>7 过滤器</h2><p>FileChain 过滤器链，使得在拦截一个请求时可以经过多个过滤器进行操作。</p><p>可以使用包装类进行请求和响应的定制操作：</p><ul><li>ServletRequestWrapper</li><li>HttpServletRequestWrapper</li><li>ServletRequestWrapper</li><li>HtpServletResponseWrapper</li></ul><p>定义过滤器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> top.reajason;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span>&#123;<br><br>    <span class="hljs-keyword">private</span> FilterConfig fc;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig config)</span> <span class="hljs-keyword">throws</span> ServletException&#123;<br>        <span class="hljs-built_in">this</span>.fc = config;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span><br>        <span class="hljs-keyword">throws</span> ServletException, IOException&#123;<br>            <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">httpReq</span> <span class="hljs-operator">=</span> (HttpServletRequest)req;<br>            fc.getServletContext().log(<span class="hljs-string">&quot;进入过滤器了&quot;</span>);<br>            chain.doFilter(req, resp);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>web.xml 配置过滤器解析：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>LRequest<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>top.reajason.MyFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>LogFileName<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UserLog.txt<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>LRequest<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;url-pattern&gt;/hello&lt;/url-pattern&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《软技能：代码之外的生存技能》读书笔记</title>
    <link href="/2021/10/01/SoftSkillsReadingNotes/"/>
    <url>/2021/10/01/SoftSkillsReadingNotes/</url>
    
    <content type="html"><![CDATA[<p>本书一共分为 7 篇（职业、自我营销、学习、生产力、理财、健身、精神），71 个章节。</p><p>对于我一个刚毕业的正准备投身于软件开发行业的一个初入职场的新手，我表示看完之后受益匪浅（直接升华了，重新认识了这个职业以及前面的路该如何走）。</p><h2 id="职业篇"><a href="#职业篇" class="headerlink" title="职业篇"></a>职业篇</h2><p>该篇中第一章就惊艳到我了，以至于我一个从小到大基本没静坐下来读过书的，我都非常有兴趣能把这本书继续读下去。</p><h3 id="1、拥有商业心态"><a href="#1、拥有商业心态" class="headerlink" title="1、拥有商业心态"></a>1、拥有商业心态</h3><p>转变自己的心态，将自己当作一个企业思考，我们现在的公司雇主就是我们的一个客户，我们所提供的服务就是创建软件（软件开发），我们应该想法设法提升你的服务，思考自己可以专注于哪一特定类型的客户，集中精力成为一名专家，专门为特定用户群提供一个整体的服务（作为软件开发人员，只有真正专注于一类客户群体，我们才能找到非常好的工作）。即便我们现在正在为某家公司打工（拿着固定薪资，工资不取决于表现），但是千万不要这个特定的角色固化我们的整个职业生涯。</p><h3 id="2、设定目标"><a href="#2、设定目标" class="headerlink" title="2、设定目标"></a>2、设定目标</h3><p>大多数开发人员害怕为自己的职业生涯设定一个长远的蓝图，因为惧怕选定后就要一往无前，他们希望自己有各种选择，害怕回答诸如『如果选错了路怎么办？』、『选择了自己不喜欢的路怎么办？』等一系列问题。没有明确的方向，我们走的每一步都是徒劳。不要随心所欲地生活，不要随遇而安地行走在职业生涯的漫漫长路上。</p><p>设定一个大目标，不需要非常清晰，只需要当我们奋勇前行时，我们能确保我们能识别，当前是偏航了还是正在离我们的目标越来越近。目标可以是职业生涯中收获什么？5 年或者 10 年后希望自己在哪？等等。思前想后，我感觉自己的目标其实有很多，希望能开发一款属于自己的产品，夯实自己的计算机基础（操作系统、数据结构与算法、计算机网络、计算机组成原理、离散数学……）（因为我是非科班的，这对我以后的路走多远非常重要），使用技术栈开发部署一款属于自己的博客等等。</p><p>有大目标之后，就需要我们将其划分为一个个小目标了。例如月度目标、周目标、日目标。如果可以驱动小目标逐渐前行并靠近大目标，那么我们最终一定会达到目的地。较小的目标可以让我们航行在自己的轨道上，激励我们保持航向朝着更大的目标前进。</p><p>我们需要定时追踪并更新自己设定的目标，必要时调整。定期核对自己的目标，有助于在必要时调整，对自己负责。</p><h3 id="3、人际交往"><a href="#3、人际交往" class="headerlink" title="3、人际交往"></a>3、人际交往</h3><p>绝绝子，这一章第一个标题就直接戳我，『别管我，我只想一个人安静地写代码』，麻了我上一个工作就是事情太多了，导致我产生了这个可怕的只想一个人安静地写代码的想法。书中写了在软件开发领域中，我们所写代码是供人使用，其次才是让计算机可以理解。想要成为一名出色的软件开发人员，就得学会高效地与他人相处（尽管写代码是我们工作最享受的一部分）。任务是上级布置的，软件需求，开会讨论都需要与人沟通等等，作为一个软件开发人员，我们的工作就是与人打交道（其实几乎所有职业都是这样）。书中推荐了阅读《人性的弱点》一书。并举例了其中的一点点观点。</p><p>每个人都希望感到自己很重要。如果希望人们接受自己的想法，并认可其中的价值，首先最好主动给他人相同的礼遇。不要轻率地否决同事的想法。</p><p>永远不要批评。试着将批评变成鼓励，用表扬代替批评。</p><p>换位思考。聚精会神地聆听，思考什么对他们至关重要，说话的时候以别人的角度，往往听上去更舒服。</p><p>避免争吵。普天之下解决争吵的灵丹妙药只有一个，那就是避免争吵。</p><p>有时候生活中有的人抓住一切机会贬低他人，对生活的一切抱有消极态度，最好极力避开他们。不要试着区改变他们，不要试图和他们打交道，如果不幸与之打交道，限定在最小范围之类，切记不要投入感情。</p><h3 id="4、破解面试"><a href="#4、破解面试" class="headerlink" title="4、破解面试"></a>4、破解面试</h3><p>突破常规，想尽办法和公司内部人员建立联系。内推去面试比简单地投递简历面试，往往会更加容易。</p><p>面试时，自信地展示自己的能力，集中精力证明自己就是无需督促也能自动自发地做好事情的员工。在技术上确实能够胜任工作，并且说服面试官相信我们非常能干，不怕困难。</p><p>当下我们所能做的事情，第一件事就是确保自己的技术能力，如果力所不及，什么面试技巧都没用。未雨绸缪，拓展自己的社交网络，与本领域不同的员工接触，建立联系（评论他们的博客）。即便对换新工作毫无兴趣，为了获得面试经验也可以区面试，练习越多，真正面试也就越游刃有余。集中精力推销自己。</p><h3 id="5、专业化"><a href="#5、专业化" class="headerlink" title="5、专业化"></a>5、专业化</h3><h2 id="自我营销篇"><a href="#自我营销篇" class="headerlink" title="自我营销篇"></a>自我营销篇</h2><h2 id="学习篇"><a href="#学习篇" class="headerlink" title="学习篇"></a>学习篇</h2><h2 id="生产力篇"><a href="#生产力篇" class="headerlink" title="生产力篇"></a>生产力篇</h2><h2 id="理财篇"><a href="#理财篇" class="headerlink" title="理财篇"></a>理财篇</h2><h2 id="健身篇"><a href="#健身篇" class="headerlink" title="健身篇"></a>健身篇</h2><h2 id="精神篇"><a href="#精神篇" class="headerlink" title="精神篇"></a>精神篇</h2>]]></content>
    
    
    <categories>
      
      <category>Books</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Man In Love Review</title>
    <link href="/2021/09/28/ManInLoveReview/"/>
    <url>/2021/09/28/ManInLoveReview/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>之前看电影、看剧、看番基本看完就忘，有时候觉得写下来自己的感受或许会真的更加有收获</p>          </div> <span id="more"></span><div class="note note-info">            <p>在线观看地址：<a href="https://www.kpkuang.com/voddetail/429758/">《当男人恋爱时》(2021)</a></p>          </div> <h1 id="当男人恋爱时观后感"><a href="#当男人恋爱时观后感" class="headerlink" title="当男人恋爱时观后感"></a>当男人恋爱时观后感</h1><p>  促使我写这次观后感的原因有两个，一个不想在 QQ 和朋友圈写，已经没有在这两个平台的分享欲了；二看到后面真的涕泗横流那种了（复杂的感情交织在一起），想尝试写一写自己的 feelings。整部影片看到结尾，我的第一感受是，我更喜欢美好一点的结局，男主最后没能活下来我觉得很伤心（好烦啊，怎么就不能活下来啊）。</p><p>  第一个泪流满面的点：成哥出狱之后，费劲九牛二虎之力，硬把钱要回来，但是也没能还给浩婷（拒绝了）。傍晚时分，浩婷的同事为浩婷介绍了个相亲对象在外面一起吃饭，成哥站在不远的窗外，看着浩婷开心的模样，又哭有又笑的样子。就在这一刻，我哭了，我突然想到了很多事情，我仿佛我能代入到其中，我仿佛知道成哥心里在想什么，那就是『她现在开心、幸福真好』（一千个观众就会有一千个哈姆雷特）。笑过之后更多的是伤心难受，爱情让人撕心裂肺。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/ManInLoveReview_img/1.png"></img></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/ManInLoveReview_img/2.png"></img></p><p>  这一点我真的有感同身受：自己无力、仿佛再也没有机会的时候，看着自己喜欢的另一半开心幸福的样子，自己也会非常开心。我想起了高中那段短暂的恋爱经历和大学的恋爱经历。虽然我已经不在身边，但是看到她开心幸福有成就的时候也会非常开心（现实和影片还是有亿点点的不同，但是我就是想到了这一点）。</p><p>  电影中两个人在一起真的超级不容易，他们在一起脸上洋溢着的幸福的笑容真的非常打动人，非常令人向往爱情。由于电影的篇幅限制，他们的爱情之路进展得非常之快，以至于我刚想好好磕糖，刚慢慢进入角色，它咔得一下，给我整哭了，我不能接受，我无法接受，退钱退钱。</p><p>  该片中后半段从成哥的钱全部被骗走后开始推上高潮，疾病疼痛这类引起人们共鸣的手段，真的好烦，但是他作为一个悲剧又真的对观影者很有用，都会情不自禁地落泪，我也是一直在涕泗横流。看完之后非常满足，作为爱情片它有很多令人向往的爱情的桥段，它也有许多使人潸然泪下的情节铺设。感谢『小郑同学』的安利✨，Nice，哭爽了，属于是。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/ManInLoveReview_img/3.png"></img></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/ManInLoveReview_img/4.png"></img></p>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PL/SQL 以及 Navicat 连接 Oracle11G</title>
    <link href="/2021/08/26/PLSQL&amp;NavicatConnectOracle11g/"/>
    <url>/2021/08/26/PLSQL&amp;NavicatConnectOracle11g/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>熟练地使用已有的工具，能有效地提高生产效率</p>          </div> <span id="more"></span><h2 id="PL-x2F-SQL-Developer"><a href="#PL-x2F-SQL-Developer" class="headerlink" title="PL&#x2F;SQL Developer"></a>PL&#x2F;SQL Developer</h2><h3 id="⌛下载"><a href="#⌛下载" class="headerlink" title="⌛下载"></a>⌛下载</h3><div class="note note-success">            <p><a href="https://www.allroundautomations.com/products/pl-sql-developer/free-trial/">官网下载地址，点击前往</a></p>          </div> <p>无脑推荐官网下载，根据自己电脑来就行，32 位就 32 位，64 位就 64 位</p><h3 id="🔓授权"><a href="#🔓授权" class="headerlink" title="🔓授权"></a>🔓授权</h3><div class="note note-info">            <p>授权码来源于网络</p>          </div> <p><strong>Product Code:</strong> <code>ke4tv8t5jtxz493kl8s2nn3t6xgngcmgf3</code></p><p><strong>Serial Number:</strong> <code>264452</code></p><p><strong>Password:</strong> <code>xs374ca</code></p><h3 id="⚙配置"><a href="#⚙配置" class="headerlink" title="⚙配置"></a>⚙配置</h3><div class="note note-warning">            <p>建议 PLSQL、instantclient 与 服务器 Oracle 版本一致</p>          </div> <p>根据所需要连接的 Oracle 版本来选择自己所需要下载的版本（下载需要账号，注册就行），这是一种不安装客户端的形式，稍微轻便一点，不过有些功能会没有，酌情使用，也可使用高版本的位数相同的客户端下载。</p><ul><li><a href="https://www.oracle.com/database/technologies/instant-client/microsoft-windows-32-downloads.html">32 位 instant-client 下载地址</a></li><li><a href="https://www.oracle.com/database/technologies/instant-client/winx64-64-downloads.html">64 位 instant-client 下载地址</a></li></ul><p>由于我需要连接的服务器安装的是 64 位 Oracle 11g 的版本所以我下载的是 instantclient-basic-windows.x64-11.2.0.4.0.zip</p><p>打开 PL&#x2F;SQL Developer，登录的时候点取消，进入设置，如图配置 Oracle 主目录以及 OCI 库的位置为下载解压的目录路径，应用并重启</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/PLSQL&NavicatConnectOracle11g_index_img/plsql.png" alt="plsql setting"></p><h3 id="🎯连接"><a href="#🎯连接" class="headerlink" title="🎯连接"></a>🎯连接</h3><p>使用用户名、密码和数据库（ip:port&#x2F;servername）进行连接（如果连接不上根据报错寻找解决办法，一般情况就是下载的 instant-client 与服务器的版本不匹配，显示未授权的协议）</p><p>如果查询的时候乱码则需要配置 Windows 环境变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询数据库版本</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> v$version;<br><br><span class="hljs-comment">-- 查询数据库所使用的编码</span><br><span class="hljs-keyword">select</span> userenv(<span class="hljs-string">&#x27;language&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br></code></pre></td></tr></table></figure><p>环境变量名：NLS_LANG</p><p>环境变量值：查询编码到的编码（我的是：AMERICAN_AMERICA.ZHS16GBK）</p><p>重启就不会乱码了🤗</p><h2 id="Navicat-Premium-15"><a href="#Navicat-Premium-15" class="headerlink" title="Navicat Premium 15"></a>Navicat Premium 15</h2><h3 id="⌛下载-1"><a href="#⌛下载-1" class="headerlink" title="⌛下载"></a>⌛下载</h3><div class="note note-success">            <p><a href="https://www.navicat.com.cn/download/navicat-premium">官网下载地址，点击前往</a></p>          </div> <p>无脑推荐官网下载，根据自己电脑来就行，32 位就 32 位，64 位就 64 位</p><h3 id="🔓授权-1"><a href="#🔓授权-1" class="headerlink" title="🔓授权"></a>🔓授权</h3><p>教程这边请👉：<a href="https://cloud.tencent.com/developer/article/1804255">Navicat Premium 15安装教程(完整激活版) </a></p><h3 id="⚙配置-1"><a href="#⚙配置-1" class="headerlink" title="⚙配置"></a>⚙配置</h3><div class="note note-success">            <p>我使用 PL&#x2F;SQL 上面下载用的 OCI 并不可行，找到可行的 <a href="https://lingsiki.lanzoui.com/iWlWkt9fwdi">Oracle11g OCI 下载</a> </p>          </div> <p>工具-选项-环境-OCI 环境选择下载解压的 oci.dll 文件重启即可</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/PLSQL&NavicatConnectOracle11g_index_img/navicat.png" alt="navicat setting"></p><h3 id="🎯连接-1"><a href="#🎯连接-1" class="headerlink" title="🎯连接"></a>🎯连接</h3><p>新建 Oracle 连接，主机填写 ip 地址，账号密码，服务名，测试链接</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Forever Algorithm</title>
    <link href="/2021/08/21/ForeverAlgorithm/"/>
    <url>/2021/08/21/ForeverAlgorithm/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="7ea73cc4deb89a5b3ad25c70a58c1d53d2abafa2c4a2fb1c29b65c6ee5266a5f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>C++</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algotrithm</tag>
      
      <tag>Private</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>梦想是注定孤独的旅行</title>
    <link href="/2021/08/08/BeStrongerAndBetter/"/>
    <url>/2021/08/08/BeStrongerAndBetter/</url>
    
    <content type="html"><![CDATA[<center><h1>Notions</h1></center><span id="more"></span><p>  刚毕完业，就兴致冲冲地出来找工作，由于自己很菜，又不愿待在原专业去工地上，所以最后跌跌撞撞找到了深圳一个办公室敲代码的工作，勉勉强强维持生计的样子，6-24 号就跑出来，现在也一个多月了，慢慢地适应了这边的生活，收获了许多也成长了不少。</p><p>  刚出来那一会儿，每天晚上都不想回到那个城中村的小房子里面，一 <strong>热</strong>，开空调费电，二 <strong>网差</strong>，联通直接没信号。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/BeStrongerAndBetter_img/place.jpg" alt="井底之蛙视角"></p><p>  工作完之后，把东西放在房间里就出去散步，然后拿起手机打开微信看今天该和谁视频电话了，那段时间每天找家里人或者朋友们微信视频通话（有说不完的话，因为第一次出远门工作，新奇的经历）。今天给小郑同学打电话，明天给爸爸妈妈打，后天给奶奶外婆，还有苟哥、俊宏、叔叔、姨妈等等……在外面散步的时候由于深圳沿海，风吹拂在脸上，清凉又舒服，和他们视频的时候有讲不完的话，但每当回到房间里面，关上灯侧躺着准备睡觉的时候，眼角的泪水就开始奔涌不止，不是初来深圳的生活陌生而孤独想哭，而更多的是感动幸福得想哭——妈妈帮我找这边的熟人看有没有深圳工作的可以照顾照顾我；奶奶有天打电话过来说哪个附近有认识的人，你周末可以去那玩玩；姨妈姑姑都对我说一个人在外面工作不要舍不得吃，姨妈还给我还发了个小红包；小郑同学我每天打过去也不会嫌我烦，虽然 ta 学习压力比较大也会聆听我这边的工作生活等等。伴随着泪水的留下，我成长了许多，从小到大由于我喜欢做噩梦，晚上一个人睡觉从来不敢关灯睡觉，一关灯脑子就会充斥着鬼或者很害怕的事情，不过在这边每天晚上都能把灯关了。在这边做需求能很快能完成，Oracle 写查询语句，做接口开发也很熟练了，个人能力得到了一定的认可。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/BeStrongerAndBetter_img/notes.png" alt="好好记账、写写日记"></p><p>  现在工作稳定了，因此开始考虑个人素质能力的提高上，开始规划『未来』，上上周开始每天晚上有规律的进行身体锻炼，上周开始发现自己想学习的东西一直很多，必须找个方法规划好自己的计划让我更好的学习和执行，因此开始学习 GTD（<a href="https://gettingthingsdone.com/">Getting Things Done</a>），然后使用 <a href="https://zh.wikipedia.org/zh-hans/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95">番茄钟</a> 进行工作和学习，想用 <a href="https://www.notion.so/zh-cn">notion</a> 来管理自己的计划和知识（但目前还没学会），工具什么的适合自己的才是做好的。到目前为止可以看出我想做的事情真的很多，脑子有时候一片浆糊，不过当我写下之后，脑子里面确实会舒服很多。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/BeStrongerAndBetter_img/todolist.png" alt="Typora YYDS"></p><p>  梦想是注定孤独的旅行，希望大家都能脚踏实地，仰望星空，成为自己想成为的模样，在最该努力奋斗的日子多为自己或者是后代的命运奋斗一点。</p>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows10 使用心得与总结</title>
    <link href="/2021/05/01/WindowsUsage/"/>
    <url>/2021/05/01/WindowsUsage/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>🙄Windows10 一个玩英雄联盟的系统而已</p>          </div><span id="more"></span><h2 id="🙋‍♂️前言"><a href="#🙋‍♂️前言" class="headerlink" title="🙋‍♂️前言"></a>🙋‍♂️前言</h2><p>Windows10 操作系统基本我们买电脑，初始系统就这个（Mac 除外），电脑是一个工具就和手机一样，使用起来得心应手，效率自然就越高。不知道大家是否用电脑觉得都是越用越卡，越用越不舒服，也不知道为什么就是老卡，其实也不需要用什么大型软件，其实就是我们的使用习惯不是很好。</p><p>我们其实都不自觉的在拿到电脑之后设置成自己喜欢的样子，下面我会分享一些我常用的操作以及一些使用经验，有些地方还是遵从你们自己的使用体验来，并不一定我的就适合你的。</p><h2 id="🔥常用快捷键"><a href="#🔥常用快捷键" class="headerlink" title="🔥常用快捷键"></a>🔥常用快捷键</h2><p>快捷键这块其实比较看使用习惯，以下是我的一些常用快捷键，使用频率基本很高，快捷键很多（大家百度一片），我基本这么点完全够用。</p><ul><li><code>Win+I</code>：打开 Windows 设置，一键呼出它不香吗😏</li><li><code>Win+.</code>：打开 emoji，博客文章表情出处！</li><li><code>Win+V</code>：开启&#x2F;打开剪贴板，Win10 大加强，连复制的图片都有，终于不用蠢萌蠢萌地复制一个粘贴一个</li><li><code>Win+Q</code>：打开 Windows 搜索，最近常用，搜索设置里面的东西很香</li><li><code>Ctrl+A</code>：全选，不要鼠标从头拖到尾了，用到老</li><li><code>Ctrl+C</code>：复制，用到老</li><li><code>Ctrl+V</code>：粘贴，用到老</li><li><code>Ctrl+Z</code>：撤回，用到老</li><li><code>Ctrl+X</code>：剪切，用到老</li><li><code>Ctrl+Shift+Z</code>：恢复，基本可以说是我撤销多了，然后这组快捷键返回去</li><li><code>Ctrl+F</code>：查找，网页可以，word 文档中也可，记事本中也可，基本用来查找文本</li><li><code>Alt+Tab</code>：按住 <code>Alt</code>，继续按 <code>Tab</code> 切换程序，现在基本用鼠标任务栏点击切换了</li><li><code>F2</code>：重命名，点击文件按 <code>F2</code> 即可，比起鼠标右键然后去选快 100 倍！</li><li><code>Esc</code>：退出，某些场景下可用</li><li><code>Alt+F4</code>：关闭当前程序，在桌面按该快捷键可以弹出关机选项</li><li>待补充……</li></ul><h2 id="⚙Windows设置"><a href="#⚙Windows设置" class="headerlink" title="⚙Windows设置"></a>⚙Windows设置</h2><h3 id="🤏更改用户账户控制设置"><a href="#🤏更改用户账户控制设置" class="headerlink" title="🤏更改用户账户控制设置"></a>🤏更改用户账户控制设置</h3><p>有些图标带着盾牌的软件，Windows 出于保护电脑，会需要点一个确认才能继续运行，我安装这个软件显然我就是要用咯，这不就是多余操作吗？！当然对于使用习惯还没那么好的小伙伴还是建议先默认就好了，毕竟有些时候谈一些莫名其妙的或者后台莫名其妙运行软件可以阻止运行。</p><p><code>Win+Q</code>，打开 Windows 搜索，搜索 <code>更改用户账户控制设置</code>，回车进入，拉到最低，打开这类软件就不会需要点确定了。</p><p><img src="https://blog.reajason.top/img//WindowsUsage_img/%E6%9B%B4%E6%94%B9%E7%94%A8%E6%88%B7%E8%B4%A6%E6%88%B7%E6%8E%A7%E5%88%B6%E8%AE%BE%E7%BD%AE.png" alt="更改用户账户控制设置.jpg"></p><h3 id="💻我的电脑-amp-回收站"><a href="#💻我的电脑-amp-回收站" class="headerlink" title="💻我的电脑&amp;回收站"></a>💻我的电脑&amp;回收站</h3><p><code>Win+Q</code>，搜索 <code>主题和相关设置</code>，回车进入，（或者桌面右键选择个性化，然后进入主题），找到相关设置中的桌面图标管理，选择对应选项，即可在桌面显示图标</p><p><img src="https://blog.reajason.top/img//WindowsUsage_img/%E4%B8%BB%E9%A2%98%E5%92%8C%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE.png" alt="主题和相关设置.png"></p><h3 id="💿磁盘管理"><a href="#💿磁盘管理" class="headerlink" title="💿磁盘管理"></a>💿磁盘管理</h3><p><code>Win+Q</code>，搜索 <code>创建并格式化硬盘分区</code>，回车进入，（或者在桌面左下角 Windows 标志处，右键选择磁盘管理），在这里可以看到自己的硬盘个数和分区情况，一般新买的硬盘插入电脑或重装之后需要在此初始化硬盘分区。</p><p><img src="https://blog.reajason.top/img//WindowsUsage_img/win.png"></p><p><img src="https://blog.reajason.top/img//WindowsUsage_img/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86.png" alt="磁盘管理.png"></p><h3 id="📌Win-E-打开我的电脑"><a href="#📌Win-E-打开我的电脑" class="headerlink" title="📌Win+E 打开我的电脑"></a>📌Win+E 打开我的电脑</h3><p>  打开我的电脑，点击上边菜单栏的查看，进入选项，设置打开文件资源管理器时打开此电脑，然后应用，之后使用 <code>Win + E</code> 即可打开我的电脑，个人觉得非常舒适。</p><p><img src="https://blog.reajason.top/img//WindowsUsage_img/win+e.png" alt="win+e.png"></p><h2 id="📁文件管理"><a href="#📁文件管理" class="headerlink" title="📁文件管理"></a>📁文件管理</h2><p>我猜还是有很多小伙伴不太会管理自己的文件，管理磁盘空间吧，文件需要管理也就像我们知识需要管理，你要以最快地速度找到它，那么文件夹以及文件对方就应该更加合理，或者说自己知道它到底在哪，而不是随意安放。 </p><p>我觉得我自己的文件分类也并不是最好的，毕竟有时候自己看着目录也烦，翻得难受，但是总会翻到，毕竟我能放到的只有这里。基本大家盘符比较多，我推荐使用一个你觉得你能把里面的东西全清空的作为你开始文件管理的磁盘（尽量足够大），由于我并没有分盘，所以我有 1T，如果你分盘了，你也可以使用分盘管理，就不同类文件放不同盘符。</p><ul><li>QQ<ul><li>QQData（用来存放 QQ 数据），需要打开 QQ 自行指定</li></ul></li><li>WeChat<ul><li>WeChatData（用来存放微信数据），需要打开微信自行指定</li></ul></li><li>Software（各类软件存放目录）<ul><li>软件安装方式见下节（推荐先为软件在此创建文件夹，然后安装选择创建的文件夹）</li></ul></li><li>ReaJason（以自己用户名取名，存放自己的文件）<ul><li>我的文档</li><li>我的音乐</li><li>我的电影</li><li>我的资源</li><li>我的手机</li><li>我的笔记</li></ul></li><li>Download（下载目录）（基本浏览器，下载器全指向该文件夹）</li></ul><p><img src="https://blog.reajason.top/img//WindowsUsage_img/File_Manage1.png" alt="我的 1T 机械盘"></p><p><img src="https://blog.reajason.top/img//WindowsUsage_img/File_Manage2.png" alt="个人文件目录"></p><p><img src="https://blog.reajason.top/img//WindowsUsage_img/File_Manage3.png" alt="软件目录"></p><h2 id="🌊软件安装与卸载"><a href="#🌊软件安装与卸载" class="headerlink" title="🌊软件安装与卸载"></a>🌊软件安装与卸载</h2><blockquote><p>我建议 360 全家桶和 2345 全家桶一定不要碰，高速下载也一定不要碰！</p></blockquote><h3 id="💡下载地址首选官网"><a href="#💡下载地址首选官网" class="headerlink" title="💡下载地址首选官网"></a>💡下载地址首选官网</h3><ul><li><a href="https://im.qq.com/pcqq/">QQ PC 下载官网</a></li><li><a href="https://pc.weixin.qq.com/">微信 PC 下载官网</a></li><li><a href="https://www.microsoft.com/zh-cn/edge">Microsoft Edge</a></li><li><a href="https://store.steampowered.com/about/">Steam 下载官网</a></li><li><a href="https://www.wegame.com.cn/client">WeGame 下载官网</a></li><li>……</li></ul><h3 id="🔔其次软件分享网站"><a href="#🔔其次软件分享网站" class="headerlink" title="🔔其次软件分享网站"></a>🔔其次软件分享网站</h3><p>这类网站下载的软件大多为修改版或者破解版，其中也有便携版，便携版的意思为解压即可使用，而不需要安装选定安装目录，安装目录即是你解压之后的文件夹</p><p>为什么使用修改版或破解版，原因一，官方版可能存在太多广告，经常性地弹出广告，需要手动关，而且广告很多很辣鸡，就好像那 辣鸡 qq 空间的好友热播，全是那种，见一个就举报低俗，就有些广告很恶心，严重影响使用体验；原因二，修改版可能会添加一点稍微实用的功能，也有些基本傻瓜式配置好了，打开就能用；原因三，官方原版收费，只能破解版。当然对于破解版软件，如自身有条件 <strong>请支持正版</strong>。</p><ul><li><a href="https://www.423down.com/">423Down</a></li><li><a href="https://www.ghpym.com/">果核剥壳</a></li><li><a href="https://www.pilifx.com/">霹雳分享</a></li><li><a href="http://axutongxue.com/">阿虚同学的储物间</a></li><li><a href="http://www.chendandan.ys168.com/">陈蛋蛋的宝藏库</a></li><li><a href="https://www.52pojie.cn/forum-16-1.html">吾爱破解</a></li><li>……</li></ul><h3 id="🎉安装建议"><a href="#🎉安装建议" class="headerlink" title="🎉安装建议"></a>🎉安装建议</h3><ol><li>安装软件前建议为软件创建一个文件夹（尽量使用英语），不知道怎么命名的话，可以打开安装，等需要指定目录的时候，复制它自动创建的文件夹名，然后重新指定到自己的文件夹即可。</li><li>使用自定义安装！即自己指定安装在上面创建的文件夹中。</li><li>尽量不要安装在系统盘（C 盘），因为 C 盘不够大的话，当 C 盘变红（即小于 10G）会严重影响电脑性能。</li><li>便携版的解压下来，把文件夹移到你的软件目录，打开使用即可，上图 我的软件目录带版本号的即是使用的便携版软件</li></ol><h3 id="🎉卸载建议"><a href="#🎉卸载建议" class="headerlink" title="🎉卸载建议"></a>🎉卸载建议</h3><p>推荐使用 <a href="https://geekuninstaller.com/download">geek uninstaller</a>，一款公认比较🐂的卸载工具，非常便携，下载打开即可用（下载左边 free 版即可），使用该款软件卸载的原因是，卸载软件会将关联的文件夹和注册表同时删除掉，最后选择删除文件夹的时候，自己稍加注意一下不是自己重要的文件夹即可。</p><p><img src="https://blog.reajason.top/img//WindowsUsage_img/geek_uninstaller.png" alt="geek_uninstaller.png"></p><h2 id="🎨浏览器调教"><a href="#🎨浏览器调教" class="headerlink" title="🎨浏览器调教"></a>🎨浏览器调教</h2><blockquote><p>以 Windows10 自带的 Microsoft Edge 为例，进行演示</p><p>目前该款以 Chromium 内核的浏览器还不错，推荐使用</p></blockquote><h3 id="🛠浏览器扩展"><a href="#🛠浏览器扩展" class="headerlink" title="🛠浏览器扩展"></a>🛠浏览器扩展</h3><p>绝大多数浏览器基本都配备了扩展插件这个功能，在浏览器右边三个点，扩展，点击进入到扩展管理页面，可以看到自己已安装，也可以 <a href="https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home?hl=zh-CN">搜索</a> 安装扩展插件。</p><p>可以在此处查看浏览器扩展推荐：<a href="https://zhaoolee.gitbooks.io/chrome/content/">编者序 · Chrome 插件英雄榜</a></p><p>我使用的插件列表：</p><ol><li><a href="https://microsoftedge.microsoft.com/addons/detail/adguard-%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E5%99%A8/pdffkfellgipmhklpdmokmckkkfcopbh?hl=zh-CN">AdGuard 广告拦截器 - Microsoft Edge Addons</a>——网页去广告</li><li><a href="https://microsoftedge.microsoft.com/addons/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/idghocbbahafpfhjnfhpbfbmpegphmmp?hl=zh-CN">沙拉查词-聚合词典划词翻译 - Microsoft Edge Addons</a>——网页划词翻译</li><li><a href="https://microsoftedge.microsoft.com/addons/detail/tampermonkey/iikmkjmpaadaobahmlepeloendndfphd?hl=zh-CN">Tampermonkey - Microsoft Edge Addons</a>——搭配 <a href="https://greasyfork.org/zh-CN/scripts">油猴脚本</a>，起飞</li><li>其他很多基本不怎么用……</li></ol><p><img src="https://blog.reajason.top/img//WindowsUsage_img/Microsoft_edge_extension.png" alt="Microsoft_edge_extension.png"></p><h3 id="🏷书签管理"><a href="#🏷书签管理" class="headerlink" title="🏷书签管理"></a>🏷书签管理</h3><p>  书签管理其实和文件管理一样，管理自己浏览过的网页，收藏下来方便下次浏览与使用，建议大家下意识管理自己的书签，遇到自己觉得有用的网站或者最近常用的网站，即收藏到书签栏，或者相应的书签文件夹，就在网页链接的最后有一个 ⭐+ 的标志即为收藏页面，点击之后文件夹选项即是选择保存路径。</p><p><img src="https://blog.reajason.top/img//WindowsUsage_img/Mscrosoft_Edge_favorites.png" alt="Mscrosoft_Edge_favorites.png"></p><h2 id="✨常用小工具"><a href="#✨常用小工具" class="headerlink" title="✨常用小工具"></a>✨常用小工具</h2><ul><li><p>7zip（压缩软件）</p><ul><li>使用方法：选中压缩包文件，右键 7-Zip 选择提取到 “压缩包文件名\“，即可解压到当前目录下</li><li>蓝奏云链接：<a href="https://lingsiki.lanzoui.com/i98Evolf7ah">32 位</a>、<a href="https://lingsiki.lanzoui.com/iXSS2olf7if">64 位</a></li><li>官网地址：<a href="https://www.7-zip.org/">https://www.7-zip.org</a></li></ul><p><img src="https://blog.reajason.top/img//WindowsUsage_img/7-Zip.png" alt="7-Zip.png"></p></li><li><p>PotPlayer（非常强大的播放器，再也不用担心打不开视频文件）</p><ul><li>官网：<a href="https://tv.kakao.com/guide/potplayer">https://tv.kakao.com/guide/potplayer</a> （有点慢，需要 fq）</li><li>蓝奏云链接（官网安装包）：<a href="https://lingsiki.lanzoui.com/i8Cc7osbcqb">32 位</a>、<a href="https://lingsiki.lanzoui.com/i1bhVosbcgb">64 位</a></li><li>果核剥壳：<a href="https://www.ghxi.com/potplayer.html">https://www.ghxi.com/potplayer.html</a></li><li>使用修改版请自行关联所有视频文件，打开软件按 F5 可设置关联，还有许多快捷键操作请自行百度学习</li></ul><p><img src="https://blog.reajason.top/img//WindowsUsage_img/potplayer.png" alt="potplayer.png"></p></li><li><p>屏蔽系统更新</p><ul><li>使用建议：对于配置不是很好的电脑，建议关闭Windows更新，因为更新可能导致电脑蓝屏或者出现开不了机的情况</li><li>蓝奏云链接：<a href="https://lingsiki.lanzoui.com/igJ0oolezuj">https://lingsiki.lanzoui.com/igJ0oolezuj</a></li><li>更新地址：<a href="https://www.sordum.org/9470/windows-update-blocker-v1-6">https://www.sordum.org/9470/windows-update-blocker-v1-6</a></li></ul></li><li><p>关闭Windows安全中心</p><ul><li>使用建议：就一般来言，有些软件比如激活软件会被吞，这让我很难受，由于自己不会去下莫名其妙的地方下载东西，因此电脑也不会担心中病毒，即便发生了，立马下个火绒救救急即可</li><li>蓝奏云链接：<a href="https://lingsiki.lanzoui.com/iWwvPolezfe">https://lingsiki.lanzoui.com/iWwvPolezfe</a></li><li>更新地址：<a href="https://www.sordum.org/9480/defender-control-v1-8">https://www.sordum.org/9480/defender-control-v1-8</a></li></ul></li><li><p>HWIDGen Windows激活（需联网）</p><ul><li>使用体验：这是我用过最舒服的激活器了，推荐数字激活，点一下激活即可，关闭杀毒软件使用。</li><li>蓝奏云链接：<a href="https://lingsiki.lanzoui.com/im8UKoletxg">https://lingsiki.lanzoui.com/im8UKoletxg</a></li><li>果核剥壳汉化版：<a href="https://www.ghxi.com/hwidgen.html">https://www.ghxi.com/hwidgen.html</a></li></ul><p><img src="https://blog.reajason.top/img//WindowsUsage_img/HWID.png" alt="HWIDGen.png"></p></li><li><p>微软运行库</p><ul><li>使用体验：重装系统必备，避免有些软件的运行还需要去安装特定的运行库。</li><li>蓝奏云链接：<a href="https://lingsiki.lanzoui.com/iOrXRoo4ldg">https://lingsiki.lanzoui.com/iOrXRoo4ldg</a></li><li>果核剥壳封装版：<a href="https://www.ghxi.com/yxkhj.html">https://www.ghxi.com/yxkhj.html</a></li></ul></li><li><p>Office 2013-2021 C2R Install</p><ul><li>使用体验：一站式 office 卸载、下载、激活，我感觉比 office tool 还好用，因为傻瓜式，点几下就好了</li><li>蓝奏云链接：<a href="https://lingsiki.lanzoui.com/i0WtRoleoeh">https://lingsiki.lanzoui.com/i0WtRoleoeh</a></li><li>更新地址：<a href="https://free.appnee.com/office-2013-2021-c2r-install">https://free.appnee.com/office-2013-2021-c2r-install</a></li></ul><p><img src="https://blog.reajason.top/img//WindowsUsage_img/office_install.png" alt="office_install.png"></p></li><li><p>Dism++</p><ul><li>使用体验：基本使用的是 C 盘空间清理和工具箱中修改 hosts</li><li>官网地址：<a href="https://www.chuyu.me/zh-Hans">https://www.chuyu.me/zh-Hans</a></li></ul><p><img src="https://blog.reajason.top/img//WindowsUsage_img/dism++.png" alt="dism++.png"></p></li><li><p>TranslucentTB （任务栏透明）</p><ul><li>GitHub仓库地址：<a href="https://github.com/TranslucentTB/TranslucentTB">https://github.com/TranslucentTB/TranslucentTB</a></li><li>Microsoft Store 汉化版：<a href="https://www.microsoft.com/zh-cn/p/translucenttb-%E6%B1%89%E5%8C%96-by-tpxxn/9n5w18jc9bg2?activetab=pivot:overviewtab">translucenttb-汉化-by-tpxxn</a></li></ul><p><img src="https://blog.reajason.top/img//WindowsUsage_img/translucent.png" alt="translucent.png"></p></li><li><p>Snipaste（截图 + 贴图）</p><ul><li>官网地址：<a href="https://zh.snipaste.com/">https://zh.snipaste.com</a></li></ul><p><img src="https://blog.reajason.top/img//WindowsUsage_img/Snipaste.png" alt="Snipaste.png"></p></li><li><p>QQ精简版（刚使用，还可以）</p><ul><li>蓝奏云链接：<a href="https://www.lanzoui.com/b385621">https://www.lanzoui.com/b385621</a> 密码：9527</li><li>Dreamcast 发布地址：<a href="http://dreamcast2.ys168.com/">http://dreamcast2.ys168.com</a></li></ul><p><img src="https://blog.reajason.top/img//WindowsUsage_img/QQ.png" alt="QQ.png"></p></li></ul><blockquote><p>其实要说的挺多的，不过写起来又觉得不知道写啥，欢迎补充和提出相关建议</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Skill</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xposed Hook 完美校园获取本机 DeviceId</title>
    <link href="/2021/04/18/17wanxiaoHookGetDeviceId/"/>
    <url>/2021/04/18/17wanxiaoHookGetDeviceId/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>简单记录一下完美校园 app 逆向 + Hook 获取 deviceId 生成的方法</p>          </div><span id="more"></span><blockquote><p>完美校园自动打卡项目：<a href="https://github.com/ReaJason/17wanxiaoCheckin">https://github.com/ReaJason/17wanxiaoCheckin</a><br>本文使用的所有资源包括成品链接：<a href="https://lingsiki.lanzoui.com/b0eklg2ih">https://lingsiki.lanzoui.com/b0eklg2ih</a> 密码：2333</p></blockquote><h2 id="🤝静态分析"><a href="#🤝静态分析" class="headerlink" title="🤝静态分析"></a>🤝静态分析</h2><h3 id="🔍查壳"><a href="#🔍查壳" class="headerlink" title="🔍查壳"></a>🔍查壳</h3><blockquote><p>查壳工具：<a href="http://www.legendsec.org/1888.html">ApkScan-PKID</a> 查看 app 是否加固（需要 Java 环境）</p></blockquote><p>如果 app 加固的话需要脱壳才能看到源码，没有加固则最好，在豌豆荚下载了完美校园历史版本发现，5.0.2 版本没有加固，而最新的 5.3.6 版本使用了 360 加固，其他版本有阿里和腾讯加固的都有，不知道他们为什么换这么多壳……，因此本文采取的思路是在 5.0.2 版本中找到 deviceId 的获取方法，然后使用 xp hook 绕壳去 hook 5.3.6 版本的相关代码，也很幸运 5.3.6 版本生成 deviceId 的代码虽然修改了位置，但是还是找到了 hook 出来的办法。</p><p><img src="https://blog.reajason.top/img/17WanXiaoHookGetDeviceId_img/5.0.2.png" alt="5.0.2"></p><p><img src="https://blog.reajason.top/img/17WanXiaoHookGetDeviceId_img/5.3.6.png" alt="5.3.6"></p><h3 id="🤔分析源码"><a href="#🤔分析源码" class="headerlink" title="🤔分析源码"></a>🤔分析源码</h3><blockquote><p>源码查看工具：<a href="https://github.com/skylot/jadx">jadx</a><br>把使用方法为打开 bin 目录下的 jadx-gui.bat，然后选择 apk</p></blockquote><ol><li><p>在搜索文本工具中搜索 <code>/loginnew</code>，即可查看有一个匹配值，双击进去，然后右键查看该值 <code>i</code> 的用例，也就是哪里用了这个值，也刚好发现一个 <code>c.i</code>，双击进入即可发现登录报表的所有参数，基本都在这里出现了</p><p><img src="https://blog.reajason.top/img/17WanXiaoHookGetDeviceId_img/loginnew.png" alt="search_loginnew"></p><p><img src="https://blog.reajason.top/img/17WanXiaoHookGetDeviceId_img/loginnew_example.png" alt="find_i"></p><p><img src="https://blog.reajason.top/img/17WanXiaoHookGetDeviceId_img/loginreqdata.png" alt="loginreqdata"></p><p><img src="https://blog.reajason.top/img/17WanXiaoHookGetDeviceId_img/logindata.png" alt="logindata"></p></li><li><p>我们可以看到这个 <code>private String deviceId = AppUtils.f(SystemApplication.e());</code> 这行代码说明了 deviceId 生成的来源，选中 <code>f</code> ，右键跳到声明，即可查看对应源码</p><p><img src="https://blog.reajason.top/img/17WanXiaoHookGetDeviceId_img/deviceid_f.png" alt="deviceId_f"></p><p><img src="https://blog.reajason.top/img/17WanXiaoHookGetDeviceId_img/deviceid_func.png" alt="deviceid_func"></p></li><li><p>可以看到该类有许多的 get 方法，我们可以通过 hook 这些方法，来获取对应值（不过还得看登录方式是否使用了对应值）</p><p><img src="https://blog.reajason.top/img/17WanXiaoHookGetDeviceId_img/hook_point.png" alt="hook_point"></p></li><li><p>使用 jadx 找到 5.3.6 版本 360 加固后的 app 入口</p><p><img src="https://blog.reajason.top/img/17WanXiaoHookGetDeviceId_img/360.png" alt="classloader"></p></li></ol><h2 id="🪂Xp-Hook"><a href="#🪂Xp-Hook" class="headerlink" title="🪂Xp Hook"></a>🪂Xp Hook</h2><blockquote><p>环境搭建以及入门：<a href="https://www.52pojie.cn/forum.php?mod=viewthread&tid=1315865&highlight=frida+hook"> [超级详细]Frida Hook和Xposed Hook 再搞Crackme</a><br>网上 Xp Hook 的教程还是有一点点可以学习的，可自行搜索学习相应知识</p></blockquote><ol><li><p>新建项目，打开左侧资源管理设置为 Project，将 api-82 的两个文件放到 app&#x2F;libs 下</p></li><li><p>在 app&#x2F;bulid.gradle 下面的 dependencies 中加入以下代码，然后点击右上角的 Sync</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">compileOnly &#x27;de.robv.android.xposed:api:82&#x27;<br>compileOnly &#x27;de.robv.android.xposed:api:82:sources&#x27;<br></code></pre></td></tr></table></figure><p><img src="https://blog.reajason.top/img/17WanXiaoHookGetDeviceId_img/xphook_set1.png" alt="xphook_set1"></p></li><li><p>在 AndroidManifest.xml 中加入一下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;xposedmodule&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;xposeddescription&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;hook 5.3.6 版本完美校园登录参数，包括 deviceId&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;xposedminversion&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;54&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://blog.reajason.top/img/17WanXiaoHookGetDeviceId_img/xphook_set2.png" alt="xphook_set2"></p></li><li><p>在 main 文件下创建 assets 文件夹，在其下创建 xposed_init 文件，文件中写 xposed 的入口即 <code>com.wanxiao.xp_hook.MainHook</code>（包名 + 类名）</p><p><img src="https://blog.reajason.top/img/17WanXiaoHookGetDeviceId_img/xphook_set3.png" alt="xphook_set3"></p></li><li><p>在 MainActivity 同级目录下创建 MainHook 的 Java class 文件</p></li><li><p>编写 Hook 代码，当前代码为 Hook 5.3.6 版本的代码，因为需要绕过 360 加固 Hook</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Hook 完美校园</span><br><span class="hljs-keyword">if</span> (!loadPackageParam.packageName.equals(<span class="hljs-string">&quot;com.newcapec.mobile.ncp&quot;</span>)) &#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br>XposedBridge.log(<span class="hljs-string">&quot;已 HOOK 到完美校园&quot;</span>);<br><br><span class="hljs-comment">// Hook 360加固</span><br>findAndHookMethod(<span class="hljs-string">&quot;com.stub.StubApp&quot;</span>, <br>                  loadPackageParam.classLoader,<br>                  <span class="hljs-string">&quot;attachBaseContext&quot;</span>, <br>                  Context.class, <br>                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>                      <span class="hljs-meta">@Override</span><br>                      <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                          <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>                          <span class="hljs-comment">//获取到Context对象，通过这个对象来获取classloader</span><br>                          <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (Context) param.args[<span class="hljs-number">0</span>];<br>                          <span class="hljs-comment">//获取classloader，之后hook加固后的就使用这个classloader</span><br>                          <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> context.getClassLoader();<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getAppCode&quot;</span>, <span class="hljs-string">&quot;appCode: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getDeviceId&quot;</span>, <span class="hljs-string">&quot;deviceId: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getNetWork&quot;</span>, <span class="hljs-string">&quot;netWork: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getPassword&quot;</span>, <span class="hljs-string">&quot;password: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getQudao&quot;</span>, <span class="hljs-string">&quot;qudao: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getRequestMethod&quot;</span>, <span class="hljs-string">&quot;requestMethod: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getSms&quot;</span>, <span class="hljs-string">&quot;sms: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getShebeixinghao&quot;</span>, <span class="hljs-string">&quot;shebeixinghao: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getSystemType&quot;</span>, <span class="hljs-string">&quot;systemType: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getTelephoneInfo&quot;</span>, <span class="hljs-string">&quot;telephoneInfo: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getTelephoneModel&quot;</span>, <span class="hljs-string">&quot;telephoneModel: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getToken&quot;</span>, <span class="hljs-string">&quot;token: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getType&quot;</span>, <span class="hljs-string">&quot;type: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getUnionid&quot;</span>, <span class="hljs-string">&quot;unionid: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getUserId&quot;</span>, <span class="hljs-string">&quot;userId: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getUserName&quot;</span>, <span class="hljs-string">&quot;userName: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getWanxiaoVersion&quot;</span>, <span class="hljs-string">&quot;wanxiaoVersion: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getYunyingshang&quot;</span>, <span class="hljs-string">&quot;yunyingshang: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;toJsonString&quot;</span>, <span class="hljs-string">&quot;当前登录方式请求参数: &quot;</span>);<br>                      &#125;<br>                  &#125;);<br><br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hook_param</span><span class="hljs-params">(ClassLoader classLoader, String methodName, String resultName)</span>&#123;<br>    findAndHookMethod(<br>        <span class="hljs-string">&quot;com.wanxiao.rest.entities.login.LoginReqData&quot;</span>, classLoader, methodName,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> resultName + param.getResult();<br>                XposedBridge.log(msg);<br>                Log.i(<span class="hljs-string">&quot;[ 17wanxiaoHook ]&quot;</span>, msg);<br>            &#125;<br>        &#125;<br>    );<br><br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>结果展示</p><p><img src="https://blog.reajason.top/img/17WanXiaoHookGetDeviceId_img/result.jpg" alt="result"></p></li></ol><h2 id="❄总结"><a href="#❄总结" class="headerlink" title="❄总结"></a>❄总结</h2><p>安卓逆向这方面我只是个小小新手，Xp Hook 真的很牛皮，更强大的功能目前还用不上，Frida Hook 测试只能 Hook 5.0.2 版本，5.3.6 版本死活显示多进程，Frida Hook 不到，有机会接触这方面的再继续学习，目前也就这样了。</p><blockquote><p>本文仅供交流学习，请勿用于违法用途</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
      <tag>Xposed</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的刷机之旅 — Redmi K20 Pro</title>
    <link href="/2021/04/12/AndroidFlashRom/"/>
    <url>/2021/04/12/AndroidFlashRom/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>🎉玩机党的快乐！</p>          </div><span id="more"></span><h2 id="🙋‍♂️前言"><a href="#🙋‍♂️前言" class="headerlink" title="🙋‍♂️前言"></a>🙋‍♂️前言</h2><p>大二开始接触手机上的各种破解软件，在类似葫芦侠，各种瞎几把论坛瞎逛找一些好玩的软件或者美化操作，当时拿着荣耀畅玩 5A 、OPPO R9，软件安装限制很大。一个偶然的机会，下载了 <a href="https://coolapk.com/">酷安</a>，接触到了 ROOT 和 Xposed 模块，并产生了非常浓厚的兴趣（因为可玩性实在是太高了），后来（大三）买了一个 Redmi Note 7 Pro 开始了我的刷机之路（选择红米的手机是因为小米手机官方有解锁工具，类原生适配非常多，红米手机又便宜，学生党只能这个样子了），加群以及在酷安学习了很久之后，写了一个 <a href="https://mp.weixin.qq.com/s/aFvXRVqvBMkPgy3rnaQrFA">刷机教程</a>，而如今（大四）手持 Redmi K20 Pro 基本养老了，不过 <a href="https://github.com/topjohnwu/Magisk">Magisk</a> 和 <a href="https://github.com/LSPosed/LSPosed">Lsposed</a>（后来兴起的用来代替 <a href="https://github.com/ElderDrivers/EdXposed">EdXposed</a>）也还是必装，毕竟 <a href="https://github.com/yc9559/uperf/releases">yc 调度模块 </a>（省电优化）和 <a href="https://forum.xda-developers.com/t/xposed-edge-pro.3525566/">Xposed Edge Pro</a>（自动化以及手势增强）等等是真的香喷喷。</p><p>MIUI12.5 发布了这么久，有些地方优化还是没做好，可能还需要一段时间吧，现在小米疯狂出新手机，对于我这个手机估计离停更也不远了，大家应该都听过类原生流畅丝滑之类的，但是其功能就没有 MIUI 这么多了，因此要用得习惯对于我来说还是很难得，不过对于玩机党来说有时候，在类原生和 MIUI 中间反复横跳是常有的事情，今天有时间就再更新一下之前的刷机教程（适用于所有小米手机，套路都一样），再来演示一波类原生刷机教程以及刷面具。</p><h2 id="💡XDA-论坛"><a href="#💡XDA-论坛" class="headerlink" title="💡XDA 论坛"></a>💡XDA 论坛</h2><blockquote><p>XDA 论坛官网：<a href="https://forum.xda-developers.com/">https://forum.xda-developers.com/</a><br>Redmi K20 Pro ：<a href="https://forum.xda-developers.com/c/redmi-k20-pro-xiaomi-mi-9t-pro.8953/">https://forum.xda-developers.com/c/redmi-k20-pro-xiaomi-mi-9t-pro.8953/</a><br>其他机型自行在论坛官网的右上角搜索即可，加载有点慢，毕竟是国外的网站</p></blockquote><blockquote><p>Tips：刷机资源绝大多数都以手机代号来命名，所以需要先知道自己的手机代号。小米手机可以在 <a href="https://miuiver.com/xiaomi-device-codename/">【小米手机代号名称查询】</a> 查找，例如 Redmi K20 Pro 的手机代号为 raphael</p></blockquote><p>我觉得这个 XDA 是国外玩机党的 HOME，基本类原生全都发布在这里，每个手机板块下都有一个叫 ***ROMs, Kernels, Re，在这个下面就可以找到类原生系统的发布地址，和简单的刷入操作介绍，对于我们来说刷之前可以先去酷安对应手机板块下逛逛，看刷哪个比较好，看别人的刷入体验有哪些特别要注意的地方。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/Redmi_K20_Pro_XDA.png" alt="Redmi_K20_Pro_XDA.png"></p><h2 id="🔓解-BL-锁"><a href="#🔓解-BL-锁" class="headerlink" title="🔓解 BL 锁"></a>🔓解 BL 锁</h2><blockquote><p>解锁小米手机官网：<a href="http://www.miui.com/unlock/index.html">http://www.miui.com/unlock/index.html</a><br>官方解锁工具：<a href="http://miuirom.xiaomi.com/rom/u1106245679/5.5.224.55/miflash_unlock-5.5.224.55.zip">miflash_unlock</a></p></blockquote><blockquote><p>Tips:小米解锁手机需要设备和账号绑定一周后才给予解锁服务的，可能可以秒解，解锁是会清除手机所有数据的，所以请务必备份手机的重要数据，等待期间可以学习学习刷机教程</p></blockquote><ol><li>打开开发者选项<ul><li>进入设置－我的设备－全部参数－MIUI版本－疯狂点几下开启开发者模式</li></ul></li><li>绑定账号与设备<ul><li>进入设置－更多设置－开发者选项－设备解锁状态－绑定账号和设备</li></ul></li><li>打开解锁工具，登录小米账号，并检测设备是否可解锁，如果可则解锁，不可则慢慢等待相应时间</li><li>手机进入 fastboot 模式（即官方教程给出的 Bootloader 模式）（不一定要关机，同时按住开机键和音量下键，一直按着即可进入），手机用数据线连接电脑</li><li>点击解锁（会清除所有设备数据，注意备份重要数据）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/unlock_success.png" alt="unlock_success.png"></p><h2 id="⚙刷入-TWRP"><a href="#⚙刷入-TWRP" class="headerlink" title="⚙刷入 TWRP"></a>⚙刷入 TWRP</h2><blockquote><p>TWRP 官网：<a href="https://twrp.me/Devices/">https://twrp.me/Devices/</a><br>Redmi K20 Pro：<a href="https://twrp.me/xiaomi/xiaomimi9tpro.html">https://twrp.me/xiaomi/xiaomimi9tpro.html</a><br>OrangeFox：<a href="https://archive.orangefox.download/OrangeFox-Stable/">https://archive.orangefox.download/OrangeFox-Stable/</a></p></blockquote><ol><li><p>获取 TWRP</p><ul><li>在上方的 TWRP 官网中，找到自己的设备页面，在 Download Links 下选择 Primary (Americas)，即可找到最新的 TWRP 镜像文件，因为镜像站点在国外下载可能过慢，下方评论回复有时间可帮下。Redmi K20 Pro twrp-3.5.2_9-0-raphael.img：<a href="https://lingsiki.lanzoui.com/izQJIo1bxwb">蓝奏云</a></li><li>可在酷安手机板块搜索下载，应该是有人搬运的，或者去刷机群找找</li></ul></li><li><p>获取 ADB</p><ul><li>给出下面两个版本的 adb，Android版本低的建议 32 版本，我使用 41 版本，有时候 adb 无法连接手机或者 TWRP 刷不进去可能是 adb 版本的问题，换一个有可能可以解决</li><li><a href="https://lingsiki.lanzoui.com/iz9Bao1c0na">adb version 1.0.32.zip</a></li><li><a href="https://lingsiki.lanzoui.com/iy8HBo1c0mj">adb version 1.0.41.zip</a></li></ul></li><li><p>连接手机</p><ul><li>手机进入 fastboot 模式（因为界面有个兔子也称兔子模式）（不一定要关机，直接同时按住开机键和音量下键，一直按着即可进入）</li><li>手机数据线连接电脑</li></ul></li><li><p>使用命令刷入 TWRP</p><ul><li>解压 ADB 压缩包，在资源管理器的地址栏输入 cmd，回车即可在当前目录打开命令行</li><li>输入 <code>fastboot devices -l</code> 查看是否已连接上</li><li>输入 <code>fastboot flash recovery 将 img 文件拖入此处</code>，刷入 TWRP</li><li>显示 Finished 即完成，在 fastboot 模式下，同时按住开机键和音量上键，一直按着直到手机震动一下松手即可进入 TWRP 界面</li><li>官方 TWRP 版本进入会有一个界面选择是否系统分区只读，select language 选择中文，下次不再提醒，滑动修改</li></ul><p>该方式是通用的刷入第三方 REC 的方法，那种什么一键刷入的也就用这个命令，因此你也可以以这种方式刷入其他第三方 REC，例如上方给出的 OrangeFox（橙狐），下载对应手机代号最新的压缩包，解压就可以看见 img 镜像文件，也可以在 TWRP 中直接刷入下载下来的 zip 包，重启 TWRP ，REC 就变成了 OrangeFox（橙狐），如果由于某种误操作导致 TWRP 掉了，再以该方式刷入就行了</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/open_cmd.png" alt="open_cmd.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/fastboot_rec.png" alt="fastboot_rec.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/TWRP_first.jpg" alt="TWRP_first.jpg"></p><h2 id="🎨卡刷-ROM"><a href="#🎨卡刷-ROM" class="headerlink" title="🎨卡刷 ROM"></a>🎨卡刷 ROM</h2><blockquote><p>卡刷其实就是在 TWRP（第三方 REC） 里面将 zip 包刷入手机，这里以 <a href="https://sourceforge.net/projects/evolution-x/files/raphael/EvolutionX_5.6_raphael-11-20210413-0411-OFFICIAL.zip/download">EvolutionX_5.6_raphael-11-20210413</a> 为例安装类原生，所需要的固件包版本为 <a href="https://downloads.akhilnarang.dev/MIUI/raphael/RAPHAEL-V12.0.6.0.QFKCNXM-10.0-vendor-firmware.zip">RAPHAEL-V12.0.6.0</a>，Redmi K20 Pro TWRP 目前无法自动解密，为防止 TWRP 乱码，可刷入 <a href="https://lingsiki.lanzoui.com/iLHEeo1l08j">强制解密补丁</a> （不知道其他手机是否可用）</p></blockquote><ol><li>电脑端下载指定版本固件包、类原生包、强制解密补丁</li><li>手机进入 TWRP，数据线连接电脑，电脑打开手机存储将包全部移到手机内部存储的 TWRP 文件夹</li><li>点击 TWRP 主界面的安装，找到 TWRP 文件夹并选择固件包，滑动刷入，安装完成之后以相同方式刷入类原生包和强制解密补丁</li><li>点击 TWRP 主界面的清楚，格式化 DATA，yes，重启系统</li><li>升级系统<ul><li>先直接下载新版本的完整包</li><li>进入 TWRP 刷入顺序为：完整包 - Magisk 卡刷包（可选） - 强制解密补丁 - 重启系统</li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/flash_rom.jpg" alt="flash_rom.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/format_data.jpg" alt="format_data.jpg"></p><h2 id="🎭安装-Magisk"><a href="#🎭安装-Magisk" class="headerlink" title="🎭安装 Magisk"></a>🎭安装 Magisk</h2><blockquote><p>Magisk GitHub：<a href="https://github.com/topjohnwu/Magisk">https://github.com/topjohnwu/Magisk</a></p></blockquote><blockquote><p>Tips:Magisk 以前分发的都是卡刷包，刷完桌面就会有 Magisk 管理器，但是 Magisk 在 <a href="https://github.com/topjohnwu/Magisk/releases/tag/v22.0">22.0</a> 版本之后就没有分发卡刷 zip 包了，只有一个 apk 文件，但是将 apk 文件后缀名改为 zip 即可变成卡刷包。Magisk 在升级系统和刷入内核的时候都会掉，此时只要刷完系统包或者内核之后再刷入 Magisk 的卡刷包即可</p></blockquote><ol><li>下载 <a href="https://github.com/topjohnwu/Magisk/releases">Magisk.apk</a> 并安装，然后在文件管理将其改为 .zip 格式</li><li>同时按住开机键和音量上键，进入 TWRP，安装 - 选择 Magisk.zip - 刷入 - 重启</li><li>打开 Magisk app 即可显示安装的版本</li><li>卸载的话就下载 <a href="https://github.com/topjohnwu/Magisk/releases/download/v21.4/Magisk-uninstaller-20210117.zip">Magisk-uninstall.zip</a> 在 TWRP 刷入即可卸载</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/magisk.jpg" alt="magisk.jpg"></p><h2 id="✨安装-Lsposed"><a href="#✨安装-Lsposed" class="headerlink" title="✨安装 Lsposed"></a>✨安装 Lsposed</h2><blockquote><p>Lsposed：<a href="https://github.com/LSPosed/LSPosed">https://github.com/LSPosed/LSPosed</a><br>EdXposed：<a href="https://github.com/ElderDrivers/EdXposed">https://github.com/ElderDrivers/EdXposed</a></p></blockquote><ol><li>在 Magisk app 中先安装 Riru 后安装 Riru-LSPosed 重启即可</li><li>重启后，打开 LSPosed app 即可查看 LSPosed 是否安装成功</li><li>可以在仓库中安装 xp 模块，然后在模块中启用，并勾选作用域（即该 xp 模块 需要对谁起作用）</li><li>如果作用的是单个 app 开启模块后重启 app 即可生效，如果作用域为系统框架那么需要重启生效</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/lsp.jpg" alt="lsp.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/xp_module.jpg" alt="xp_module.jpg"></p><h2 id="☂线刷救砖"><a href="#☂线刷救砖" class="headerlink" title="☂线刷救砖"></a>☂线刷救砖</h2><blockquote><p>对于刚开始玩刷机的朋友，可能会操作不当会遇到手机突然无法开机，或者等等情况<br>只要同时按住开机键和音量下键能够进入 fastboot 模式，那么你就可以通过线刷的方式开机</p></blockquote><blockquote><p>小米官方线刷教程：<a href="http://www.miui.com/shuaji-393.html">http://www.miui.com/shuaji-393.html</a><br>小米官方通用刷机工具：<a href="http://bigota.d.miui.com/tools/MiFlash2018-5-28-0.zip">http://bigota.d.miui.com/tools/MiFlash2018-5-28-0.zip</a></p></blockquote><blockquote><p>Tips:各机型线刷包也是在该链接下载，线刷包是以 tar 格式结尾的包，卡刷包是以 zip 格式结尾的，我当时拿卡刷包去线刷，线刷工具说找不到脚本，折腾半天找不到解决办法，所以这里特别提醒！</p></blockquote><ol><li>下载本机型的线刷包解压，我用 7zip 要解压两次，解压之后文件夹有许多 .bat .sh 文件，下载通用刷机工具解压</li><li>打开在刷机工具文件夹中 XiaoMiFlash.exe，安装驱动</li><li>手机进入 fastboot 模式（不一定要关机，同时按住开机键和音量下键，一直按着即可进入），用数据线连接电脑</li><li>点击加载设备，下面即会显示一行东西意味着手机已连接</li><li>点击选择，选择解压之后的线刷包</li><li>在右下角有三种模式，一般使用第一个全部删除就可以，最后一个全部删除并 lock 即是回锁，等什么时候你不再刷机了，可以以这种方式回锁设备</li><li>用时可能需要一点点时间，如果报错，请自行百度或求助于各大论坛学习解决</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/usb_flash.png" alt="usb_flash.png"></p><blockquote><p>以上完，如有错误，恳请指正，仅记录一下自己刷机的过程，大家想玩就玩，刷机需谨慎，变砖两行泪</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
      <tag>Skill</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>完美校园自动打卡</title>
    <link href="/2021/03/19/17wanxiaoCheckInSCF/"/>
    <url>/2021/03/19/17wanxiaoCheckInSCF/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>今天你打卡了吗？</p>          </div><span id="more"></span><blockquote><p>项目地址：<a href="https://github.com/ReaJason/17wanxiaoCheckin">https://github.com/ReaJason/17wanxiaoCheckin</a></p></blockquote><h2 id="🌈使用方法"><a href="#🌈使用方法" class="headerlink" title="🌈使用方法"></a>🌈使用方法</h2><h3 id="1、新建云函数"><a href="#1、新建云函数" class="headerlink" title="1、新建云函数"></a>1、新建云函数</h3><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17wanxiaoCheckInSCF/%E6%90%9C%E7%B4%A2%E4%BA%91%E5%87%BD%E6%95%B0.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17wanxiaoCheckInSCF/%E6%96%B0%E5%BB%BA%E4%BA%91%E5%87%BD%E6%95%B01.png"></p><h3 id="2、上传-SCF-包"><a href="#2、上传-SCF-包" class="headerlink" title="2、上传 SCF 包"></a>2、上传 SCF 包</h3><p>本地上传 zip 包（17wanxiaoCheckin-SCF v*.*.zip：<a href="https://lingsiki.lanzoui.com/b0ekhmcxe">蓝奏云</a>，密码：2333）</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17wanxiaoCheckInSCF/%E6%96%B0%E5%BB%BA%E4%BA%91%E5%87%BD%E6%95%B02.png"></p><h3 id="3、触发器配置"><a href="#3、触发器配置" class="headerlink" title="3、触发器配置"></a>3、触发器配置</h3><p>自定义创建 — 触发周期：自定义触发 — Cron 表达式：0 0 6,14 * * * * — 完成 — 立即跳转</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17wanxiaoCheckInSCF/%E8%AE%BE%E7%BD%AE%E8%A7%A6%E5%8F%91%E5%99%A8.png"></p><h3 id="4、超时设置"><a href="#4、超时设置" class="headerlink" title="4、超时设置"></a>4、超时设置</h3><p>函数管理 — 函数配置 — 编辑 — 执行超时时间：900 — 保存</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17wanxiaoCheckInSCF/%E7%BC%96%E8%BE%91%E4%BA%91%E5%87%BD%E6%95%B0.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17wanxiaoCheckInSCF/%E7%BC%96%E8%BE%91%E4%BA%91%E5%87%BD%E6%95%B02.png"></p><h3 id="5、配置文件"><a href="#5、配置文件" class="headerlink" title="5、配置文件"></a>5、配置文件</h3><ul><li><p>整个 json 文件使用一个 <code>[]</code> 列表用来存储打卡用户数据，每一个用户占据了一个 <code>&#123;&#125;</code>键值对，初次修改务必填写的数据为：<code>phone</code>、<code>password</code>、<code>device_id</code>（获取方法：<a href="https://lingsiki.lanzoui.com/iQamDmt165i">蓝奏云</a>，下载解压使用）、健康打卡的开关（根据截图判断自己属于哪一类<a href="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17wanxiaoCheckInSCF/one.png">【1】</a>、<a href="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17wanxiaoCheckInSCF/two.png">【2】</a>），校内打卡开关（有则开），推送设置 <code>push</code>。</p></li><li><p>关于 <code>post_json</code>，如若打卡推送数据中无错误，则不用管，若有 null，或其他获取不到的情况，则酌情修改即可，和推送是一一对应的。</p></li><li><p>如果多人打卡，则复制单个用户完整的 <code>&#123;&#125;</code>，紧接在上个用户其后即可。</p></li><li><p>【第一次使用推荐 QQ 邮箱推送，数据推送全面】</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17wanxiaoCheckInSCF/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99.png"></p><h3 id="6、测试部署"><a href="#6、测试部署" class="headerlink" title="6、测试部署"></a>6、测试部署</h3><p>若弹框【检测到您的函数未部署……】选是 — 查看执行日志以及推送信息（执行失败请带上执行日志完整截图反馈）</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17wanxiaoCheckInSCF/%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81.png"></p><h3 id="7、检测成功"><a href="#7、检测成功" class="headerlink" title="7、检测成功"></a>7、检测成功</h3><ul><li>第一类健康打卡成功结果：<code>&#123;&#39;msg&#39;: &#39;成功&#39;, &#39;code&#39;: &#39;10000&#39;, &#39;data&#39;: 1&#125;</code>，显示打卡频繁也算</li><li>第二类健康打卡成功结果：<code>&#123;&#39;code&#39;: 0, &#39;msg&#39;: &#39;成功&#39;&#125;</code></li><li>校内打卡成功结果：<code>&#123;&#39;msg&#39;: &#39;成功&#39;, &#39;code&#39;: &#39;10000&#39;, &#39;data&#39;: 1&#125;</code></li><li>仔细查看打卡的数据，如果有值为 null 的，可能是因为打卡数据无法自动填写，请在配置文件中添加该项的赋值</li><li>由于前面使用软件获取了 device_id，所以请使用支付宝小程序查看打卡结果是否记录上去，以免手机登录使用的 device_id 失效</li></ul><h3 id="8、表格数据-None"><a href="#8、表格数据-None" class="headerlink" title="8、表格数据 None"></a>8、表格数据 None</h3><ul><li>找到并记住自己值为 None 的选项，并记住此 propertyname，我们需要修改 value 为我们所填写的信息，有多少就修改多少</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17wanxiaoCheckInSCF/%E6%9F%A5%E7%9C%8B%E8%A1%A8%E6%A0%BC.png"></p><ul><li>打开第一行推送数据，找到与之对应的推送数据</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17wanxiaoCheckInSCF/%E6%9F%A5%E7%9C%8B%E6%8E%A8%E9%80%81.png"></p><ul><li>在第二行中查找推送数据，propertyname 下的 checkValue 为我们所能填写的值</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17wanxiaoCheckInSCF/%E8%8E%B7%E5%8F%96%E5%80%BC.png"></p><ul><li>最后修改配置文件，第一类健康打卡则在 one_check 下的 post_json 下修改，校内即校内下面的</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17wanxiaoCheckInSCF/%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE.png"></p><h2 id="📜FQA"><a href="#📜FQA" class="headerlink" title="📜FQA"></a>📜FQA</h2><ul><li>如果有问题，这边请 <a href="https://github.com/ReaJason/17wanxiaoCheckin#fqa">GitHub</a>，或进群反馈 <a href="https://github.com/ReaJason/17wanxiaoCheckin-Actions/issues/30">交流群</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Script</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微博超话签到工具</title>
    <link href="/2021/02/04/WBTopicCheckTool/"/>
    <url>/2021/02/04/WBTopicCheckTool/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>本工具接口全来自微博网页版，仅作封装和打包实现</p>          </div><span id="more"></span><div class="note note-success">            <p>项目地址：<a href="https://github.com/ReaJason/WBTopicCheckTool">https://github.com/ReaJason/WBTopicCheckTool</a></p>          </div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于之前的很多接口作废了，暂时也不想花时间在这上面了，之前也挖了点坑，这个写出来算是给之前 <a href="https://github.com/ReaJason/WeiBo_SuperTopics">WeiBo_SuperTopics</a> 一个交代，简单的用 PyQt5 封装了微博网页版的扫码登陆以及签到请求，想要学习的小伙伴可以下载源码进行学习。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ol><li>Windows 10</li><li>Python 3.7.9</li><li>requests&#x3D;&#x3D;2.25.1，PyQt5&#x3D;&#x3D;5.15.1</li></ol><h2 id="界面截图"><a href="#界面截图" class="headerlink" title="界面截图"></a>界面截图</h2><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WBTopicCheckTool_img/home.png" alt="home"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WBTopicCheckTool_img/scan_login.png" alt="scan_login"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WBTopicCheckTool_img/login_success.png" alt="login_success"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WBTopicCheckTool_img/check_in.png" alt="check_in.png"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>下载源码之后，先安装第三方库<code>pip install -r requirements.txt</code>，再使用 <code>python start.py</code>启动程序</li><li>程序打包命令，<code>pyinstaller -F -w -i ./res/favicon.ico start.py</code>，然后将<code>res</code>目录复制到 <code>dist</code>目录</li><li>扫码登录成功之后会自动获取超话列表，获取失败，刷新超话重新获取即可</li><li>超话数量越多，签到间隔建议设置大一点，以防请求异常</li><li>若无法使用本程序，请检查自己账号是否异常，不要拿异常账号反馈</li><li>本程序只供参考学习，请勿用于违法用途</li><li>使用本程序导致微博账号异常或冻结甚至封禁都与作者无关</li><li>凡以任何方式下载使用本程序者，视为自愿接受本声明约束。</li></ol><h2 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h2><p>​     <a href="https://lingsiki.lanzoui.com/b0eke1lof">https://lingsiki.lanzoui.com/b0eke1lof</a> 密码: 3d8a</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyQt5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python语法学习</title>
    <link href="/2021/01/19/PythonLearning/"/>
    <url>/2021/01/19/PythonLearning/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Python 脚本小子的自我养成，还远远不够！</p>          </div> <span id="more"></span><h2 id="学习环境"><a href="#学习环境" class="headerlink" title="学习环境"></a>学习环境</h2><ol><li><a href="https://www.python.org/downloads/release/python-379/">Python 3.7.9</a></li><li><a href="https://www.jetbrains.com/pycharm/download/other.html">PyCharm Professional Edition 2020.3.2</a></li><li><a href="https://www.ghpym.com/ideapatch.html">JetBrains 2020.3 通杀补丁（学习用，有能力请支持正版）</a></li><li><a href="https://www.bilibili.com/video/BV1Mz4y1C7LV"> 黑马程序员 python 5.0</a></li></ol><h2 id="Python-基础语法"><a href="#Python-基础语法" class="headerlink" title="Python 基础语法"></a>Python 基础语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 单行注释</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">多行注释1</span><br><span class="hljs-string">多行注释2</span><br><span class="hljs-string">多行注释3</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">多行注释1</span><br><span class="hljs-string">多行注释2</span><br><span class="hljs-string">多行注释3</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>可改变的量为变量，指向内存的一块空间，当不使用时即会被回收</li><li>变量名只能由数字、字母和下划线组成，不能用关键字，不能数字开头，建议不要用中文</li><li>变量名尽量见名知意</li><li>Python 中常量，一般通过全部大写字母来约定俗成</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询关键字</span><br><span class="hljs-keyword">import</span> keyword<br><span class="hljs-built_in">print</span>(keyword.kwlist)<br><br><span class="hljs-comment"># 变量的交换</span><br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">19</span><br>a, b = b, a<br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 19</span><br><span class="hljs-built_in">print</span>(b)  <span class="hljs-comment"># 10</span><br></code></pre></td></tr></table></figure><h3 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h3><ul><li>True：除了 False 都是 True</li><li>False：0、0.0、0j、’’、[]、()、set()、{}、None</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># bool()，强制将其他类型转为bool</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">10</span>))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">0</span>))  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">0.0</span>))  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-string">&#x27;0&#x27;</span>))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-string">&#x27;&#x27;</span>))  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(&#123;&#125;))  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>([]))  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-built_in">set</span>()))  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">0j</span>))  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-literal">None</span>))  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><ul><li>int 整型，二进制，八进制，十进制，十六进制</li><li>float 浮点型，小数</li><li>conplex 复数，实部+虚部</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># type()，获取变量的类型</span><br><span class="hljs-comment"># id()，获取变量内存地址</span><br><br>a = <span class="hljs-number">0b11</span><br><span class="hljs-built_in">print</span>(a, <span class="hljs-built_in">type</span>(a))  <span class="hljs-comment"># 3 &lt;class &#x27;int&#x27;&gt;</span><br>b = <span class="hljs-number">0o11</span><br><span class="hljs-built_in">print</span>(b, <span class="hljs-built_in">type</span>(b))  <span class="hljs-comment"># 9 &lt;class &#x27;int&#x27;&gt;</span><br>c = <span class="hljs-number">0x11</span><br><span class="hljs-built_in">print</span>(c, <span class="hljs-built_in">type</span>(c))  <span class="hljs-comment"># 17 &lt;class &#x27;int&#x27;&gt;</span><br>d = <span class="hljs-number">1.1</span><br><span class="hljs-built_in">print</span>(d, <span class="hljs-built_in">type</span>(d))  <span class="hljs-comment"># 1.1 &lt;class &#x27;float&#x27;&gt;</span><br>e = <span class="hljs-number">2e2</span><br><span class="hljs-built_in">print</span>(e, <span class="hljs-built_in">type</span>(e))  <span class="hljs-comment"># 200.0 &lt;class &#x27;float&#x27;&gt;</span><br>f = <span class="hljs-number">1</span> + <span class="hljs-number">2j</span><br><span class="hljs-built_in">print</span>(f, <span class="hljs-built_in">type</span>(f))  <span class="hljs-comment"># (1+2j) &lt;class &#x27;complex&#x27;&gt;</span><br>g = <span class="hljs-built_in">complex</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(g, <span class="hljs-built_in">type</span>(g))  <span class="hljs-comment"># (2+3j) &lt;class &#x27;complex&#x27;&gt;</span><br>h = <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(h, <span class="hljs-built_in">type</span>(h))  <span class="hljs-comment"># True &lt;class &#x27;bool&#x27;&gt;</span><br>i = <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(i, <span class="hljs-built_in">type</span>(i))  <span class="hljs-comment"># False &lt;class &#x27;bool&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># int()，强制将int、float、bool、纯数字字符串转为int</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>))  <span class="hljs-comment"># 10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-number">10.66</span>))  <span class="hljs-comment"># 10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-literal">True</span>))  <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-literal">False</span>))  <span class="hljs-comment"># 0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;12345678&#x27;</span>))  <span class="hljs-comment"># 12345678</span><br><br><span class="hljs-comment"># float()，强制将int、float、bool、纯数字字符串转为float</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(<span class="hljs-number">10</span>))  <span class="hljs-comment"># 10.0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(<span class="hljs-number">10.66</span>))  <span class="hljs-comment"># 10.66</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(<span class="hljs-literal">True</span>))  <span class="hljs-comment"># 1.0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(<span class="hljs-literal">False</span>))  <span class="hljs-comment"># 0.0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;12345678&#x27;</span>))  <span class="hljs-comment"># 12345678.0</span><br><br><span class="hljs-comment"># complex()，强制将int、float、bool、纯数字字符串、complex转为complex</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">complex</span>(<span class="hljs-number">10</span>))  <span class="hljs-comment"># (10+0j)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">complex</span>(<span class="hljs-number">10.66</span>))  <span class="hljs-comment"># (10.66+0j)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">complex</span>(<span class="hljs-literal">True</span>))  <span class="hljs-comment"># (1+0j)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">complex</span>(<span class="hljs-literal">False</span>))  <span class="hljs-comment"># 0j</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">complex</span>(<span class="hljs-string">&#x27;12345678&#x27;</span>))  <span class="hljs-comment"># (12345678+0j)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">complex</span>(<span class="hljs-number">1</span>+<span class="hljs-number">2j</span>))  <span class="hljs-comment"># (1+2j)</span><br><br><span class="hljs-comment"># 当两个不同类型的数据进行运算的时候，低精度默认向高精度转换</span><br><span class="hljs-comment"># bool -&gt; int -&gt; float -&gt; complex</span><br><span class="hljs-comment"># 不要用小数作比较，存在精度损耗</span><br></code></pre></td></tr></table></figure><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 2 -&gt; 10</span><br>a = <span class="hljs-number">0b11</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(a))  <span class="hljs-comment"># 3</span><br><br><span class="hljs-comment"># 8 -&gt; 10</span><br>b = <span class="hljs-number">0o11</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(b))  <span class="hljs-comment"># 9</span><br><br><span class="hljs-comment"># 16 -&gt; 10</span><br>c = <span class="hljs-number">0x11</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(c))  <span class="hljs-comment"># 17</span><br><br><span class="hljs-comment"># 10 -&gt; 2</span><br>d = <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bin</span>(d))  <span class="hljs-comment"># 0b11</span><br><br><span class="hljs-comment"># 10 -&gt; 8</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">oct</span>(d))  <span class="hljs-comment"># 0o3</span><br><br><span class="hljs-comment"># 10 -&gt; 16</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))  <span class="hljs-comment"># 0x3</span><br></code></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># +、-、*、/、//、%、**</span><br><span class="hljs-comment"># / 永远返回浮点数类型</span><br><span class="hljs-comment"># // 直接舍弃小数部分</span><br><span class="hljs-comment"># % 求余数，** 乘方</span><br><span class="hljs-comment"># 混合运算优先级顺序，() 高于 ** 高于 *,/,//,% 高于 +,-</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">5</span> + <span class="hljs-number">2</span>)  <span class="hljs-comment"># 7</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">5.0</span> + <span class="hljs-number">2</span>)  <span class="hljs-comment"># 7.0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">5</span> - <span class="hljs-number">2</span>)  <span class="hljs-comment"># 3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">5</span> * <span class="hljs-number">2</span>)  <span class="hljs-comment"># 10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">5</span> / <span class="hljs-number">2</span>)  <span class="hljs-comment"># 2.5</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">4</span> / <span class="hljs-number">2</span>)  <span class="hljs-comment"># 2.0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">5</span> // <span class="hljs-number">2</span>)  <span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">5</span> % <span class="hljs-number">2</span>)  <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">5</span> ** <span class="hljs-number">2</span>)  <span class="hljs-comment"># 25</span><br></code></pre></td></tr></table></figure><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># =，将等号右侧的结果赋值给等号左边得到变量</span><br><span class="hljs-comment"># 单变量赋值</span><br>num = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(num)  <span class="hljs-comment"># 1</span><br><br><span class="hljs-comment"># 多变量赋值</span><br>a, b, c = <span class="hljs-number">1</span>, <span class="hljs-number">1.1</span>, <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(b)  <span class="hljs-comment"># 1.1</span><br><span class="hljs-built_in">print</span>(c)  <span class="hljs-comment"># hello</span><br><br><span class="hljs-comment"># 多变量赋相同值</span><br>a = b = <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 100</span><br><span class="hljs-built_in">print</span>(b)  <span class="hljs-comment"># 100</span><br><br><span class="hljs-comment"># 变量交换值</span><br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">20</span><br>a, b = b, a<br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 20</span><br><span class="hljs-built_in">print</span>(b)  <span class="hljs-comment"># 10</span><br><br><span class="hljs-comment"># +=，c += a 等价于 c = c + a</span><br><span class="hljs-comment"># -=，c -= a 等价于 c = c - a</span><br><span class="hljs-comment"># *=，c *= a 等价于 c = c * a</span><br><span class="hljs-comment"># /=，c /= a 等价于 c = c / a</span><br><span class="hljs-comment"># //=，c //= a 等价于 c = c // a</span><br><span class="hljs-comment"># %=，c %= a 等价于 c = c % a</span><br><span class="hljs-comment"># **=，c **= a 等价于 c = c ** a</span><br><br><span class="hljs-comment"># 注意：先计算右侧结果，在进行复合赋值运算</span><br>a = <span class="hljs-number">10</span><br>a *= <span class="hljs-number">1</span> + <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 30</span><br></code></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ==，判断相等，如果两侧操作数结果相等，则为 True，反之为 False</span><br><span class="hljs-comment"># !=，不等于，如果两侧操作数不相等，则为 True，反之为 False</span><br><span class="hljs-comment"># &gt;，如果运算符左侧操作数结果大于右侧操作数结果，则为 True，反之为 False</span><br><span class="hljs-comment"># &lt;，如果运算符左侧操作数结果小于右侧操作数结果，则为 True，反之为 False</span><br><span class="hljs-comment"># &gt;=，如果运算符左侧操作数结果大于等于右侧操作数结果，则为 True，反之为 False</span><br><span class="hljs-comment"># &lt;=，如果运算符左侧操作数结果小于等于右侧操作数结果，则为 True，反之为 False</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span> == <span class="hljs-number">1</span>)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span> != <span class="hljs-number">1</span>)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> &gt; <span class="hljs-number">2</span>)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span> &lt; <span class="hljs-number">3</span>)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> &gt;= <span class="hljs-number">2</span>)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span> &lt;= <span class="hljs-number">3</span>)  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># and，与，都真才真，若前一个表达式为假则不会再继续运算后面的表达式，因此建议假可能性大的放前面，优化程序</span><br><span class="hljs-comment"># or，或，一真则真，若钱一个表达式为真则不会再继续运算后面的表达式，因此建议真可能性大的放前面，优化程序</span><br><span class="hljs-comment"># not，非，取反</span><br></code></pre></td></tr></table></figure><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># if判断</span><br><span class="hljs-keyword">if</span> 条件<span class="hljs-number">1</span>：<br>    条件<span class="hljs-number">1</span>成立的代码<br>    ......<br><span class="hljs-keyword">elif</span> 条件<span class="hljs-number">2</span>:<br>    条件<span class="hljs-number">2</span>成立的代码<br>    ......<br><span class="hljs-keyword">else</span>:<br>    条件都不成立执行的代码<br>    ......<br><br><span class="hljs-comment"># 打印成绩等地，A</span><br>num = <span class="hljs-number">100</span><br><span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">90</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br><span class="hljs-keyword">elif</span> num &gt; <span class="hljs-number">60</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;B&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;C&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 条件成立执行的表达式 if 条件 else 条件不成立执行的表达式</span><br>a = <span class="hljs-number">10</span> <span class="hljs-keyword">if</span> <span class="hljs-number">5</span> &gt; <span class="hljs-number">3</span> <span class="hljs-keyword">else</span> <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 10</span><br></code></pre></td></tr></table></figure><h4 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 单 while 循环</span><br><span class="hljs-keyword">while</span> 条件：<br>    条件成立执行代码<span class="hljs-number">1</span><br>    条件成立执行代码<span class="hljs-number">2</span><br>    ......<br><br><span class="hljs-comment"># 循环打印 5 次，hello world</span><br>n = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> n &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>    n += <span class="hljs-number">1</span><br>“”“<br>hello world<br>hello world<br>hello world<br>hello world<br>hello world<br>”“”<br><br><span class="hljs-comment"># while else，else 为循环执行之后执行的代码</span><br>n = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> n &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>    n += <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;loop done&#x27;</span>)<br>“”“<br>hello world<br>hello world<br>hello world<br>hello world<br>hello world<br>loop done<br>”“”<br></code></pre></td></tr></table></figure><h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 跳出循环</span><br></code></pre></td></tr></table></figure><h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 跳过此次循环，转而执行下一次循环</span><br></code></pre></td></tr></table></figure><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 单 for 循环</span><br><span class="hljs-keyword">for</span> 临时变量 <span class="hljs-keyword">in</span> 序列：<br>    重复执行代码<span class="hljs-number">1</span><br>    重复执行代码<span class="hljs-number">2</span><br>    ......<br><br><span class="hljs-comment"># for 循环打印 hello world</span><br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;hello world&quot;</span>:<br>    <span class="hljs-built_in">print</span>(word)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">h</span><br><span class="hljs-string">e</span><br><span class="hljs-string">l</span><br><span class="hljs-string">l</span><br><span class="hljs-string">o</span><br><span class="hljs-string"> </span><br><span class="hljs-string">w</span><br><span class="hljs-string">o</span><br><span class="hljs-string">r</span><br><span class="hljs-string">l</span><br><span class="hljs-string">d</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># for else，else 为循环执行之后执行的代码</span><br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;hello world&quot;</span>:<br>    <span class="hljs-built_in">print</span>(word)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;loop done&quot;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">h</span><br><span class="hljs-string">e</span><br><span class="hljs-string">l</span><br><span class="hljs-string">l</span><br><span class="hljs-string">o</span><br><span class="hljs-string"> </span><br><span class="hljs-string">w</span><br><span class="hljs-string">o</span><br><span class="hljs-string">r</span><br><span class="hljs-string">l</span><br><span class="hljs-string">d</span><br><span class="hljs-string">loop done</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>可用 <code>&quot;....&quot;</code>、<code>&#39;...&#39;</code> 以及 <code>&quot;&quot;&quot;...&quot;&quot;&quot;</code> 来表示字符串</li><li>字符串可用 <code>/</code>来转义特殊字符，字符串前加 <code>r</code>，即表示原始字符串</li><li>不可变类型</li></ul><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 索引从0开始，有负索引，从-1开始，因为 -0 = 0</span><br><span class="hljs-comment"># 索引如果越界，会报错 IndexError</span><br>word = <span class="hljs-string">&#x27;Python&#x27;</span><br><span class="hljs-built_in">print</span>(word[<span class="hljs-number">0</span>])  <span class="hljs-comment"># P</span><br><span class="hljs-built_in">print</span>(word[-<span class="hljs-number">1</span>])  <span class="hljs-comment"># n</span><br><span class="hljs-built_in">print</span>(word[<span class="hljs-number">5</span>])  <span class="hljs-comment"># n</span><br><span class="hljs-built_in">print</span>(word[-<span class="hljs-number">6</span>])  <span class="hljs-comment"># P</span><br></code></pre></td></tr></table></figure><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 切片越界自动处理，并不会报错</span><br>word = <span class="hljs-string">&#x27;Python&#x27;</span><br><span class="hljs-built_in">print</span>(word[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])  <span class="hljs-comment"># Py</span><br><span class="hljs-built_in">print</span>(word[::<span class="hljs-number">2</span>])  <span class="hljs-comment"># 设置步进为 2，Pto</span><br><span class="hljs-built_in">print</span>(word[<span class="hljs-number">2</span>:])  <span class="hljs-comment"># thon</span><br><span class="hljs-built_in">print</span>(word[:])  <span class="hljs-comment"># Python</span><br><span class="hljs-built_in">print</span>(word[<span class="hljs-number">3</span>:])  <span class="hljs-comment"># hon</span><br><span class="hljs-built_in">print</span>(word[<span class="hljs-number">1</span>:<span class="hljs-number">8</span>])  <span class="hljs-comment"># ython</span><br></code></pre></td></tr></table></figure><h4 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># format()</span><br><span class="hljs-comment"># # 格式&#123;:[填充][对齐 &lt; &gt; = ^][符号 + = ][宽度][千位分隔符 , _][.保留位数][类型 b c d o x n...]&#125;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125;、&#123;&#125;、&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 1、2、3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0&#125;、&#123;1&#125;、&#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a, b, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 1、2、3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;2&#125;、&#123;1&#125;、&#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>, b, c))  <span class="hljs-comment"># 3、2、1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;x&#125;、&#123;y&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(x=<span class="hljs-number">3</span>, y=<span class="hljs-number">2</span>))  <span class="hljs-comment"># 3、2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0[0]&#125;、&#123;0[1]&#125;&#x27;</span>.<span class="hljs-built_in">format</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]))  <span class="hljs-comment"># 1、2</span><br><br><br><span class="hljs-comment"># f-string 使用基本和 format() 格式相同</span><br><span class="hljs-comment"># &#123;&#125;中不允许出现\，如需使用可创建临时变量</span><br>word = <span class="hljs-string">&#x27;Python&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;I like <span class="hljs-subst">&#123;word&#125;</span>&#x27;</span>)  <span class="hljs-comment"># I like Python</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;I like <span class="hljs-subst">&#123;word!s&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 调用str()  I like Python</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;I like <span class="hljs-subst">&#123;word!a&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 调用ascii()  I like &#x27;Python&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;I like <span class="hljs-subst">&#123;word!r&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 调用repr()  I like &#x27;Python&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;I like <span class="hljs-subst">&#123;<span class="hljs-built_in">repr</span>(word)&#125;</span>&#x27;</span>)  <span class="hljs-comment"># I like &#x27;Python&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># str()，强制转化成字符串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))  <span class="hljs-comment"># &#x27;1&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(<span class="hljs-number">1.1</span>))  <span class="hljs-comment"># &#x27;1.1&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(<span class="hljs-literal">True</span>))  <span class="hljs-comment"># &#x27;True&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))  <span class="hljs-comment"># &#x27;[1, 2, 3]&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(&#123;<span class="hljs-string">&quot;str&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>&#125;))  <span class="hljs-comment"># &quot;&#123;&#x27;str&#x27;: &#x27;123&#x27;&#125;&quot;</span><br><br><span class="hljs-comment"># + 拼接字符串，* 复制多份</span><br>str1 = <span class="hljs-string">&quot;hello &quot;</span><br>str2 = <span class="hljs-string">&quot;python&quot;</span><br><span class="hljs-built_in">print</span>(str1 + str2)  <span class="hljs-comment"># hello python</span><br><span class="hljs-built_in">print</span>(str1 * <span class="hljs-number">3</span>)  <span class="hljs-comment"># hello hello hello </span><br><br><span class="hljs-comment"># repr()，不转移字符原型化输出字符串（pycharm 里面 run 会自动优化输出，使用命令行更直观）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>))  <span class="hljs-comment"># &#x27;hello world&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>))  <span class="hljs-comment"># &quot;&#x27;hello world&#x27;&quot;</span><br><br><span class="hljs-comment"># len()，查看字符串长度</span><br>hello_str = <span class="hljs-string">&quot;hello world i like python and c plus and everything hello my friend&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(hello_str))  <span class="hljs-comment"># 67</span><br><br><span class="hljs-comment"># find(sub[, start[, end]])，检测 sub 子串是否包含在字符串 [start,end] 中，找到返回下标，没找到返回 -1</span><br><span class="hljs-comment"># rfind()，从右边开始找</span><br><span class="hljs-built_in">print</span>(hello_str.find(<span class="hljs-string">&quot;world&quot;</span>))  <span class="hljs-comment"># 6</span><br><span class="hljs-built_in">print</span>(hello_str.find(<span class="hljs-string">&quot;worlds&quot;</span>))  <span class="hljs-comment"># -1</span><br><span class="hljs-built_in">print</span>(hello_str.find(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">100</span>))  <span class="hljs-comment"># 52</span><br><br><span class="hljs-comment"># index(sub[, start[, end]])，检测 sub 子串是否包含在字符串 [start,end] 中，找到返回下标，没找到报错</span><br><span class="hljs-comment"># rindex()，从右边开始找</span><br><span class="hljs-built_in">print</span>(hello_str.index(<span class="hljs-string">&quot;world&quot;</span>))  <span class="hljs-comment"># 6</span><br><span class="hljs-built_in">print</span>(hello_str.index(<span class="hljs-string">&quot;worlds&quot;</span>))  <span class="hljs-comment"># ValueError: substring not found</span><br><span class="hljs-built_in">print</span>(hello_str.index(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">100</span>))  <span class="hljs-comment"># 52</span><br><br><span class="hljs-comment"># count()，返回子串出现的次数</span><br><span class="hljs-built_in">print</span>(hello_str.count(<span class="hljs-string">&quot;hello&quot;</span>))  <span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(hello_str.count(<span class="hljs-string">&quot;i&quot;</span>))  <span class="hljs-comment"># 4</span><br><br><span class="hljs-comment"># replace(old, new[, count])，返回字符串的副本，将 new 替代 old，并指定 count 次数</span><br>new_str = hello_str.replace(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;fuck&quot;</span>)<br><span class="hljs-built_in">print</span>(hello_str)  <span class="hljs-comment"># hello world i like python and c plus and everything hello my friend</span><br><span class="hljs-built_in">print</span>(new_str)  <span class="hljs-comment"># fuck world i like python and c plus and everything fuck my friend</span><br>new_str = hello_str.replace(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;fuck&quot;</span>， <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(new_str)  <span class="hljs-comment"># fuck world i like python and c plus and everything hello my friend</span><br><br><span class="hljs-comment"># split(sep=None, maxsplit=-1)，返回一个由字符串内单词组成的列表，使用 sep 作为分隔字符串，如果给出了 maxsplit，则最多进行 maxsplit 次拆分，默认以空字符串作为分隔符</span><br><span class="hljs-built_in">print</span>(hello_str.split())  <span class="hljs-comment"># [&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;i&#x27;, &#x27;like&#x27;, &#x27;python&#x27;, &#x27;and&#x27;, &#x27;c&#x27;, &#x27;plus&#x27;, &#x27;and&#x27;, &#x27;everything&#x27;, &#x27;hello&#x27;, &#x27;my&#x27;, &#x27;friend&#x27;]</span><br><span class="hljs-built_in">print</span>(hello_str.split(maxsplit=<span class="hljs-number">1</span>))  <span class="hljs-comment"># [&#x27;hello&#x27;, &#x27;world i like python and c plus and everything hello my friend&#x27;]</span><br><br><span class="hljs-comment"># strip([chars])，返回原字符串的副本，移除其中的前导和末尾字符，默认移除前后空白，可指定对应 chars</span><br><span class="hljs-comment"># lstrip()，只删除左边，rstrip()，只删除右边</span><br>hello_str = <span class="hljs-string">&quot;   hello world  &quot;</span><br><span class="hljs-built_in">print</span>(hello_str)  <span class="hljs-comment"># &#x27;   hello world  &#x27;</span><br><span class="hljs-built_in">print</span>(hello_str.strip())  <span class="hljs-comment"># &#x27;hello world&#x27;</span><br><br><span class="hljs-comment"># join(iterable)，返回一个由 iterable 中的字符串拼接而成的字符串</span><br>str_list = [<span class="hljs-string">&quot;my&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;is&quot;</span>, <span class="hljs-string">&quot;ReaJason&quot;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; &quot;</span>.join(str_list))  <span class="hljs-comment"># my name is ReaJason</span><br>str_dict = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; &quot;</span>.join(str_dict))  <span class="hljs-comment"># name age</span><br><br><span class="hljs-comment"># capitalize()，返回原字符串的副本，其首个字符大写，其余为小写</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>.capitalize())  <span class="hljs-comment"># Hello world</span><br><br><span class="hljs-comment"># lower()，返回原字符串的副本，其所有区分大小写的字符均转换为小写</span><br><span class="hljs-comment"># islower()，判断字符串是否全为小写</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;HELLO WORLD&quot;</span>.lower())  <span class="hljs-comment"># hello world</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;HELLO WORLD&quot;</span>.islower())  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>.islower())  <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># title()，返回原字符串的标题版本，其中每个单词第一个字母为大写，其余字母为小写</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>.title())  <span class="hljs-comment"># Hello World</span><br><br><span class="hljs-comment"># upper()，返回原字符串的副本，其中所有区分大小写的字符均转换为大写</span><br><span class="hljs-comment"># isupper()，判断字符串是否全为大写</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>.upper())  <span class="hljs-comment"># HELLO WORLD</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>.isupper())  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;HELLO WORLD&quot;</span>.isupper())  <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># ljust(width[, fillchar])，返回长度为 width 的靠左对齐字符串，使用指定的 fillchar 填充空位</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>.ljust(<span class="hljs-number">20</span>))  <span class="hljs-comment"># &#x27;hello world         &#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>.ljust(<span class="hljs-number">20</span>, <span class="hljs-string">&quot;-&quot;</span>))  <span class="hljs-comment"># &#x27;hello world---------&#x27;</span><br><br><span class="hljs-comment"># rjust(width[, fillchar])，返回长度为 width 的靠右对齐字符串，使用指定的 fillchar 填充空位</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>.rjust(<span class="hljs-number">20</span>))  <span class="hljs-comment"># &#x27;         hello world&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>.rjust(<span class="hljs-number">20</span>, <span class="hljs-string">&quot;-&quot;</span>))  <span class="hljs-comment"># &#x27;---------hello world&#x27;</span><br><br><span class="hljs-comment"># center(width[, fillchar])，返回长度为 width 的居中对齐字符串，使用指定的 fillchar 填充空位</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>.center(<span class="hljs-number">20</span>))  <span class="hljs-comment"># &#x27;    hello world     &#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>.center(<span class="hljs-number">20</span>, <span class="hljs-string">&quot;-&quot;</span>))  <span class="hljs-comment"># &#x27;----hello world-----&#x27;</span><br><br><span class="hljs-comment"># startswith(prefix[, start[, end]])，如果字符串以指定的 prefix 开始则返回 True，否则返回 False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>.startswith(<span class="hljs-string">&quot;hello&quot;</span>))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>.startswith(<span class="hljs-string">&quot;h&quot;</span>))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>.startswith(<span class="hljs-string">&quot;world&quot;</span>))  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># endswith(suffix[, start[, end]])，如果字符串以指定的 suffix 结束返回 True，否则返回 False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>.endswith(<span class="hljs-string">&quot;world&quot;</span>))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>.endswith(<span class="hljs-string">&quot;d&quot;</span>))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>.endswith(<span class="hljs-string">&quot;hello&quot;</span>))  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># isalpha(),如果字符串中的所有字符都是字母，并且至少有一个字符，返回 True ，否则返回 False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>.isalpha())  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># isdigit()，如果字符串中的所有字符都是数字，并且至少有一个字符，返回 True ，否则返回 False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1234&quot;</span>.isdigit())  <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># isalnum()，如果字符串中的所有字符都是字母或数字且至少有一个字符，则返回 True ， 否则返回 False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1234&quot;</span>.isalnum())  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>.isalnum())  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello1world&quot;</span>.isalnum())  <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># isspace()，如果字符串中只有空白字符且至少有一个字符则返回 True ，否则返回 False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;   &quot;</span>.isspace())  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul><li>用 <code>[]</code> 组合复合类型（不限定只能一种类型）</li><li>使用方括号，其中的项以逗号分隔: <code>[a]</code>, <code>[a, b, c]</code></li><li>使用一对方括号来表示空列表: <code>[]</code></li><li>可变数据类型，可获取，可修改，有序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-number">13.14</span>, <span class="hljs-literal">True</span>, <span class="hljs-number">1</span>+<span class="hljs-number">1j</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;ReaJason&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="索引-1"><a href="#索引-1" class="headerlink" title="索引"></a>索引</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(list1[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(list1[-<span class="hljs-number">7</span>])  <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(list1[-<span class="hljs-number">1</span>])  <span class="hljs-comment"># ReaJason</span><br><span class="hljs-built_in">print</span>(list1[<span class="hljs-number">6</span>])  <span class="hljs-comment"># ReaJason</span><br><span class="hljs-built_in">print</span>(list1[<span class="hljs-number">5</span>][<span class="hljs-number">1</span>])  <span class="hljs-comment"># 2</span><br>list1[<span class="hljs-number">5</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">250</span><br><span class="hljs-built_in">print</span>(list1)  <span class="hljs-comment"># [1, &#x27;Python&#x27;, 13.14, True, (1+1j), [1, 250, 3], &#x27;ReaJason&#x27;]</span><br><br><span class="hljs-comment"># 修改指定索引数据</span><br>list1[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(list1)  <span class="hljs-comment"># [10, &#x27;Python&#x27;, 13.14, True, (1+1j), [1, 2, 3], &#x27;ReaJason&#x27;]</span><br></code></pre></td></tr></table></figure><h4 id="切片-1"><a href="#切片-1" class="headerlink" title="切片"></a>切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(list1[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])  <span class="hljs-comment"># [1, &#x27;Python&#x27;]</span><br><span class="hljs-built_in">print</span>(list1[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>])  <span class="hljs-comment"># [1, 13.14, (1+1j)]</span><br><span class="hljs-built_in">print</span>(list1[::-<span class="hljs-number">1</span>])  <span class="hljs-comment"># [&#x27;ReaJason&#x27;, [1, 2, 3], (1+1j), True, 13.14, &#x27;Python&#x27;, 1]</span><br></code></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># for 遍历列表</span><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-number">13.14</span>, <span class="hljs-literal">True</span>, <span class="hljs-number">1</span>+<span class="hljs-number">1j</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;ReaJason&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list1:<br>    <span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1</span><br><span class="hljs-string">Python</span><br><span class="hljs-string">13.14</span><br><span class="hljs-string">True</span><br><span class="hljs-string">(1+1j)</span><br><span class="hljs-string">[1, 2, 3]</span><br><span class="hljs-string">ReaJason</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># enumarate()，返回索引和值的元组</span><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-number">13.14</span>, <span class="hljs-literal">True</span>, <span class="hljs-number">1</span>+<span class="hljs-number">1j</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;ReaJason&#x27;</span>]<br><span class="hljs-keyword">for</span> index, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(list1):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;index&#125;</span>：<span class="hljs-subst">&#123;value&#125;</span>&quot;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">0：1</span><br><span class="hljs-string">1：Python</span><br><span class="hljs-string">2：13.14</span><br><span class="hljs-string">3：True</span><br><span class="hljs-string">4：(1+1j)</span><br><span class="hljs-string">5：[1, 2, 3]</span><br><span class="hljs-string">6：ReaJason</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># list()，强制转换成列表</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;12345678&#x27;</span>))  <span class="hljs-comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;]</span><br><br><span class="hljs-comment"># + 拼接列表，* 复制元素多份</span><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>list2 = [<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;python&quot;</span>,]<br><span class="hljs-built_in">print</span>(list1 + list2)  <span class="hljs-comment"># [1, 2, 3, &#x27;hello&#x27;, &#x27;python&#x27;]</span><br><span class="hljs-built_in">print</span>(list2 * <span class="hljs-number">2</span>)  <span class="hljs-comment"># [&#x27;hello&#x27;, &#x27;python&#x27;, &#x27;hello&#x27;, &#x27;python&#x27;]</span><br><br><span class="hljs-comment"># len()，获取列表元素个数</span><br>list2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(list2))  <span class="hljs-comment"># 7</span><br><br><span class="hljs-comment"># count(x)，返回元素 x 在列表中出现的次数</span><br><span class="hljs-built_in">print</span>(list2.count(<span class="hljs-number">1</span>))  <span class="hljs-comment"># 2</span><br><br><span class="hljs-comment"># reverse()，直接翻转原数组的所有元素</span><br>list2.reverse()<br><span class="hljs-built_in">print</span>(list2)  <span class="hljs-comment"># [5, 4, 3, 2, 1]</span><br><br><span class="hljs-comment"># sort(key=None, reverse=False)，对列表中的元素进行排序</span><br>list2.sort()  <span class="hljs-comment"># [1, 1, 2, 2, 3, 4, 5]</span><br><span class="hljs-built_in">print</span>(list2)<br>list2.sort(reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(list2)  <span class="hljs-comment"># [5, 4, 3, 2, 2, 1, 1]</span><br><br><span class="hljs-comment"># index(x[, start[, end]])，返回列表中第一个值为 x 的元素的索引，如果不存在会抛出 ValueError 异常</span><br>name_list = [<span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;Lucy&quot;</span>, <span class="hljs-string">&quot;LiLy&quot;</span>]<br><span class="hljs-built_in">print</span>(name_list.index(<span class="hljs-string">&quot;Tom&quot;</span>))  <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(name_list.index(<span class="hljs-string">&quot;Toms&quot;</span>))  <span class="hljs-comment"># ValueError: &#x27;Toms&#x27; is not in list</span><br><br><span class="hljs-comment"># in，not in，判断元素是否在列表中，为通用方法，适用于字符串，字典，元组，集合</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ReaJason&quot;</span> <span class="hljs-keyword">in</span> name_list)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Dazzling&quot;</span> <span class="hljs-keyword">in</span> name_list)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ReaJason&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> name_list)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Dazzling&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> name_list)  <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># append(x)，在列表末尾添加元素x</span><br>name_list.append(<span class="hljs-string">&quot;Jack&quot;</span>)<br><span class="hljs-built_in">print</span>(name_list)  <span class="hljs-comment"># [&#x27;ReaJason&#x27;, &#x27;Tom&#x27;, &#x27;Lucy&#x27;, &#x27;LiLy&#x27;, &#x27;Jack&#x27;]</span><br><br><span class="hljs-comment"># extend(iterable)，使用可迭代对象中的所有元素来扩展列表</span><br>name_list.extend([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(name_list)  <span class="hljs-comment"># [&#x27;ReaJason&#x27;, &#x27;Tom&#x27;, &#x27;Lucy&#x27;, &#x27;LiLy&#x27;, 1, 2, 3, 4, 5]</span><br><br><span class="hljs-comment"># insert(i,x)，在指定i索引位置插入元素x、</span><br>name_list.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Dazzling&quot;</span>)<br><span class="hljs-built_in">print</span>(name_list)  <span class="hljs-comment"># [&#x27;ReaJason&#x27;, &#x27;Dazzling&#x27;, &#x27;Tom&#x27;, &#x27;Lucy&#x27;, &#x27;LiLy&#x27;]</span><br><br><br><span class="hljs-comment"># del，删除目标元素或变量</span><br><span class="hljs-keyword">del</span> name_list[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(name_list)  <span class="hljs-comment"># [&#x27;Tom&#x27;, &#x27;Lucy&#x27;, &#x27;LiLy&#x27;]</span><br><span class="hljs-keyword">del</span> name_list<br><span class="hljs-built_in">print</span>(name_list)  <span class="hljs-comment"># NameError: name &#x27;name_list&#x27; is not defined</span><br><br><span class="hljs-comment"># pop()，pop(i)，删除列表最后一个元素，删除列表指定i索引位置的元素</span><br>x = name_list.pop()<br>y = name_list.pop(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># LiLy</span><br><span class="hljs-built_in">print</span>(y)  <span class="hljs-comment"># ReaJason</span><br><span class="hljs-built_in">print</span>(name_list)  <span class="hljs-comment"># [&#x27;Tom&#x27;, &#x27;Lucy&#x27;]</span><br><br><span class="hljs-comment"># remove(x)，移除列表中从左到右第一个值为x的元素</span><br>name_list.remove(<span class="hljs-string">&quot;Tom&quot;</span>)<br><span class="hljs-built_in">print</span>(name_list)  <span class="hljs-comment"># [&#x27;ReaJason&#x27;, &#x27;Lucy&#x27;, &#x27;LiLy&#x27;]</span><br><br><span class="hljs-comment"># clear()，清空列表</span><br>name_list.clear()<br><span class="hljs-built_in">print</span>(name_list)  <span class="hljs-comment"># []</span><br><br><span class="hljs-comment"># copy()，返回列表的一个浅拷贝</span><br>name_list2 = name_list.copy()<br>name_list2.append(<span class="hljs-string">&quot;Dazzling&quot;</span>)<br><span class="hljs-built_in">print</span>(name_list)  <span class="hljs-comment"># [&#x27;ReaJason&#x27;, &#x27;Tom&#x27;, &#x27;Lucy&#x27;, &#x27;LiLy&#x27;]</span><br><span class="hljs-built_in">print</span>(name_list2)  <span class="hljs-comment"># [&#x27;ReaJason&#x27;, &#x27;Tom&#x27;, &#x27;Lucy&#x27;, &#x27;LiLy&#x27;, &#x27;Dazzling&#x27;]</span><br></code></pre></td></tr></table></figure><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># range(start, stop[, step])，range 构造器的参数必须为整数，用来生成序列</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)))  <span class="hljs-comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>)))  <span class="hljs-comment"># [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>)))  <span class="hljs-comment"># []</span><br><br><span class="hljs-comment"># 列表推导式，返回一个列表</span><br>list1 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(list1)  <span class="hljs-comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)))  <span class="hljs-comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><br><span class="hljs-comment"># 带 if 的列表推导式，如果 i 为偶数，则选择</span><br>list1 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(list1)  <span class="hljs-comment"># [0, 2, 4, 6, 8]</span><br><br><span class="hljs-comment"># 多个 for 循环实现列表推导式，将多层次列表展开</span><br>arr = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]<br>list1 = [j <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i]<br><span class="hljs-built_in">print</span>(list1)  <span class="hljs-comment"># [1, 2, 3, 4, 5, 6]</span><br></code></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><ul><li>用 <code>（）</code> 组合复合类型（不限定只能一种类型）</li><li>使用一对圆括号来表示空元组: <code>()</code></li><li>使用一个后缀的逗号来表示单元组: <code>a,</code> 或 <code>(a,)</code></li><li>使用以逗号分隔的多个项: <code>a, b, c</code> or <code>(a, b, c)</code></li><li>元素数据不可修改，有序</li><li>索引切片和 list 一样</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tuple1 = (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-number">13.14</span>, <span class="hljs-literal">True</span>, <span class="hljs-number">1</span> + <span class="hljs-number">1j</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;ReaJason&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="常用函数-2"><a href="#常用函数-2" class="headerlink" title="常用函数"></a>常用函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># tuple()，强制转换成元组</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>(<span class="hljs-string">&#x27;12345678&#x27;</span>))  <span class="hljs-comment"># (&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;)</span><br><br><span class="hljs-comment"># len()，获取列表元素个数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(tuple1))  <span class="hljs-comment"># 7</span><br><br><span class="hljs-comment"># count(x)，返回元素 x 在列表中出现的次数</span><br>num_tuple = (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(num_tuple.count(<span class="hljs-number">1</span>))  <span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(num_tuple.count(<span class="hljs-number">2</span>))  <span class="hljs-comment"># 1</span><br><br><span class="hljs-comment"># index(x[, start[, end]])，返回列表中第一个值为 x 的元素的索引，如果不存在会抛出 ValueError 异常</span><br><span class="hljs-built_in">print</span>(num_tuple.index(<span class="hljs-number">1</span>))  <span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(num_tuple.index(<span class="hljs-number">6</span>))  <span class="hljs-comment"># ValueError: tuple.index(x): x not in tuple</span><br></code></pre></td></tr></table></figure><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><ul><li>符号为：<code>&#123;&#125;</code></li><li>数据以键值对形式出现</li><li>各个键值对之间用逗号隔开</li><li>字典是无序的对象集合，使用键-值（key-value）存储，拥有极快的查询速度</li><li>字典是可变类型，键（key）必须使用不可变类型</li><li>同一个字典中，键（key）必须是唯一的</li></ul><h4 id="字典创建"><a href="#字典创建" class="headerlink" title="字典创建"></a>字典创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用 &#123;key1: value1, key1: value1&#125;的形式 创建字典</span><br>dict1 = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">22</span>, <span class="hljs-string">&quot;gender&quot;</span>: <span class="hljs-string">&quot;female&quot;</span>&#125;<br><br><span class="hljs-comment"># 使用dict构造器创建</span><br>dict2 = <span class="hljs-built_in">dict</span>(name=<span class="hljs-string">&quot;ReaJason&quot;</span>, age=<span class="hljs-number">22</span>, gender=<span class="hljs-string">&quot;female&quot;</span>)<br><br><span class="hljs-comment"># 创建空字典</span><br>dict3 = &#123;&#125;<br>dict4 = <span class="hljs-built_in">dict</span>()<br></code></pre></td></tr></table></figure><h4 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">22</span>, <span class="hljs-string">&quot;gender&quot;</span>: <span class="hljs-string">&quot;female&quot;</span>&#125;<br><br><span class="hljs-comment"># 增，d[key] = value</span><br>dict1[<span class="hljs-string">&#x27;id&#x27;</span>] = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(dict1)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;ReaJason&#x27;, &#x27;age&#x27;: 22, &#x27;gender&#x27;: &#x27;female&#x27;, &#x27;id&#x27;: 10&#125;</span><br><br><span class="hljs-comment"># 改，d[key] = value</span><br>dict1[<span class="hljs-string">&#x27;age&#x27;</span>] = <span class="hljs-number">18</span><br><span class="hljs-built_in">print</span>(dict1)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;ReaJason&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;female&#x27;&#125;</span><br><br><span class="hljs-comment"># 删，del d[val]，将 d[key] 从 d 中移除。 如果映射中不存在 key 则会引发 KeyError</span><br><span class="hljs-keyword">del</span> dict1[<span class="hljs-string">&#x27;name&#x27;</span>]<br><span class="hljs-built_in">print</span>(dict1)  <span class="hljs-comment"># &#123;&#x27;age&#x27;: 22, &#x27;gender&#x27;: &#x27;female&#x27;&#125;</span><br><br><span class="hljs-comment"># clear()，移除字典中的所有元素</span><br>dict1.clear()<br><span class="hljs-built_in">print</span>(dict1)  <span class="hljs-comment"># &#123;&#125;</span><br><br><span class="hljs-comment"># 查，d[key]，返回 d 中以 key 为键的项。 如果映射中不存在 key 则会引发 KeyError</span><br><span class="hljs-built_in">print</span>(dict1[<span class="hljs-string">&#x27;name&#x27;</span>])  <span class="hljs-comment"># ReaJason</span><br><span class="hljs-built_in">print</span>(dict1[<span class="hljs-string">&#x27;id&#x27;</span>])  <span class="hljs-comment"># KeyError: &#x27;id&#x27;</span><br><br><span class="hljs-comment"># get(key[, default])，如果 key 存在于字典中则返回 key 的值，否则返回 default。 如果 default 未给出则默认为 None，因而此方法绝不会引发 KeyError</span><br><span class="hljs-built_in">print</span>(dict1.get(<span class="hljs-string">&#x27;name&#x27;</span>))  <span class="hljs-comment"># ReaJason</span><br><span class="hljs-built_in">print</span>(dict1.get(<span class="hljs-string">&#x27;id&#x27;</span>))  <span class="hljs-comment"># None</span><br><span class="hljs-built_in">print</span>(dict1.get(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><h4 id="常用函数-3"><a href="#常用函数-3" class="headerlink" title="常用函数"></a>常用函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">22</span>, <span class="hljs-string">&quot;gender&quot;</span>: <span class="hljs-string">&quot;female&quot;</span>&#125;<br><br><span class="hljs-comment"># len(d)，返回字典 d 中的项数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(dict1))  <span class="hljs-comment"># 3</span><br><br><span class="hljs-comment"># key in d，如果 d 中存在键 key 则返回 True，否则返回 False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-keyword">in</span> dict1)  <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># key not in d，如果 d 中不存在键 key 则返回 True，否则返回 False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> dict1)  <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># keys()，返回由字典键组成的一个新视图，类似于字典所有键组成的列表</span><br><span class="hljs-built_in">print</span>(dict1.keys())  <span class="hljs-comment"># dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;gender&#x27;])</span><br><br><span class="hljs-comment"># values()，返回由字典值组成的一个新视图，类似于字典所有值组成的列表</span><br><span class="hljs-built_in">print</span>(dict1.values())  <span class="hljs-comment"># dict_values([&#x27;ReaJason&#x27;, 22, &#x27;female&#x27;])</span><br><br><span class="hljs-comment"># items()，返回由字典项 ((键, 值) 对) 组成的一个新视图</span><br><span class="hljs-built_in">print</span>(dict1.items())  <span class="hljs-comment"># dict_items([(&#x27;name&#x27;, &#x27;ReaJason&#x27;), (&#x27;age&#x27;, 22), (&#x27;gender&#x27;, &#x27;female&#x27;)])</span><br><br><span class="hljs-comment"># 字典遍历，获取 key 和 value</span><br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> dict1.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;key&#125;</span>：<span class="hljs-subst">&#123;value&#125;</span>&quot;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">name：ReaJason</span><br><span class="hljs-string">age：22</span><br><span class="hljs-string">gender：female</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># update([other])，使用来自 other 的键/值对更新字典，覆盖原有的键，原地更新</span><br>dict2 = &#123;<span class="hljs-string">&quot;hobby&quot;</span>: <span class="hljs-string">&quot;learning&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>&#125;<br>dict1.update(dict2)<br><span class="hljs-built_in">print</span>(dict1)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;ReaJason&#x27;, &#x27;age&#x27;: 22, &#x27;gender&#x27;: &#x27;female&#x27;, &#x27;hobby&#x27;: &#x27;learning&#x27;, &#x27;id&#x27;: 1&#125;</span><br><br>dict3 = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Dazzling&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&quot;gender&quot;</span>: <span class="hljs-string">&quot;male&quot;</span>&#125;<br>dict1.update(dict3)<br><span class="hljs-built_in">print</span>(dict1)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;Dazzling&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;male&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字典推导式用于快速生成字典，以及提取目标数据</span><br>cookies = <span class="hljs-string">&quot;anonymid=jy0ui55o-u6f6zd; depovince=GW; _r01_=1;&quot;</span><br>cookies = &#123;cookie.split(<span class="hljs-string">&quot;=&quot;</span>)[<span class="hljs-number">0</span>]:cookie.split(<span class="hljs-string">&quot;=&quot;</span>)[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> cookie <span class="hljs-keyword">in</span> cookies.split(<span class="hljs-string">&quot;; &quot;</span>)&#125;<br><span class="hljs-built_in">print</span>(cookies)  <span class="hljs-comment"># &#123;&#x27;anonymid&#x27;: &#x27;jy0ui55o-u6f6zd&#x27;, &#x27;depovince&#x27;: &#x27;GW&#x27;, &#x27;_r01_&#x27;: &#x27;1;&#x27;&#125;</span><br><br><span class="hljs-comment"># 其他用法同列表推导式</span><br></code></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul><li>多个元素的无序组合，集合是无序的，不支持索引操作</li><li>集合元素是唯一的，可用于去重</li></ul><h4 id="集合创建"><a href="#集合创建" class="headerlink" title="集合创建"></a>集合创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用 &#123;value1, value2&#125;</span><br>set1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br><span class="hljs-comment"># 使用set()方法</span><br>set2 = <span class="hljs-built_in">set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br><br><span class="hljs-comment"># 创建空集合</span><br>set3 = <span class="hljs-built_in">set</span>()<br></code></pre></td></tr></table></figure><h4 id="增删改查-1"><a href="#增删改查-1" class="headerlink" title="增删改查"></a>增删改查</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>&#125;<br><br><span class="hljs-comment"># add(elem)，将元素 elem 添加到集合中</span><br>set1.add(<span class="hljs-number">30</span>)<br>set1.add(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(set1)  <span class="hljs-comment"># &#123;10, 20, 30&#125;</span><br><br><span class="hljs-comment"># update(*others)，更新集合，添加来自 others 中的所有元素</span><br>list1 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>]<br>set1.update(list1)<br><span class="hljs-built_in">print</span>(set1)  <span class="hljs-comment"># &#123;40, 10, 50, 20, 30&#125;</span><br><br><span class="hljs-comment"># remove(elem)，从集合中移除元素 elem。 如果 elem 不存在于集合中则会引发 KeyError</span><br>set1.remove(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(set1)  <span class="hljs-comment"># &#123;20&#125;</span><br>set1.remove(<span class="hljs-number">10</span>)  <span class="hljs-comment"># KeyError: 10</span><br><br><span class="hljs-comment"># discard(elem)，如果元素 elem 存在于集合中则将其移除</span><br>set1.discard(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(set1)  <span class="hljs-comment"># &#123;20&#125;</span><br>set1.discard(<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># pop()，从集合中移除并返回任意一个元素。 如果集合为空则会引发 KeyError</span><br>set1.pop()<br>set1.pop()<br><span class="hljs-built_in">print</span>(set1)  <span class="hljs-comment"># set()</span><br>set1.pop()  <span class="hljs-comment"># KeyError: &#x27;pop from an empty set&#x27;</span><br><br><span class="hljs-comment"># x in s，检测 x 是否为 s 中的成员</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">in</span> set1)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">100</span> <span class="hljs-keyword">in</span> set1)  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># x not in s，检测 x 是否非 s 中的成员</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> set1)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">100</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> set1)  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>将一段具有独立功能的代码块整合到一个整体并命名。在需要的地方调用，实现更高效的代码复用</li><li>函数定义参数可有可无，返回值也一样，函数必须先定义后使用</li><li>函数设计要尽量短小，嵌套层次不宜过深</li><li>函数申明应该做到合理、简单、易于使用</li><li>函数参数设计应考虑向下兼容</li><li>一个函数只做一件事，尽量保证函数语句粒度的一致性</li></ul><h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用 def 定义函数，return 返回需要返回的值（非必需）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>(<span class="hljs-params">参数<span class="hljs-number">1</span>（可选）, 参数<span class="hljs-number">2</span>（可选）</span>):<br>    函数内代码<br>    ......<br>    <span class="hljs-keyword">return</span> 返回值（可选）<br><br><span class="hljs-comment"># 定义一个实现加法的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">a_add_b</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a + b<br><br><br>result = a_add_b(<span class="hljs-number">10</span>, <span class="hljs-number">90</span>)<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># 100</span><br></code></pre></td></tr></table></figure><h4 id="说明文档"><a href="#说明文档" class="headerlink" title="说明文档"></a>说明文档</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">a_add_b</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    我是a_add_b的说明文档：一个实现加法的函数</span><br><span class="hljs-string">    :param a: 参数 1</span><br><span class="hljs-string">    :param b: 参数 2</span><br><span class="hljs-string">    :return: 返回值</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> a + b<br><br><span class="hljs-comment"># help(函数名称)，查看函数的说明文档</span><br><span class="hljs-built_in">help</span>(a_add_b)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Help on function a_add_b in module __main__:</span><br><span class="hljs-string"></span><br><span class="hljs-string">a_add_b(a, b)</span><br><span class="hljs-string">    一个实现加法的函数</span><br><span class="hljs-string">    :param a: 参数 1</span><br><span class="hljs-string">    :param b: 参数 2</span><br><span class="hljs-string">    :return: 返回值</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><ul><li>局部变量，定义在函数内部，作用范围为该函数内</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    a = <span class="hljs-number">100</span><br>    <span class="hljs-built_in">print</span>(a)<br><br>test()  <span class="hljs-comment"># 100</span><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># NameError: name &#x27;a&#x27; is not defined</span><br></code></pre></td></tr></table></figure><ul><li>全局变量，定义在全局，当前 py 文件内都可访问到</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">100</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    <span class="hljs-built_in">print</span>(a)<br><br>test()  <span class="hljs-comment"># 100</span><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 100</span><br></code></pre></td></tr></table></figure><ul><li>global()，可被用来表明特定变量生存于全局作用域并且应当在其中被重新绑定</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">100</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;全局变量a：<span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)  <span class="hljs-comment"># 全局变量a：100</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test1</span>():<br>    a = <span class="hljs-number">200</span>  <span class="hljs-comment"># 局部变量，</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;test1函数的a：<span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test2</span>():<br>    <span class="hljs-keyword">global</span> a  <span class="hljs-comment"># 修改全局变量</span><br>    a = <span class="hljs-number">300</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;test2函数的a：<span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)<br><br>test1()  <span class="hljs-comment"># test1函数的a：200</span><br>test2()  <span class="hljs-comment"># test2函数的a：300</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;全局变量a：<span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)  <span class="hljs-comment"># 全局变量a：300</span><br></code></pre></td></tr></table></figure><ul><li>nonlocal()，表明特定变量生存于外层作用域中并且应当在其中被重新绑定</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    a = <span class="hljs-number">200</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test1</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;test1函数的a：<span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test2</span>():<br>        <span class="hljs-keyword">nonlocal</span> a  <span class="hljs-comment"># 修改局部变量</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;test2函数的a：<span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)<br>        a = <span class="hljs-number">100</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;test1函数的a：<span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)<br>    test1()<br>    test2()<br><br>test()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">test1函数的a：200</span><br><span class="hljs-string">test2函数的a：200</span><br><span class="hljs-string">test1函数的a：100</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h4><ul><li>位置参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 位置参数与形参一一对应</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_info</span>(<span class="hljs-params">name, age, gender</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;name：<span class="hljs-subst">&#123;name&#125;</span>，age：<span class="hljs-subst">&#123;age&#125;</span>，gender：<span class="hljs-subst">&#123;gender&#125;</span>&quot;</span>)<br><br><br>user_info(<span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;female&quot;</span>)  <span class="hljs-comment"># name：ReaJason，age：18，gender：female</span><br>user_info(<span class="hljs-number">18</span>, <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-string">&quot;ReaJason&quot;</span>)  <span class="hljs-comment"># name：18，age：female，gender：ReaJason</span><br></code></pre></td></tr></table></figure><ul><li>关键字参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 当函数调用时既有位置参数也有关键字参数时，关键字参数必须写在最后</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_info</span>(<span class="hljs-params">name, age, gender</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;name：<span class="hljs-subst">&#123;name&#125;</span>，age：<span class="hljs-subst">&#123;age&#125;</span>，gender：<span class="hljs-subst">&#123;gender&#125;</span>&quot;</span>)<br><br><br>user_info(name=<span class="hljs-string">&quot;ReaJason&quot;</span>, age=<span class="hljs-number">18</span>, gender=<span class="hljs-string">&quot;female&quot;</span>)  <span class="hljs-comment"># name：ReaJason，age：18，gender：female</span><br>user_info(age=<span class="hljs-number">18</span>, gender=<span class="hljs-string">&quot;female&quot;</span>, name=<span class="hljs-string">&quot;ReaJason&quot;</span>)  <span class="hljs-comment"># name：ReaJason，age：18，gender：female</span><br>user_info(<span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-number">18</span>, gender=<span class="hljs-string">&quot;female&quot;</span>)  <span class="hljs-comment"># name：ReaJason，age：18，gender：female</span><br>user_info(name=<span class="hljs-string">&quot;ReaJason&quot;</span>, age=<span class="hljs-number">18</span>, <span class="hljs-string">&quot;female&quot;</span>)  <span class="hljs-comment"># SyntaxError: positional argument follows keyword argument</span><br></code></pre></td></tr></table></figure><ul><li>默认参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 所有位置参数必须在默认参数之前</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_info</span>(<span class="hljs-params">name, age, gender=<span class="hljs-string">&quot;female&quot;</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;name：<span class="hljs-subst">&#123;name&#125;</span>，age：<span class="hljs-subst">&#123;age&#125;</span>，gender：<span class="hljs-subst">&#123;gender&#125;</span>&quot;</span>)<br><br><br>user_info(<span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-number">18</span>)  <span class="hljs-comment"># name：ReaJason，age：18，gender：female</span><br>user_info(<span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;male&quot;</span>)  <span class="hljs-comment"># name：ReaJason，age：18，gender：male</span><br></code></pre></td></tr></table></figure><ul><li>可变长参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># *args，传进去的所有参数都会被 args 变量收集，根据参数位置合并为一个元组</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_info</span>(<span class="hljs-params">*args</span>):<br>    <span class="hljs-built_in">print</span>(args)<br><br><br>user_info(<span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;female&quot;</span>, [<span class="hljs-string">&quot;learning&quot;</span>, <span class="hljs-string">&quot;gaming&quot;</span>])<br><span class="hljs-comment"># (&#x27;ReaJason&#x27;, 18, &#x27;female&#x27;, [&#x27;learning&#x27;, &#x27;gaming&#x27;])</span><br><br><span class="hljs-comment"># **kwargs，传进去的所有参数都会被 kwargs 变量收集，将关键字参数做为 key 后面的值作为 value 合并为一个一个字典</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_info</span>(<span class="hljs-params">**kwargs</span>):<br>    <span class="hljs-built_in">print</span>(kwargs)<br><br><br>user_info(name=<span class="hljs-string">&quot;ReaJason&quot;</span>, age=<span class="hljs-number">18</span>, gender=<span class="hljs-string">&quot;female&quot;</span>, hobby=[<span class="hljs-string">&quot;learning&quot;</span>, <span class="hljs-string">&quot;gaming&quot;</span>])<br><span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;ReaJason&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;female&#x27;, &#x27;hobby&#x27;: [&#x27;learning&#x27;, &#x27;gaming&#x27;]&#125;</span><br><br><span class="hljs-comment"># 当位置参数，默认参数，与可变长参数在同一个函数定义中，相对位置为 位置参数 &gt; 默认参数 &gt; 可变长参数</span><br></code></pre></td></tr></table></figure><h4 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义匿名函数</span><br>a_add_b = <span class="hljs-keyword">lambda</span> a, b: a+b<br><span class="hljs-built_in">print</span>(a_add_b(<span class="hljs-number">10</span>, <span class="hljs-number">90</span>))  <span class="hljs-comment"># 100</span><br><br><span class="hljs-comment"># 用于列表排序，选定 key</span><br><br></code></pre></td></tr></table></figure><h4 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 求一个序列或者多个序列进行函数映射之后的值，列表推导得方式更好</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x ** <span class="hljs-number">2</span><br><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>list2 = [i ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list1]  <span class="hljs-comment"># 推荐方式</span><br>result1 = <span class="hljs-built_in">map</span>(func, list1)<br>result2 = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x ** <span class="hljs-number">2</span>, list1)<br><span class="hljs-built_in">print</span>(result1)  <span class="hljs-comment"># &lt;map object at 0x00000177FD39D848&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(result1))  <span class="hljs-comment"># [1, 4, 9, 16, 25]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(result2))  <span class="hljs-comment"># [1, 4, 9, 16, 25]</span><br><span class="hljs-built_in">print</span>(list2)  <span class="hljs-comment"># [1, 4, 9, 16, 25]</span><br></code></pre></td></tr></table></figure><h4 id="reduce函数"><a href="#reduce函数" class="headerlink" title="reduce函数"></a>reduce函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 对一个序列进行压缩运算，得到一个值</span><br><span class="hljs-keyword">import</span> functools  <span class="hljs-comment"># import 导入模块</span><br><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br>result = functools.reduce(<span class="hljs-keyword">lambda</span> x, y: x + y, list1)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h4 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 过滤掉序列中不符合函数条件的元素，列表推导得方式更好</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span><br><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br>list2 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list1 <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]  <span class="hljs-comment"># 推荐方式</span><br>result1 = <span class="hljs-built_in">filter</span>(func, list1)<br>result2 = <span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, list1)<br><span class="hljs-built_in">print</span>(result1)  <span class="hljs-comment"># &lt;filter object at 0x000001D589779048&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(result1))  <span class="hljs-comment"># [2, 4, 6]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(result2))  <span class="hljs-comment"># [2, 4, 6]</span><br><span class="hljs-built_in">print</span>(list2)  <span class="hljs-comment"># [2, 4, 6]</span><br></code></pre></td></tr></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="文件的读"><a href="#文件的读" class="headerlink" title="文件的读"></a>文件的读</h4><ul><li>关于文件读四个模式</li><li><code>r</code>，以只读的方式打开文件，未找到文件会报错，文件的指针将会放在文件的开头，这是默认模式，<code>r</code> 打开文本文件</li><li><code>rb</code>，以二进制格式打开一个文件用于只读。文件指针放在文件的开头。这是默认模式，<code>rb</code> 打开非文本文件</li><li><code>r+</code>，打开一个文件用于读写，准确来说是读并且追加。文件指针将会放在文件的开头</li><li><code>rb+</code>，以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># f.read(size)，读取文件指定 size 大小字节的数据，每执行一次往后移动指定位数，如果未指定 size，则读取文件所有数据</span><br><span class="hljs-comment"># text.txt 文本内容如下：</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">hello world</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;text.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>content = f.read(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(content)  <span class="hljs-comment"># hello</span><br>content = f.read(<span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(content)  <span class="hljs-comment">#  world</span><br>f.close()<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;text.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>content = f.read()<br><span class="hljs-built_in">print</span>(content)  <span class="hljs-comment"># hello world</span><br>f.close()<br><br><span class="hljs-comment"># f.readlines()，以列表的形式读取文件中的所有行</span><br><span class="hljs-comment"># text.txt 文本内容如下：</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">hello world</span><br><span class="hljs-string">hello python</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;text.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>content = f.readlines()<br><span class="hljs-built_in">print</span>(content)  <span class="hljs-comment"># [&#x27;hello world\n&#x27;, &#x27;hello python&#x27;]</span><br>f.close()<br><br><span class="hljs-comment"># f.readline()，从文件中读取一行，换行符（\n）留在字符串的末尾，中间空白行是 \n </span><br><span class="hljs-comment"># text.txt 文本内容如下：</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">hello world</span><br><span class="hljs-string"></span><br><span class="hljs-string">hello python</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;text.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>content = f.readline()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;第一行<span class="hljs-subst">&#123;content!r&#125;</span>&quot;</span>)  <span class="hljs-comment"># 第一行&#x27;hello world\n&#x27;</span><br>content = f.readline()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;第二行<span class="hljs-subst">&#123;content!r&#125;</span>&quot;</span>)  <span class="hljs-comment"># 第二行&#x27;\n&#x27;</span><br>content = f.readline()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;第三行<span class="hljs-subst">&#123;content!r&#125;</span>&quot;</span>)  <span class="hljs-comment"># 第三行&#x27;hello python&#x27;</span><br>content = f.readline()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;第四行<span class="hljs-subst">&#123;content!r&#125;</span>&quot;</span>)  <span class="hljs-comment"># 第四行&#x27;&#x27;，此时文件一共三行，已读完，并不报错，输出空白字符</span><br>f.close()<br></code></pre></td></tr></table></figure><h4 id="文件的写"><a href="#文件的写" class="headerlink" title="文件的写"></a>文件的写</h4><ul><li>关于文件写四个模式</li><li><code>w</code>，打开一个文件只用于写入。如果文件已存在则先清空后写入，如果没有文件则创建文件</li><li><code>wb</code>，以二进制格式打开一个文件只用于写入。</li><li><code>w+</code>，打开一个文件用于读写，巴拉巴拉</li><li><code>wb+</code>，以二进制格式打开一个文件用于读写，巴拉巴拉</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># f.write(string) 会把 string 的内容写入到文件中，并返回写入的字符数</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;text1.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>f.write(<span class="hljs-string">&quot;hello world&quot;</span>)  <span class="hljs-comment"># 将字符串写入文件中</span><br>f.close()<br><br><span class="hljs-comment"># text1.txt 文本内容：</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">hello world</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="文件的追加"><a href="#文件的追加" class="headerlink" title="文件的追加"></a>文件的追加</h4><ul><li>关于文件写四个模式</li><li><code>a</code>，打开一个文件用于追加。如果文件存在，新内容将写在文件已有内容之后。文件不存在则创建新文件进行写入。</li><li><code>ab</code>，<code>a+</code>，<code>ab+</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;text2.txt&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>, mode=<span class="hljs-string">&quot;a&quot;</span>)<br>f.write(<span class="hljs-string">&quot;我是第一句&quot;</span>)<br>f.close()<br><br><span class="hljs-comment"># text1.txt 文本内容：</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">我是第一句</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># f.tell() 返回一个整数，给出文件对象在文件中的当前位置，表示为二进制模式下时从文件开始的字节数，以及文本模式下的意义不明的数字</span><br><span class="hljs-comment"># text.txt 文本内容：</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">hello world</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;text.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(f.tell())  <span class="hljs-comment"># 0</span><br>content = f.read(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(content)  <span class="hljs-comment"># hello</span><br><span class="hljs-built_in">print</span>(f.tell())  <span class="hljs-comment"># 5</span><br>f.close()<br><br><span class="hljs-comment"># f.seek(offset, whence)，通过向一个参考点添加 offset 来计算位置；参考点由 whence 参数指定。 whence 的 0 值表示从文件开头起算，1 表示使用当前文件位置，2 表示使用文件末尾作为参考点</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;text.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(f.tell())  <span class="hljs-comment"># 0</span><br>f.seek(<span class="hljs-number">6</span>)<br>content = f.read()<br><span class="hljs-built_in">print</span>(content)  <span class="hljs-comment"># world</span><br><span class="hljs-built_in">print</span>(f.tell())  <span class="hljs-comment"># 11</span><br>f.close()<br></code></pre></td></tr></table></figure><h4 id="with"><a href="#with" class="headerlink" title="with"></a>with</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># with open(filename, mode, encoding) as f，打开文件不再需要 f.close，with 会自动处理</span><br><span class="hljs-comment"># 不设置读写模式，默认为 r 模式打开文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;text.txt&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> result:<br>    <span class="hljs-built_in">print</span>(result.read())<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">hello world</span><br><span class="hljs-string"></span><br><span class="hljs-string">hello python</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Python-类与对象"><a href="#Python-类与对象" class="headerlink" title="Python 类与对象"></a>Python 类与对象</h2><ol><li>类是对一系列具有相同<strong>特征</strong>和<strong>行为</strong>的事物的统称，是一个抽象概念，特征即属性，行为即方法</li><li>对象是类的一个实例，先有类，后有对象</li><li>类名遵循大驼峰命名如：<code>HelloWorld</code></li><li>属性和方法可以在类中指定也可以动态添加</li><li>面向对象的三个特点：封装、继承、多态</li></ol><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">class 类名:</span><br><span class="hljs-string">    代码</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># self 指的是调用该函数的对象</span><br><span class="hljs-comment"># 定义一个动物类，拥有 name 属性，eat 方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    name = <span class="hljs-literal">None</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> 正在吃...&quot;</span>)<br><br><span class="hljs-comment"># 实例化一个动物：猫，获取属性通过 对象名.属性名</span><br>cat = Animal()  <span class="hljs-comment"># 获得一个 Animal 的实例，拥有 name 属性，和 eat 方法</span><br>cat.name = <span class="hljs-string">&quot;猫&quot;</span>  <span class="hljs-comment"># 指定 cat 的 name 属性的值为猫</span><br><span class="hljs-built_in">print</span>(cat.name)  <span class="hljs-comment"># 获取 cat 的 name 属性的值 # 猫</span><br>cat.eat()  <span class="hljs-comment"># 调用 cat 的 eat 方法</span><br><span class="hljs-comment">#  猫 正在吃...</span><br></code></pre></td></tr></table></figure><h3 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h3><h4 id="init-方法"><a href="#init-方法" class="headerlink" title="init 方法"></a>init 方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># __init__ 为初始化方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        self.name = name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> 正在吃...&quot;</span>)<br><br><br>cat = Animal(<span class="hljs-string">&quot;猫&quot;</span>)  <span class="hljs-comment"># 传入 name 参数，用于初始化一个猫的实例</span><br><span class="hljs-built_in">print</span>(cat)  <span class="hljs-comment"># &lt;__main__.Animal object at 0x0000028581CED688&gt;</span><br>cat.eat()  <span class="hljs-comment"># 猫 正在吃...</span><br></code></pre></td></tr></table></figure><h4 id="str-方法"><a href="#str-方法" class="headerlink" title="str 方法"></a>str 方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 当 print 对象的时候，默认打印的是对象的内存地址，定义 __str__ 方法，再次打印对象则输出的是 __str__ 方法的返回值</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        self.name = name<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;这是一只<span class="hljs-subst">&#123;self.name&#125;</span>&quot;</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> 正在吃...&quot;</span>)<br>    <br>    <br><br>dog = Animal(<span class="hljs-string">&quot;狗&quot;</span>)  <span class="hljs-comment"># 传入 name 参数，用于初始化一个狗的实例</span><br><span class="hljs-built_in">print</span>(dog)  <span class="hljs-comment"># 这是一只狗</span><br>dog.eat()  <span class="hljs-comment"># 狗 正在吃...</span><br></code></pre></td></tr></table></figure><h4 id="del-方法"><a href="#del-方法" class="headerlink" title="del 方法"></a>del 方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 当删除对象的时候，python 解释器会默认调用 __del__ 方法（析构方法）</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        self.name = name<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;这是一只<span class="hljs-subst">&#123;self.name&#125;</span>&quot;</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> 正在吃...&quot;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> 死了&quot;</span>)<br>    <br><br>dog = Animal(<span class="hljs-string">&quot;狗&quot;</span>)  <span class="hljs-comment"># 传入 name 参数，用于初始化一个狗的实例</span><br><span class="hljs-built_in">print</span>(dog)  <span class="hljs-comment"># 这是一只狗</span><br>dog.eat()  <span class="hljs-comment"># 狗 正在吃...</span><br><span class="hljs-comment">#  狗 死了  # 程序结束，对象删除，所以调用了__del__方法，系统收回内存</span><br></code></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ol><li>所有类默认继承 object 类 </li><li>子类继承父类的所有属性和方法</li><li>子类可以重写父类方法</li><li>多继承，一个子类可以有多个父类</li></ol><h4 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.num = <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_num</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;我的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">pass</span>  <span class="hljs-comment"># pass用来代码占位，没有任何实际意义</span><br><br><br>b = B()  <span class="hljs-comment"># 创建 B 类的一个实例对象</span><br><span class="hljs-built_in">print</span>(b.num)  <span class="hljs-comment"># 1 # 打印 b 实例的 num 属性的值，找不到去父类找</span><br>b.print_num()  <span class="hljs-comment"># 我的数字是：1 # 调用 b 实例的 print_num 方法，找不到去父类找</span><br></code></pre></td></tr></table></figure><h4 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.num = <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_num</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;A的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_num</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;B的数字是：2&quot;</span>)<br><br><br>b = B()<br>b.print_num()  <span class="hljs-comment"># B的数字是：2</span><br></code></pre></td></tr></table></figure><h4 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.num = <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_num</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;A的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.num = <span class="hljs-number">2</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_num</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;B的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>(B, A):<br>    <span class="hljs-keyword">pass</span><br>    <br><br><br>c = C()  <span class="hljs-comment"># 创建 C 类的一个实例对象</span><br><span class="hljs-built_in">print</span>(c.num)  <span class="hljs-comment"># 2 # 打印 c 实例的 num 属性的值，找不到去父类找</span><br>c.print_num()  <span class="hljs-comment"># B的数字是：2 # 调用 c 实例的 print_num 方法，找不到去父类找</span><br><br><span class="hljs-comment"># __mro__()方法获取继承顺序，即子类未找到属性或方法向上查找父类的顺序</span><br><span class="hljs-built_in">print</span>(C.__mro__)  <br><span class="hljs-comment"># (&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span><br><span class="hljs-comment"># 如打印顺序可知，C 找不到的话，找 B，再 A，最后 object类</span><br></code></pre></td></tr></table></figure><h4 id="多层继承"><a href="#多层继承" class="headerlink" title="多层继承"></a>多层继承</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.num = <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_num</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;A的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.num = <span class="hljs-number">2</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_num</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;B的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>(B, A):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span>(<span class="hljs-title class_ inherited__">C</span>):<br>    <span class="hljs-keyword">pass</span><br><br><br>d = D()<br>d.print_num()  <span class="hljs-comment"># B的数字是：2</span><br><span class="hljs-built_in">print</span>(D.__mro__)<br><span class="hljs-comment"># (&lt;class &#x27;__main__.D&#x27;&gt;, &lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span><br></code></pre></td></tr></table></figure><h4 id="super"><a href="#super" class="headerlink" title="super()"></a>super()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 子类调用父类的方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.num = <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_num</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;A的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_num</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(B, self).print_num()  <span class="hljs-comment"># A的数字是：1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;B的数字是：2&quot;</span>)<br><br><br>b = B()<br>b.print_num()  <span class="hljs-comment"># B的数字是：2</span><br></code></pre></td></tr></table></figure><h4 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置属性和方法，不继承给子类，在属性和方法名前加 __（双下划钱）</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.num = <span class="hljs-number">1</span><br>        self.__score = <span class="hljs-number">100</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_num</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;A的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(B, self).__init__()  <span class="hljs-comment"># 继承A类的初始化方法</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_num</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;B的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br><br>b = B()<br><span class="hljs-built_in">print</span>(b.num)  <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(b.__score)  <span class="hljs-comment"># AttributeError: &#x27;B&#x27; object has no attribute &#x27;__score&#x27;</span><br><br><br><span class="hljs-comment"># 修改私有属性，get，set</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.num = <span class="hljs-number">1</span><br>        self.__score = <span class="hljs-number">100</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_num</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;A的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_score</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__score<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_score</span>(<span class="hljs-params">self, score</span>):<br>        self.__score = score<br><br>a = A()<br><span class="hljs-comment"># print(a.__score)</span><br><span class="hljs-built_in">print</span>(a.get_score())  <span class="hljs-comment"># 100</span><br>a.set_score(<span class="hljs-number">1000</span>)<br><span class="hljs-built_in">print</span>(a.get_score())  <span class="hljs-comment"># 1000</span><br></code></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ol><li>多态是指一类事物有多种形态</li><li>子类重写父类方法，调用不同子类对象的相同父类方法，可以产生不同的执行结果</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;动物在叫，人坏掉&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猫在叫，人坏掉&quot;</span>)<br>    <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;狗在叫，人坏掉&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work_with_pet</span>(<span class="hljs-params">self, cls</span>):<br>        cls.work()<br><br><br>cat = Cat()<br>dog = Dog()<br>person = Person()<br>person.work_with_pet(cat)  <span class="hljs-comment"># 猫在叫，人坏掉</span><br>person.work_with_pet(dog)  <span class="hljs-comment"># 狗在叫，人坏掉</span><br></code></pre></td></tr></table></figure><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><ul><li>当方法中需要使用类对象（如访问私有类属性等），定义类方法</li><li>类方法一般和类属性配合使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># @classmethod，第一个参数必须是类对象，一般为 cls</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    __name = <span class="hljs-string">&quot;动物&quot;</span><br>    <br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_name</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-keyword">return</span> cls.__name<br><br><br>a = Animal()<br><span class="hljs-built_in">print</span>(a.get_name())  <span class="hljs-comment"># 动物</span><br></code></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><ul><li>静态方法既不需要传递类对象也不需要传入实例对象</li><li>静态方法也能够通过实例对象和类对象去访问</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># @staticmethod</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;吃就完事了&quot;</span>)<br><br>a = Animal()<br>a.eat()  <span class="hljs-comment"># 吃就完事了</span><br></code></pre></td></tr></table></figure><h2 id="Python-错误和异常"><a href="#Python-错误和异常" class="headerlink" title="Python 错误和异常"></a>Python 错误和异常</h2><h3 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h3><p>语法错误又称解析错误，可能是你在学习Python 时最容易遇到的错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 符号或者缩进语法错误等等</span><br></code></pre></td></tr></table></figure><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>即使语句或表达式在语法上是正确的，但在尝试执行时，它仍可能会引发错误。 在执行时检测到的错误被称为 异常，异常不一定会导致严重后果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    可能出现异常的代码<br><span class="hljs-keyword">except</span> 异常类型:<br>    出现异常之后执行的代码<br><br><span class="hljs-comment"># r 模式打开文件，文件不存在会抛出异常</span><br><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;text.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-keyword">except</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;text.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="捕获指定异常"><a href="#捕获指定异常" class="headerlink" title="捕获指定异常"></a>捕获指定异常</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;12345&quot;</span>)<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;123.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)  <span class="hljs-comment"># 只读模式打开，未找到文件，抛出异常</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1111&quot;</span>)  <span class="hljs-comment"># 上面异常，下面代码将不再执行</span><br>    <span class="hljs-built_in">print</span>(num)    <span class="hljs-comment"># 未定义 num，会抛出 NameError 异常错误信息</span><br><span class="hljs-keyword">except</span> (NameError, IOError) <span class="hljs-keyword">as</span> result: <span class="hljs-comment"># 将错误信息赋值给result</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;产生错误了&quot;</span>)<br>    <span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">12345</span><br><span class="hljs-string">产生错误了</span><br><span class="hljs-string">[Errno 2] No such file or directory: &#x27;123.txt&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="捕获所有异常"><a href="#捕获所有异常" class="headerlink" title="捕获所有异常"></a>捕获所有异常</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;12345&quot;</span>)<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;123.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1111&quot;</span>)<br>    <span class="hljs-built_in">print</span>(num)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> result: <span class="hljs-comment"># 将错误信息赋值给result</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;产生错误了&quot;</span>)<br>    <span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">12345</span><br><span class="hljs-string">产生错误了</span><br><span class="hljs-string">[Errno 2] No such file or directory: &#x27;123.txt&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="else-语句"><a href="#else-语句" class="headerlink" title="else 语句"></a>else 语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 没有异常发生执行的代码，用 else 语句</span><br></code></pre></td></tr></table></figure><h4 id="finally-语句"><a href="#finally-语句" class="headerlink" title="finally 语句"></a>finally 语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 无论异常是否发生，一定都会执行的代码，用 finally 语句，常用于资源的清理</span><br></code></pre></td></tr></table></figure><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PhoneNumError</span>(<span class="hljs-title class_ inherited__">Exception</span>):<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, phone</span>):<br>        self.phone = phone<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.phone&#125;</span>，手机位数错误，应为11位&quot;</span><br><br><br><span class="hljs-keyword">try</span>:<br>    phone_num = <span class="hljs-string">&quot;1029321212&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(phone_num) &lt; <span class="hljs-number">11</span>:<br>        <span class="hljs-keyword">raise</span> PhoneNumError(phone_num)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e)  <span class="hljs-comment"># 1029321212，手机位数错误，应为11位</span><br></code></pre></td></tr></table></figure><h2 id="Python-模块与包"><a href="#Python-模块与包" class="headerlink" title="Python 模块与包"></a>Python 模块与包</h2><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>模块是一个包含Python定义和语句的文件。文件名就是模块名后跟文件后缀 <code>.py</code></p><p>自定义模块名尽量不要与已有模块同名</p><h4 id="模块的导入"><a href="#模块的导入" class="headerlink" title="模块的导入"></a>模块的导入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> 模块名<br><span class="hljs-keyword">import</span> 模块名<span class="hljs-number">1</span>,模块名<span class="hljs-number">2</span>       <span class="hljs-comment"># （不推荐）</span><br><span class="hljs-keyword">from</span> 模块名 <span class="hljs-keyword">import</span> 模块内函数<br><span class="hljs-keyword">from</span> 模块名 <span class="hljs-keyword">import</span> *        <span class="hljs-comment"># （不推荐）</span><br><span class="hljs-keyword">import</span> 模块名 <span class="hljs-keyword">as</span> 别名<br><span class="hljs-keyword">from</span> 模块名 <span class="hljs-keyword">import</span> 模块内函数 <span class="hljs-keyword">as</span> 别名<br></code></pre></td></tr></table></figure><h4 id="模块搜索顺序"><a href="#模块搜索顺序" class="headerlink" title="模块搜索顺序"></a>模块搜索顺序</h4><ol><li>当前目录</li><li>python 环境变量默认目录下</li><li>python 默认路径</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># __all__，设置可导出的函数</span><br><span class="hljs-comment"># 当导出模块后，只能使用__all__ 列表中的函数</span><br></code></pre></td></tr></table></figure><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>包是一种通过用“带点号的模块名”来构造 Python 模块命名空间的方法，将有联系的模块组织到一个文件夹，且含有 <code>__init__</code> 文件</p><h4 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> 包名.模块名<br><span class="hljs-keyword">from</span> 包名 <span class="hljs-keyword">import</span> 模块名<br><span class="hljs-comment"># 必须在__init__文件中，添加__all__ = []，控制允许导入的模块列表</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux学习笔记</title>
    <link href="/2021/01/18/LinuxLearning/"/>
    <url>/2021/01/18/LinuxLearning/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Linux 运维学习，跟着视频教程走走流程，学习了解一下 Linux</p>          </div> <span id="more"></span><h2 id="学习环境"><a href="#学习环境" class="headerlink" title="学习环境"></a>学习环境</h2><ol><li><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.0.0-16894299.exe">VMware-workstation-full-16.0.0-16894299.exe</a></li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/centos/7/isos/x86_64/CentOS-7-x86_64-Everything-2009.iso">CentOS-7-x86_64-Everything-2009.iso</a></li><li><a href="https://cloud.189.cn/t/U7vURjZfmiMr">Xftp-7.0.0054p.exe</a></li><li><a href="https://cloud.189.cn/t/bqIfei3eeyui">Xshell-7.0.0054p.exe</a></li><li><a href="https://www.bilibili.com/video/BV12E411K79p">马哥Linux高端运维顶级云计算就业课程网络班37期</a></li></ol><h3 id="Xshell-连接-Centos7"><a href="#Xshell-连接-Centos7" class="headerlink" title="Xshell 连接 Centos7"></a>Xshell 连接 Centos7</h3><p>首先在 Linux 虚拟机打开终端，查看 ip 以及将防火墙关闭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1、查看系统是否监听于tcp协议的22号端口</span><br>ss -tnl<br><br><span class="hljs-comment"># 2、查看ip地址</span><br>ifconfig<br><span class="hljs-comment"># ifconfig command not found，则安装net-tools</span><br>yum install net-tools<br><span class="hljs-comment"># ip addr list同样可以查看ip地址</span><br>ip addr list<br><br><span class="hljs-comment"># 3、确保防火墙处于关闭状态</span><br>iptables -L -n<br>systemctl <span class="hljs-built_in">disable</span> firewalld.service<br>systemctl stop firewalld.service<br></code></pre></td></tr></table></figure><p>然后打开 xshell 连接 Linux 虚拟机</p><h2 id="Linux系统了解"><a href="#Linux系统了解" class="headerlink" title="Linux系统了解"></a>Linux系统了解</h2><h3 id="终端设备：terminal"><a href="#终端设备：terminal" class="headerlink" title="终端设备：terminal"></a>终端设备：terminal</h3><ul><li>物理终端，也称控制台：console</li><li>虚拟终端：tty</li><li>图形终端</li><li>串行终端：ttyS</li><li>伪终端：pty</li></ul><h3 id="命令行接口：CLI"><a href="#命令行接口：CLI" class="headerlink" title="命令行接口：CLI"></a>命令行接口：CLI</h3><p><code>[root@localhost ~]# </code></p><ul><li>root：当前用户名称</li><li>localhost：当前主机名</li><li>~：用户当前所在目录（current directory），也称工作目录（working directory）</li><li>#：命令提示符，# 为管理员账号，$ 为普通用户</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看终端设备</span><br><span class="hljs-built_in">tty</span><br><br><span class="hljs-comment"># 查看接口程序</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$SHELL</span><br></code></pre></td></tr></table></figure><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p><code>/dev/pts/0</code></p><ul><li>最左侧 &#x2F; 表示根目录</li><li>其余 &#x2F; 表示为文件分隔符，Linux 文件分隔符为 &#x2F; ，Windows 文件分隔符为 \ </li><li>文件名支持使用除 &#x2F; 以外的任意字符，最长不能超过 255 个字符</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 获取文件路径的基名basename</span><br><span class="hljs-built_in">basename</span> /etc/sysconfig/network-scripts/ifcfg-ens33<br>ifcfg-ens33<br><br><span class="hljs-comment"># 获取文件路径的目录名dirname</span><br><span class="hljs-built_in">dirname</span> /etc/sysconfig/network-scripts/ifcfg-ens33<br>/etc/sysconfig/network-scripts<br></code></pre></td></tr></table></figure><h2 id="Linux基础知识"><a href="#Linux基础知识" class="headerlink" title="Linux基础知识"></a>Linux基础知识</h2><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><p>语法通用格式：<code># COMMAND OPTIONS ARGUMENTS</code></p><h4 id="COMMAND"><a href="#COMMAND" class="headerlink" title="COMMAND"></a>COMMAND</h4><p>发起一个命令，请求内核将某个二进制程序运行为一个进程，命令本身就是一个可执行的程序文件，二进制格式的文件（ELF 格式），有可能调用共享库文件。命令分为两种，一种是由 shell 程序自带的命令，成为内置命令，另一种则是独立的可执行文件，文件名即为命令名，称为外部命令。shell 程序是独特的程序，负责解析用户提供的命令，查询通过环境变量，从左到右依次查看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看文件信息</span><br>file /bin/ls<br><br><span class="hljs-comment"># 查看环境变量</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment"># 查看命令类型</span><br><span class="hljs-built_in">type</span> COMMAND<br></code></pre></td></tr></table></figure><h4 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h4><p>用来指定命令的运行特性，选项分为短选项和长选项两种，短选项如<code>-l</code> 、<code>-d</code>，有些命令选项没有<code>-</code> ，多数可合并，<code>-l -d</code>可合并为<code>-ld</code> ，长选项如<code>--help</code>，长选项不能合并，有些选项可以带参数称为选项参数。</p><h4 id="ARGUMENTS"><a href="#ARGUMENTS" class="headerlink" title="ARGUMENTS"></a>ARGUMENTS</h4><p>表示命令的作用对象，即命令对什么生效，多个命令参数之间以空白字符分隔，如<code>ls -ld /var /etc</code>。</p><h3 id="获取命令帮助"><a href="#获取命令帮助" class="headerlink" title="获取命令帮助"></a>获取命令帮助</h3><h4 id="内部命令"><a href="#内部命令" class="headerlink" title="内部命令"></a>内部命令</h4><p><code>help COMMAND</code></p><h4 id="外部命令"><a href="#外部命令" class="headerlink" title="外部命令"></a>外部命令</h4><ul><li>命令自带简要格式的使用帮助，<code>COMMAND --help</code></li><li>使用手册获取帮助，<code>man COMMAND</code>，使用手册位置：<code>/usr/share/man</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用各章节的命令不同</span><br>man1：用户命令；<br>man2：系统调用；<br>man3：C库调用；<br>man4：设备文件及特殊文件；<br>man5：文件格式；（配置文件格式）<br>man6：游戏使用帮助；<br>man7：杂项；<br>man8：管理工具及守护进行；<br><br><span class="hljs-comment"># 查看COMMAND在哪些手册出现过</span><br>whatis COMMAND<br><br><span class="hljs-comment"># 手动更新查询数据库</span><br>makewhatis<br></code></pre></td></tr></table></figure><ul><li>阅读手册快捷键<ul><li><code>空格</code>：先后翻一屏</li><li><code>b</code>：向前翻一屏</li><li><code>Ctrl+d</code>：向后翻半屏</li><li><code>Ctrl+u</code>：向前翻半屏</li><li><code>回车</code>：向后翻一行</li><li><code>k</code>：向前翻一行</li><li><code>G</code>：跳转至最后一行</li><li><code>g</code>：跳转到第一行</li><li><code>nG</code>：跳转至第n行</li><li><code>/keyword</code>：从前往后找，不区分大小写，<code>n</code>：往后翻</li><li><code>?keyword</code>：从后往前找，<code>n</code>：往前翻，<code>N</code>：往后翻</li><li><code>-M /PATH/TO/SOMEDIR</code>：到指定目录下查找命令手册并打开之</li><li><code>q</code>：退出手册</li></ul></li></ul><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># printing working directory</span><br>[root@localhost ~]<span class="hljs-comment"># pwd</span><br>/root<br></code></pre></td></tr></table></figure><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># change directory</span><br><br><span class="hljs-comment"># 切换回家目录，bash中，~表示家目录</span><br><span class="hljs-built_in">cd</span><br><span class="hljs-built_in">cd</span> ~<br><br><span class="hljs-comment"># 切换回上一次所在目录</span><br><span class="hljs-built_in">cd</span> -<br><br><span class="hljs-comment"># 相关环境变量，$PWD $OLDPWD，.代表当前目录，..代表上一级目录</span><br>[root@localhost ~]<span class="hljs-comment"># cd /etc/sysconfig</span><br>[root@localhost sysconfig]<span class="hljs-comment"># cd .</span><br>[root@localhost sysconfig]<span class="hljs-comment"># cd ..</span><br>[root@localhost etc]<span class="hljs-comment"># cd -</span><br>/etc/sysconfig<br></code></pre></td></tr></table></figure><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><p>文件详细属性：<code>drwxr-xr-x. 2 root   root      204 1月  18 11:20 anaconda</code></p><p><code>d</code>：表示文件类型，<code>-</code>，<code>d</code>，<code>b</code>，<code>c</code>，<code>l</code>，<code>s</code>，<code>p</code></p><p><code>rwxr-xr-x</code>：权限信息</p><p><code>rwx</code>：文件属主的权限</p><p><code>r-x</code>：文件数组的权限</p><p><code>r-x</code>：其他用户（非属主、属组）的权限</p><p><code>.</code>：表示该文件为隐藏文件</p><p><code>2</code>：数字表示文件被硬链接的次数</p><p><code>root</code>：文件的属主</p><p><code>root</code>：文件的属组</p><p><code>204 </code>：表示文件的大小，单位为字节</p><p><code>1月  18 11:20</code>：文件最近一次被修改的时间</p><p><code>anaconda</code>：文件名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># list，列出指定目录下的内容，ls [OPTION]... [FILE]...</span><br><span class="hljs-comment"># -a：显示所有文件，包括隐藏文件；</span><br>[root@localhost ~]<span class="hljs-comment"># ls -a /var/log</span><br>.         boot.log-20210119  firewalld           rhsm      vmware-network.1.log    vmware-vmtoolsd-root.log<br>..        btmp               grubby_prune_debug  secure    vmware-network.2.log    wtmp<br>anaconda  chrony             lastlog             spooler   vmware-network.log      yum.log<br>audit     cron               maillog             tallylog  vmware-vgauthsvc.log.0<br>boot.log  dmesg              messages            tuned     vmware-vmsvc-root.log<br><br><span class="hljs-comment"># -A:显示除.和..之外的所有文件</span><br>[root@localhost ~]<span class="hljs-comment"># ls -A /var/log</span><br>anaconda           btmp    firewalld           messages  tallylog              vmware-network.log        wtmp<br>audit              chrony  grubby_prune_debug  rhsm      tuned                 vmware-vgauthsvc.log.0    yum.log<br>boot.log           cron    lastlog             secure    vmware-network.1.log  vmware-vmsvc-root.log<br>boot.log-20210119  dmesg   maillog             spooler   vmware-network.2.log  vmware-vmtoolsd-root.log<br><br><span class="hljs-comment"># -l,--long：长格式列表，即显示文件的详细属性</span><br>[root@localhost ~]<span class="hljs-comment"># ls -l /var/log</span><br>总用量 1040<br>drwxr-xr-x. 2 root   root      204 1月  18 11:20 anaconda<br>drwx------. 2 root   root       23 1月  18 11:21 audit<br>-rw-------. 1 root   root        0 1月  19 17:46 boot.log<br><br><br><span class="hljs-comment"># -h,--human-readable：对文件大小单位进行换算显示，换算之后并不精确</span><br>[root@localhost ~]<span class="hljs-comment"># ls -lh /var/log</span><br>总用量 1.1M<br>drwxr-xr-x. 2 root   root    204 1月  18 11:20 anaconda<br>drwx------. 2 root   root     23 1月  18 11:21 audit<br>-rw-------. 1 root   root      0 1月  19 17:46 boot.log<br><br><br><span class="hljs-comment"># -d：查看目录自身而非其内部的文件列表，通常与l连用</span><br>[root@localhost ~]<span class="hljs-comment"># ls -ld /var/log</span><br>drwxr-xr-x. 7 root root 4096 1月  19 17:46 /var/log<br><br><span class="hljs-comment"># -r：revrese，逆序显示</span><br><span class="hljs-comment"># -R：recursive，递归显示</span><br></code></pre></td></tr></table></figure><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># cat concatenate，文本文件查看工具，[OPTION]... [FILE]...</span><br><span class="hljs-comment"># -n：显示文本行编号</span><br>[root@localhost ~]<span class="hljs-comment"># cat -n /etc/issue</span><br>     1\S<br>     2Kernel \r on an \m<br>     3<br><br><span class="hljs-comment"># -E：显示行结束符</span><br>[root@localhost ~]<span class="hljs-comment"># cat -E /etc/issue</span><br>\S$<br>Kernel \r on an \m$<br>$<br></code></pre></td></tr></table></figure><h4 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 与cat反过来，逆序打印文件内容</span><br><br>[root@localhost ~]<span class="hljs-comment"># cat /etc/passwd</span><br>root:x:0:0:root:/root:/bin/bash<br>bin:x:1:1:bin:/bin:/sbin/nologin<br>daemon:x:2:2:daemon:/sbin:/sbin/nologin<br>adm:x:3:4:adm:/var/adm:/sbin/nologin<br>lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br><span class="hljs-built_in">sync</span>:x:5:0:<span class="hljs-built_in">sync</span>:/sbin:/bin/sync<br>shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown<br>halt:x:7:0:halt:/sbin:/sbin/halt<br>mail:x:8:12:mail:/var/spool/mail:/sbin/nologin<br>operator:x:11:0:operator:/root:/sbin/nologin<br>games:x:12:100:games:/usr/games:/sbin/nologin<br>ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin<br>nobody:x:99:99:Nobody:/:/sbin/nologin<br>systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin<br>dbus:x:81:81:System message bus:/:/sbin/nologin<br>polkitd:x:999:998:User <span class="hljs-keyword">for</span> polkitd:/:/sbin/nologin<br>sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin<br>postfix:x:89:89::/var/spool/postfix:/sbin/nologin<br>chrony:x:998:996::/var/lib/chrony:/sbin/nologin<br><br><br>[root@localhost ~]<span class="hljs-comment"># tac /etc/passwd</span><br>chrony:x:998:996::/var/lib/chrony:/sbin/nologin<br>postfix:x:89:89::/var/spool/postfix:/sbin/nologin<br>sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin<br>polkitd:x:999:998:User <span class="hljs-keyword">for</span> polkitd:/:/sbin/nologin<br>dbus:x:81:81:System message bus:/:/sbin/nologin<br>systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin<br>nobody:x:99:99:Nobody:/:/sbin/nologin<br>ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin<br>games:x:12:100:games:/usr/games:/sbin/nologin<br>operator:x:11:0:operator:/root:/sbin/nologin<br>mail:x:8:12:mail:/var/spool/mail:/sbin/nologin<br>halt:x:7:0:halt:/sbin:/sbin/halt<br>shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown<br><span class="hljs-built_in">sync</span>:x:5:0:<span class="hljs-built_in">sync</span>:/sbin:/bin/sync<br>lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br>adm:x:3:4:adm:/var/adm:/sbin/nologin<br>daemon:x:2:2:daemon:/sbin:/sbin/nologin<br>bin:x:1:1:bin:/bin:/sbin/nologin<br>root:x:0:0:root:/root:/bin/bash<br></code></pre></td></tr></table></figure><h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看文件内容类型</span><br>[root@localhost ~]<span class="hljs-comment"># file /etc/fstab</span><br>/etc/fstab: ASCII text<br></code></pre></td></tr></table></figure><h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 回显</span><br>[root@localhost ~]<span class="hljs-comment"># echo &#x27;hello world&#x27;</span><br>hello world<br><br><span class="hljs-comment"># -n：不自动进行换行</span><br>[root@localhost ~]<span class="hljs-comment"># echo -n &#x27;hello world&#x27;</span><br>hello world[root@localhost ~]<span class="hljs-comment"># </span><br><br><span class="hljs-comment"># -e：让转义符生效</span><br>[root@localhost ~]<span class="hljs-comment"># echo -e &#x27;hello \n world&#x27;</span><br>hello <br> world<br><br><span class="hljs-comment"># 单引号：强引用，变量引用不执行替换</span><br>[root@localhost ~]<span class="hljs-comment"># echo &#x27;$SHELL&#x27;</span><br><span class="hljs-variable">$SHELL</span><br><br><span class="hljs-comment"># 双引号：弱引用，变量引用会被替换</span><br>[root@localhost ~]<span class="hljs-comment"># echo &quot;$SHELL&quot;</span><br>/bin/bash<br><br><span class="hljs-comment"># 变量引用的正规符号：$&#123;name&#125;</span><br>[root@localhost ~]<span class="hljs-comment"># echo $&#123;SHELL&#125;</span><br>/bin/bash<br></code></pre></td></tr></table></figure><h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 关机或重启命令，shutdown [OPTIONS...] [TIME] [WALL...]</span><br><br><span class="hljs-comment"># OPTIONS: -h：关机，-r：重启，-c：取消操作</span><br><span class="hljs-comment"># TIME：now，hh:mm，+m</span><br><span class="hljs-comment"># WALL：即为广播发送的消息</span><br><br><span class="hljs-comment"># 5分钟后重启</span><br>[root@localhost ~]<span class="hljs-comment"># shutdown -r +5</span><br>Shutdown scheduled <span class="hljs-keyword">for</span> 二 2021-01-19 22:26:29 CST, use <span class="hljs-string">&#x27;shutdown -c&#x27;</span> to cancel.<br>[root@localhost ~]<span class="hljs-comment"># </span><br>Broadcast message from root@localhost.localdomain (Tue 2021-01-19 22:21:29 CST):<br><br>The system is going down <span class="hljs-keyword">for</span> reboot at Tue 2021-01-19 22:26:29 CST!<br><br><span class="hljs-comment"># 取消计划重启操作</span><br>[root@localhost ~]<span class="hljs-comment"># shutdown -c</span><br><br>Broadcast message from root@localhost.localdomain (Tue 2021-01-19 22:22:04 CST):<br><br>The system shutdown has been cancelled at Tue 2021-01-19 22:23:04 CST!<br><br><span class="hljs-comment"># 广播&quot;Hello Everyone，I wanna reboot at 10m later&quot;，并设置10分钟后重启</span><br>[root@localhost ~]<span class="hljs-comment"># shutdown -r +10 &quot;Hello Everyone，I wanna reboot at 10m later&quot;</span><br>Shutdown scheduled <span class="hljs-keyword">for</span> 二 2021-01-19 22:33:31 CST, use <span class="hljs-string">&#x27;shutdown -c&#x27;</span> to cancel.<br>[root@localhost ~]<span class="hljs-comment"># </span><br>Broadcast message from root@localhost.localdomain (Tue 2021-01-19 22:23:31 CST):<br><br>Hello Everyone，I wanna reboot at 10m later<br>The system is going down <span class="hljs-keyword">for</span> reboot at Tue 2021-01-19 22:33:31 CST!<br><br><span class="hljs-comment"># 关机</span><br>[root@localhost ~]<span class="hljs-comment"># shutdown -h now</span><br>Connection closing...Socket close.<br><br>Connection closed by foreign host.<br><br>Disconnected from remote host(centos7) at 22:24:19.<br><br></code></pre></td></tr></table></figure><h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示系统时间，date [OPTION]... [+FORMAT]</span><br><span class="hljs-comment"># 设置系统时间，date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]</span><br><br><span class="hljs-comment"># 显示当前时间</span><br>[root@localhost ~]<span class="hljs-comment"># date</span><br>2021年 01月 22日 星期五 13:35:27 CST<br><br><span class="hljs-comment"># 时间格式输出</span><br>[root@localhost ~]<span class="hljs-comment"># date +&quot;%Y-%m-%d %H:%M:%S&quot;</span><br>2021-01-22 13:43:32<br>[root@localhost ~]<span class="hljs-comment"># date +%F</span><br>2021-01-22<br>[root@localhost ~]<span class="hljs-comment"># date +%T</span><br>13:37:57<br>[root@localhost ~]<span class="hljs-comment"># date +&quot;%F %T&quot;</span><br>2021-01-22 13:38:57<br>[root@localhost ~]<span class="hljs-comment"># date +%s</span><br>1611294293<br></code></pre></td></tr></table></figure><h4 id="clock，hwclock"><a href="#clock，hwclock" class="headerlink" title="clock，hwclock"></a>clock，hwclock</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示或设置硬件时钟</span><br><span class="hljs-comment"># -s，--hctosys，将系统时间改为硬件时间</span><br><span class="hljs-comment"># -w，--systohc，将硬件时间改为系统时间</span><br></code></pre></td></tr></table></figure><h4 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 日历</span><br><span class="hljs-comment"># cal [options] [[[day] month] year]</span><br>[root@localhost ~]<span class="hljs-comment"># cal 1 2021</span><br>      一月 2021     <br>日 一 二 三 四 五 六<br>                1  2<br> 3  4  5  6  7  8  9<br>10 11 12 13 14 15 16<br>17 18 19 20 21 22 23<br>24 25 26 27 28 29 30<br>31<br><br>[root@localhost ~]<span class="hljs-comment"># cal 2021</span><br>                               2021                               <br><br>        一月                   二月                   三月        <br>日 一 二 三 四 五 六   日 一 二 三 四 五 六   日 一 二 三 四 五 六<br>                1  2       1  2  3  4  5  6       1  2  3  4  5  6<br> 3  4  5  6  7  8  9    7  8  9 10 11 12 13    7  8  9 10 11 12 13<br>10 11 12 13 14 15 16   14 15 16 17 18 19 20   14 15 16 17 18 19 20<br>17 18 19 20 21 22 23   21 22 23 24 25 26 27   21 22 23 24 25 26 27<br>24 25 26 27 28 29 30   28                     28 29 30 31<br>31<br>        四月                   五月                   六月        <br>日 一 二 三 四 五 六   日 一 二 三 四 五 六   日 一 二 三 四 五 六<br>             1  2  3                      1          1  2  3  4  5<br> 4  5  6  7  8  9 10    2  3  4  5  6  7  8    6  7  8  9 10 11 12<br>11 12 13 14 15 16 17    9 10 11 12 13 14 15   13 14 15 16 17 18 19<br>18 19 20 21 22 23 24   16 17 18 19 20 21 22   20 21 22 23 24 25 26<br>25 26 27 28 29 30      23 24 25 26 27 28 29   27 28 29 30<br>                       30 31<br>        七月                   八月                   九月        <br>日 一 二 三 四 五 六   日 一 二 三 四 五 六   日 一 二 三 四 五 六<br>             1  2  3    1  2  3  4  5  6  7             1  2  3  4<br> 4  5  6  7  8  9 10    8  9 10 11 12 13 14    5  6  7  8  9 10 11<br>11 12 13 14 15 16 17   15 16 17 18 19 20 21   12 13 14 15 16 17 18<br>18 19 20 21 22 23 24   22 23 24 25 26 27 28   19 20 21 22 23 24 25<br>25 26 27 28 29 30 31   29 30 31               26 27 28 29 30<br><br>        十月                  十一月                 十二月       <br>日 一 二 三 四 五 六   日 一 二 三 四 五 六   日 一 二 三 四 五 六<br>                1  2       1  2  3  4  5  6             1  2  3  4<br> 3  4  5  6  7  8  9    7  8  9 10 11 12 13    5  6  7  8  9 10 11<br>10 11 12 13 14 15 16   14 15 16 17 18 19 20   12 13 14 15 16 17 18<br>17 18 19 20 21 22 23   21 22 23 24 25 26 27   19 20 21 22 23 24 25<br>24 25 26 27 28 29 30   28 29 30               26 27 28 29 30 31<br>31<br><br></code></pre></td></tr></table></figure><h4 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 若使用原命令可用 \COMMAND</span><br><span class="hljs-comment"># 获取所有可用别名的定义</span><br>[root@localhost ~]<span class="hljs-comment"># alias</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">cp</span>=<span class="hljs-string">&#x27;cp -i&#x27;</span><br><span class="hljs-built_in">alias</span> egrep=<span class="hljs-string">&#x27;egrep --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> fgrep=<span class="hljs-string">&#x27;fgrep --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> grep=<span class="hljs-string">&#x27;grep --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> l.=<span class="hljs-string">&#x27;ls -d .* --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> ll=<span class="hljs-string">&#x27;ls -l --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">ls</span>=<span class="hljs-string">&#x27;ls --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">mv</span>=<span class="hljs-string">&#x27;mv -i&#x27;</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">rm</span>=<span class="hljs-string">&#x27;rm -i&#x27;</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">which</span>=<span class="hljs-string">&#x27;alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde&#x27;</span><br><br><span class="hljs-comment"># 设置别名，alias NAME=COMMAND，只对当前 shell 进程有效</span><br><span class="hljs-built_in">alias</span> cls=clean<br><br><span class="hljs-comment"># 取消别名，unalias NAME</span><br><span class="hljs-built_in">unalias</span> cls<br></code></pre></td></tr></table></figure><h4 id="which"><a href="#which" class="headerlink" title="which"></a>which</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># shows the full path of (shell) commands</span><br>[root@localhost ~]<span class="hljs-comment"># which ls</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">ls</span>=<span class="hljs-string">&#x27;ls --color=auto&#x27;</span><br>/usr/bin/ls<br><br><span class="hljs-comment"># 使用which原命令</span><br>[root@localhost ~]<span class="hljs-comment"># \which ls</span><br>/usr/bin/ls<br><br></code></pre></td></tr></table></figure><h4 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># locate the binary, source, and manual page files for a command</span><br>[root@localhost ~]<span class="hljs-comment"># whereis ls</span><br><span class="hljs-built_in">ls</span>: /usr/bin/ls /usr/share/man/man1/ls.1.gz<br><br><span class="hljs-comment"># -b，只查看二进制程序路径</span><br>[root@localhost ~]<span class="hljs-comment"># whereis -b ls</span><br><span class="hljs-built_in">ls</span>: /usr/bin/ls<br><br><span class="hljs-comment"># -m，只查看使用手册文件路径</span><br>[root@localhost ~]<span class="hljs-comment"># whereis -m ls</span><br><span class="hljs-built_in">ls</span>: /usr/share/man/man1/ls.1.gz<br></code></pre></td></tr></table></figure><h4 id="who"><a href="#who" class="headerlink" title="who"></a>who</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># show who is logged on</span><br>[root@localhost ~]<span class="hljs-comment"># who</span><br>root     tty1         2021-01-21 18:05<br>root     pts/0        2021-01-23 14:43 (192.168.1.105)<br>root     pts/1        2021-01-23 15:43 (192.168.1.105)<br><br><span class="hljs-comment"># -b，系统此次启动时间</span><br>[root@localhost ~]<span class="hljs-comment"># who -b</span><br>         系统引导 2021-01-21 18:04<br><br><span class="hljs-comment"># -r，运行级别</span><br>[root@localhost ~]<span class="hljs-comment"># who -r</span><br>         运行级别 3 2021-01-21 18:05<br></code></pre></td></tr></table></figure><h4 id="w"><a href="#w" class="headerlink" title="w"></a>w</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Show who is logged on and what they are doing</span><br>[root@localhost ~]<span class="hljs-comment"># w</span><br> 16:18:47 up 18:58,  3 <span class="hljs-built_in">users</span>,  load average: 0.05, 0.03, 0.05<br>USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT<br>root     tty1                      四18    1:35m  0.03s  0.03s -bash<br>root     pts/0    192.168.1.105    14:43    7.00s  0.06s  0.04s w<br>root     pts/1    192.168.1.105    15:43   23.00s  0.01s  0.00s less -s<br></code></pre></td></tr></table></figure><h3 id="根目录系统"><a href="#根目录系统" class="headerlink" title="根目录系统"></a>根目录系统</h3><h4 id="文件层级结构：FHS"><a href="#文件层级结构：FHS" class="headerlink" title="文件层级结构：FHS"></a>文件层级结构：FHS</h4><p><code>Filesystem Hierarchy Standard</code></p><ul><li><code>/bin</code> ：所有用户可用的基本命令程序文件</li><li><code>/sbin</code>：供系统管理使用的工具程序</li><li><code>/boot</code>：引导加载器必须用到的各静态文件</li><li><code>/dev</code>：存储特殊文件或设备文件</li><li><code>/etc</code>：系统程序的配置文件，只能为静态</li><li><code>/home</code>：普通用户家目录，一般为<code>/home/USERNAME</code></li><li><code>/root</code>：管理员家目录</li><li><code>/lib</code>：为系统启动或根文件系统上的应用程序（&#x2F;bin，&#x2F;sbin等）提供共享库，以及为内核提供内核模块<ul><li><code>./libc.so.*</code>：动态链接的C库</li><li><code>./ld*</code>：运行时链接器&#x2F;加载器</li><li><code>./modules</code>：用于存储内核模块的目录</li></ul></li><li><code>/lib64</code>：64位系统特有的存放64位共享库的路径</li><li><code>/media</code>：便携式设备挂载点，cdrom, floppy等</li><li><code>/mnt</code>：其它文件系统的临时挂载点</li><li><code>/opt</code>：附加应用程序的安装位置（可选路径）</li><li><code>/srv</code>：当前主机为服务提供的数据</li><li><code>/tmp</code>：为产生临时文件的程序提供用于存储临时文件的目录，可供所有用户执行写入操作，有特殊权限</li><li><code>/usr</code>：<code>usr Hierarchy</code>，全局共享的只读数据路径<ul><li><code>./bin、./sbin</code></li><li><code>./lib、./lib64</code></li><li><code>./include</code>：C程序头文件</li><li><code>./share</code>：命令手册页和自带文档等架构特有的文件的存储位置</li><li><code>./local</code>：让系统管理员安装本地应用程序；也通常用于安装第三方程序</li><li><code>./X11R6</code>：X-Window 程序的安装位置</li><li><code>./src</code>：程序源码文件的存储位置</li></ul></li><li><code>/var</code>：存储发生变化的数据的目录<ul><li><code>./cache</code>：Application cache data</li><li><code>./lib</code>：Variable state information</li><li><code>./local</code>：Variable data for &#x2F;usr&#x2F;local</li><li><code>./lock</code>：Lock files</li><li><code>./log</code>：Log files and directories</li><li><code>./opt</code>：Variable data for &#x2F;opt</li><li><code>./run</code>：Data relevant to running processes</li><li><code>./spool</code>：Application spool data</li><li><code>./tmp</code>：Temporary files preserved between system reboots</li></ul><p></p></li><li><code>/proc</code>：基于内存的虚拟文件系统，用于为内核及进程存储其相关信息，它们多为内核参数，例如<code>net.ipv4.ip_forward</code>， 虚拟为<code>net/ipv4/ip_forward</code>，存储于<code>/proc/sys/</code>，因此其完整路径为<code>/proc/sys/net/ipv4/ip_forward</code></li><li><code>/sys</code>：sysfs 虚拟文件系统提供了一种比 proc 更为理想的访问内核数据的途径，其主要作用在于为管理 Linux 设备提供一种统一模型的的接口</li></ul><h4 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h4><ul><li><code>-</code>：常规文件 file</li><li><code>d</code>：directory，目录文件</li><li><code>b</code>：block device，块设备文件，支持以<code>block</code>为单位进行随机访问</li><li><code>c</code>：character device，字符设备文件<ul><li><code>major number</code>：主设备号，用于标识设备类型，进而确定要加载的驱动程序</li><li><code>minor number</code>：次设备号，用于标识同一类型中的不同设备</li></ul></li><li><code>symbolic link</code>：符号链接文件</li><li><code>pipe</code>：命名管道</li><li><code>socket</code>：套接字文件</li></ul><h3 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h3><h4 id="命令历史"><a href="#命令历史" class="headerlink" title="命令历史"></a>命令历史</h4><p>shell 进程会将其会话中保存此前用户提交执行过的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># history</span><br>[root@localhost ~]<span class="hljs-comment"># history</span><br>    1  ll /dev<br>    2  ech <span class="hljs-variable">$SHELL</span><br>    3  <span class="hljs-built_in">echo</span> <span class="hljs-variable">$SHELL</span><br>    4  <span class="hljs-built_in">pwd</span><br>    5  <span class="hljs-built_in">history</span><br><br><span class="hljs-comment"># $HISTSIZE，shell 进程可保留的命令历史的条数</span><br>[root@localhost ~]<span class="hljs-comment"># echo $HISTSIZE</span><br>1000<br><br><span class="hljs-comment"># $HISTFILE，持久保存命令历史的文件</span><br>[root@localhost ~]<span class="hljs-comment"># echo $HISTFILE</span><br>/root/.bash_history<br><br><span class="hljs-comment"># -c，删除所有条目从而清空历史列表</span><br>[root@localhost ~]<span class="hljs-comment"># history -c</span><br>[root@localhost ~]<span class="hljs-comment"># history</span><br>    1  <span class="hljs-built_in">history</span><br><br><span class="hljs-comment"># -d offset，删除指定命令历史</span><br><span class="hljs-comment"># -r，从文件读取命令历史到历史列表中</span><br><span class="hljs-comment"># -w，把历史列表中的命令追加到历史文件中</span><br><span class="hljs-comment"># history n，显示最近 n 条命令</span><br><span class="hljs-comment"># !n，再一次执行历史列表中的第 n 条命令</span><br><span class="hljs-comment"># !!，再一次执行上一条命令</span><br><span class="hljs-comment"># !x，再一次执行命令历史列表中最近一个以 x 开头的命令</span><br><span class="hljs-comment"># esc + . ，调用上一条命令的最后一个参数</span><br><span class="hljs-comment"># !$，表示上一条命令的最后一个参数</span><br><span class="hljs-comment"># $HISTCONTROL，ignoredups：忽略重复性，ignorespace：忽略以空白字符开头的命令，ignoreboth：两者</span><br>[root@localhost ~]<span class="hljs-comment"># echo $HISTCONTROL</span><br>ignoredups<br></code></pre></td></tr></table></figure><h4 id="命令补全"><a href="#命令补全" class="headerlink" title="命令补全"></a>命令补全</h4><p>shell 程序在接收到命令用户执行命令的请求，分析完成之后，最左侧的字符串会被当成命令</p><p>命令查找机制：查找内部命令，根据 PATH 环境变量中设定的命令，自左而右逐个搜索目录下的文件名</p><p>输入给定的打头字符串，如果唯一标识命令按 <code>Tab</code>则自动补全，如果不唯一，则按两次 <code>Tab</code> 键能显示所有打头列表</p><h4 id="路径补全"><a href="#路径补全" class="headerlink" title="路径补全"></a>路径补全</h4><p> 根据给定的起始路径下，以对应路径下的打头字符串来逐一匹配起始路径下的每个文件，如果唯一标识按 <code>Tab</code>则自动补全，如果不唯一，则按两次 <code>Tab</code> 键能显示所有打头列表</p><h4 id="命令行展开"><a href="#命令行展开" class="headerlink" title="命令行展开"></a>命令行展开</h4><p><code>~</code>，自动展开位用户的家目录，或指定的用户的家目录，<code>&#123;&#125;</code>，可承载一个逗号分隔的路径列表，并能够将其展开位多个路径，如：<code>/tmp/&#123;a,b&#125;</code> 相当于 <code>/tmp/a /tmp/b</code></p><h4 id="命令行状态结果"><a href="#命令行状态结果" class="headerlink" title="命令行状态结果"></a>命令行状态结果</h4><p>bash 通过状态返回值来输出此结果，命令执行完成之后，其返回值保存于 bash 的特殊变量 <code>$?</code> 中，命令正确执行时，有的返回有命令返回值，不同命令，结果各不相同，<code>$COMMAND</code>，引用命令的执行结果</p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>强引用：<code>&#39;&#39;</code>，弱引用：<code>&quot;&quot;</code>，命令引用：&#96;&#96;</p><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p><code>Ctrl+a</code>：跳转至命令行行首</p><p><code>Ctrl+e</code>：跳转至命令行行尾</p><p><code>Ctrl+u</code>：删除行首至光标所在处之间的所有字符</p><p><code>Ctrl+k</code>：删除光标所在处至行尾的所有字符</p><p><code>Ctrl+l</code>：清屏，相当于 <code>clear</code></p><h4 id="文件名通配"><a href="#文件名通配" class="headerlink" title="文件名通配"></a>文件名通配</h4><ul><li><code>*</code>：匹配任意长度的任意字符</li><li><code>?</code>：匹配任意单个字符</li><li><code>[]</code>：匹配指定范围内的任意单个字符<ul><li><code>[a-z]</code>，<code>[A-Z]</code>，<code> [0-9]</code>，<code>[a-z0-9]</code></li><li><code>[[:upper:]]</code>：所有大写字母</li><li><code>[[:lower:]]</code>：所有小写字母</li><li><code>[[:alpha:]]</code>：所有字母</li><li><code>[[:digit:]]</code>：所有数字</li><li><code>[[:alnum:]]</code>：所有的字母和数字</li><li><code>[[:space:]]</code>：所有空白字符</li><li><code>[[:punct:]]</code>：所有标点符号</li></ul></li><li><code>[^]</code>：匹配指定范围外的任意单个字符<ul><li><code>[^[:upper:]]</code>：匹配非大写字符</li><li><code>[^0-9]</code>：匹配非数字</li><li><code>[^[:alnum:]]</code>：匹配非字母和数字</li></ul></li></ul><h4 id="命令hash"><a href="#命令hash" class="headerlink" title="命令hash"></a>命令hash</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@study /]<span class="hljs-comment"># hash</span><br>命中    命令<br>   4    /usr/bin/chmod<br>   1    /usr/bin/cat<br>   4    /usr/bin/man<br>  10    /usr/bin/ls<br><br><span class="hljs-comment"># hash -d COMMAND 删除</span><br><span class="hljs-comment"># hash -r 清空</span><br></code></pre></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ul><li><p>将所有变量视作字符型，无需事先声明</p></li><li><p>本地变量：作用域仅为当前 shell 进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 变量赋值：name=value</span><br><span class="hljs-comment"># 变量引用：$&#123;variable&#125;，$variable</span><br><span class="hljs-comment"># 撤销变量 unset name</span><br></code></pre></td></tr></table></figure></li><li><p>环境变量：作用域为当前 shell 进程及其子进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 变量赋值</span><br><span class="hljs-comment"># export name=value</span><br><span class="hljs-comment"># name=value</span><br><span class="hljs-comment"># export name</span><br><span class="hljs-comment"># declare -x name=value</span><br><br><span class="hljs-comment"># 变量引用：$&#123;variable&#125;，$variable</span><br><span class="hljs-comment"># bash 内嵌了许多环境变量用于定义 bash 的工作环境</span><br><span class="hljs-comment"># export、declare -x、printenv、env，查看所有环境变量</span><br></code></pre></td></tr></table></figure></li><li><p>局部变量：作用域仅为某代码片段</p></li><li><p>位置参数变量：当执行脚本的 shell 进程传递的参数</p></li><li><p>特殊变量：shell 内置的有特殊功能的变量</p></li><li><p>只读变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 只读</span><br><span class="hljs-built_in">readonly</span> name<br><span class="hljs-built_in">declare</span> -r name<br></code></pre></td></tr></table></figure></li></ul><h4 id="多命令执行"><a href="#多命令执行" class="headerlink" title="多命令执行"></a>多命令执行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">COMMAND1;COMMAND2;COMMAND3;......<br><br><span class="hljs-comment"># 当命令1失败则不再运行命令2</span><br>COMMAND1 &amp;&amp; COMMAND2<br><br><span class="hljs-comment"># 当命令1成功则不再运行命令2</span><br>COMMAND1 || COMMAND2<br></code></pre></td></tr></table></figure><h3 id="目录管理命令"><a href="#目录管理命令" class="headerlink" title="目录管理命令"></a>目录管理命令</h3><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建目录，mkdir [OPTION]... DIRECTORY...</span><br><span class="hljs-comment"># -p，自动按需创建父目录</span><br><span class="hljs-comment"># -v，verbose，显示详细过程</span><br><span class="hljs-comment"># -m MODE，创建目录时直接给定权限</span><br><br><span class="hljs-comment"># 创建/tmp/x/y/z，并显示创建详情</span><br>[root@localhost ~]<span class="hljs-comment"># mkdir -p -v /tmp/x/y/z</span><br><span class="hljs-built_in">mkdir</span>: 已创建目录 <span class="hljs-string">&quot;/tmp/x&quot;</span><br><span class="hljs-built_in">mkdir</span>: 已创建目录 <span class="hljs-string">&quot;/tmp/x/y&quot;</span><br><span class="hljs-built_in">mkdir</span>: 已创建目录 <span class="hljs-string">&quot;/tmp/x/y/z&quot;</span><br><br><span class="hljs-comment"># 利用bash命令行展开特性，一条语句创建/tmp/x/y1, /tmp/x/y2, /tmp/x/y1/a, /tmp/x/y1/b</span><br>[root@localhost ~]<span class="hljs-comment"># mkdir -p -v /tmp/x/&#123;y1/&#123;a,b&#125;,y2&#125;</span><br><span class="hljs-built_in">mkdir</span>: 已创建目录 <span class="hljs-string">&quot;/tmp/x/y1&quot;</span><br><span class="hljs-built_in">mkdir</span>: 已创建目录 <span class="hljs-string">&quot;/tmp/x/y1/a&quot;</span><br><span class="hljs-built_in">mkdir</span>: 已创建目录 <span class="hljs-string">&quot;/tmp/x/y1/b&quot;</span><br><span class="hljs-built_in">mkdir</span>: 已创建目录 <span class="hljs-string">&quot;/tmp/x/y2&quot;</span><br><br><span class="hljs-comment"># 利用bash命令行展开特性，一条语句创建a_c, a_d, b_c, b_d</span><br>[root@localhost ~]<span class="hljs-comment"># mkdir -pv &#123;a,b&#125;_&#123;c,d&#125;</span><br><span class="hljs-built_in">mkdir</span>: 已创建目录 <span class="hljs-string">&quot;a_c&quot;</span><br><span class="hljs-built_in">mkdir</span>: 已创建目录 <span class="hljs-string">&quot;a_d&quot;</span><br><span class="hljs-built_in">mkdir</span>: 已创建目录 <span class="hljs-string">&quot;b_c&quot;</span><br><span class="hljs-built_in">mkdir</span>: 已创建目录 <span class="hljs-string">&quot;b_d&quot;</span><br></code></pre></td></tr></table></figure><h4 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 只删除空文件目录，不常用，rmdir [OPTION]... DIRECTORY...</span><br><span class="hljs-comment"># -p，删除某目录之后，如果其父目录为空，则一并删除</span><br><span class="hljs-comment"># -v，显示详细过程</span><br><br><span class="hljs-comment"># 一并删除所有空目录 /tmp/x/y/z</span><br>[root@localhost ~]<span class="hljs-comment"># rmdir -pv /tmp/x/y/z</span><br><span class="hljs-built_in">rmdir</span>: 正在删除目录 <span class="hljs-string">&quot;/tmp/x/y/z&quot;</span><br><span class="hljs-built_in">rmdir</span>: 正在删除目录 <span class="hljs-string">&quot;/tmp/x/y&quot;</span><br><span class="hljs-built_in">rmdir</span>: 正在删除目录 <span class="hljs-string">&quot;/tmp/x&quot;</span><br></code></pre></td></tr></table></figure><h4 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 tree命令，yum install tree</span><br><span class="hljs-comment"># 显示目录层级结构，tree [options] [directory]</span><br><span class="hljs-comment"># -L，指定显示的层级</span><br></code></pre></td></tr></table></figure><h3 id="文本查看命令"><a href="#文本查看命令" class="headerlink" title="文本查看命令"></a>文本查看命令</h3><h4 id="cat-1"><a href="#cat-1" class="headerlink" title="cat"></a>cat</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 文件内容查看，-n显示行号，-E显示行尾结束符</span><br></code></pre></td></tr></table></figure><h4 id="tac-1"><a href="#tac-1" class="headerlink" title="tac"></a>tac</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 与 cat 相反，逆行序打印文本内容</span><br></code></pre></td></tr></table></figure><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 分屏查看，more FILE</span><br></code></pre></td></tr></table></figure><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 与 more 相反，less FILE</span><br></code></pre></td></tr></table></figure><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看文件的前 n 行，默认 10 行，head [options] FILE</span><br>[root@localhost ~]<span class="hljs-comment"># head -n 5 /etc/sysconfig/network-scripts/ifcfg-ens33 </span><br>TYPE=<span class="hljs-string">&quot;Ethernet&quot;</span><br>PROXY_METHOD=<span class="hljs-string">&quot;none&quot;</span><br>BROWSER_ONLY=<span class="hljs-string">&quot;no&quot;</span><br>BOOTPROTO=<span class="hljs-string">&quot;dhcp&quot;</span><br>DEFROUTE=<span class="hljs-string">&quot;yes&quot;</span><br></code></pre></td></tr></table></figure><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看文件的后 n 行，tail [options] FILE</span><br>[root@localhost ~]<span class="hljs-comment"># tail -n 5 /etc/sysconfig/network-scripts/ifcfg-ens33 </span><br>IPV6_ADDR_GEN_MODE=<span class="hljs-string">&quot;stable-privacy&quot;</span><br>NAME=<span class="hljs-string">&quot;ens33&quot;</span><br>UUID=<span class="hljs-string">&quot;6ae13078-476b-45b6-a9d9-1fac0480b8a5&quot;</span><br>DEVICE=<span class="hljs-string">&quot;ens33&quot;</span><br>ONBOOT=<span class="hljs-string">&quot;yes&quot;</span><br><br><span class="hljs-comment"># -f，查看文件尾部内容结束后不退出，跟随显示新增的行，监控log</span><br></code></pre></td></tr></table></figure><h4 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># display file or file system status，stat FILE...</span><br>[root@localhost ~]<span class="hljs-comment"># stat /tmp/yum.log </span><br>  文件：<span class="hljs-string">&quot;/tmp/yum.log&quot;</span><br>  大小：0         块：0          IO 块：4096   普通空文件<br>设备：fd00h/64768dInode：67160137    硬链接：1<br>权限：(0600/-rw-------)  Uid：(    0/    root)   Gid：(    0/    root)<br>环境：system_u:object_r:initrc_tmp_t:s0<br>最近访问：2021-01-18 11:17:06.195300428 +0800<br>最近更改：2021-01-18 11:17:06.195300428 +0800<br>最近改动：2021-01-18 11:17:06.195300428 +0800<br>创建时间：-<br><br><span class="hljs-comment"># 最近访问：access time</span><br><span class="hljs-comment"># 最近更改：modify time</span><br><span class="hljs-comment"># 最近改动：change time</span><br></code></pre></td></tr></table></figure><h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># change file timestamps,touch [OPTION]... FILE...</span><br><span class="hljs-comment"># -c，指定的文件路径不存在时不予创建</span><br><span class="hljs-comment"># -a：仅修改access time</span><br><span class="hljs-comment"># -m：仅修改吗，modify time</span><br><span class="hljs-comment"># -t STAMP：指定时间戳，[[CC]YY]MMDDhhmm[.ss]</span><br></code></pre></td></tr></table></figure><h3 id="文件管理命令"><a href="#文件管理命令" class="headerlink" title="文件管理命令"></a>文件管理命令</h3><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># copy files and directories，</span><br><span class="hljs-comment"># 单源复制：cp [OPTION]... [-T] SOURCE DEST</span><br><span class="hljs-comment"># 多源复制：cp [OPTION]... SOURCE... DIRECTORY，cp [OPTION]... -t DIRECTORY SOURCE...</span><br><span class="hljs-comment"># -i：交互式复制，即覆盖之前提醒用户确认</span><br><span class="hljs-comment"># -f：强制覆盖目标文件</span><br><span class="hljs-comment"># -r：递归目录</span><br><span class="hljs-comment"># -d：复制符号链接本身，而非其指向的源文件</span><br><span class="hljs-comment"># -a：等价于 -dR --preserve=all，用于归档</span><br><span class="hljs-comment"># --perserve=...：指定保留对应属性，默认：mode,ownership,timestamps，额外：context, links, xattr, all</span><br></code></pre></td></tr></table></figure><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># move (rename) files</span><br><span class="hljs-comment"># mv [OPTION]... [-T] SOURCE DEST</span><br><span class="hljs-comment"># mv [OPTION]... SOURCE... DIRECTORY</span><br><span class="hljs-comment"># mv [OPTION]... -t DIRECTORY SOURCE...</span><br><span class="hljs-comment"># -i：交互式复制，即覆盖之前提醒用户确认</span><br><span class="hljs-comment"># -f：强制覆盖目标文件</span><br></code></pre></td></tr></table></figure><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># remove files or directories</span><br><span class="hljs-comment"># rm [OPTION]... FILE...</span><br><span class="hljs-comment"># -i：交互式复制，即覆盖之前提醒用户确认</span><br><span class="hljs-comment"># -f：强制覆盖目标文件</span><br><span class="hljs-comment"># -r：递归目录</span><br><span class="hljs-comment"># 所有不用文件建议不用删除，而是移动到固定目录</span><br></code></pre></td></tr></table></figure><h3 id="IO-重定向与管道"><a href="#IO-重定向与管道" class="headerlink" title="IO 重定向与管道"></a>IO 重定向与管道</h3><h4 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># &gt;，覆盖输出</span><br>[root@localhost /]<span class="hljs-comment"># head -n 5 /etc/passwd</span><br>root:x:0:0:root:/root:/bin/bash<br>bin:x:1:1:bin:/bin:/sbin/nologin<br>daemon:x:2:2:daemon:/sbin:/sbin/nologin<br>adm:x:3:4:adm:/var/adm:/sbin/nologin<br>lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br><br>[root@localhost /]<span class="hljs-comment"># head -n 5 /etc/passwd &gt; /tmp/head_5_etc_passwd.txt</span><br><br>[root@localhost /]<span class="hljs-comment"># cat /tmp/head_5_etc_passwd.txt</span><br>root:x:0:0:root:/root:/bin/bash<br>bin:x:1:1:bin:/bin:/sbin/nologin<br>daemon:x:2:2:daemon:/sbin:/sbin/nologin<br>adm:x:3:4:adm:/var/adm:/sbin/nologin<br>lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br><br><span class="hljs-comment"># &gt;&gt;，追加输出</span><br>[root@localhost /]<span class="hljs-comment"># tail -n 5 /etc/passwd</span><br>dbus:x:81:81:System message bus:/:/sbin/nologin<br>polkitd:x:999:998:User <span class="hljs-keyword">for</span> polkitd:/:/sbin/nologin<br>sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin<br>postfix:x:89:89::/var/spool/postfix:/sbin/nologin<br>chrony:x:998:996::/var/lib/chrony:/sbin/nologin<br><br>[root@localhost /]<span class="hljs-comment"># tail -n 5 /etc/passwd &gt;&gt; /tmp/head_5_etc_passwd.txt</span><br><br>[root@localhost /]<span class="hljs-comment"># cat /tmp/head_5_etc_passwd.txt</span><br>root:x:0:0:root:/root:/bin/bash<br>bin:x:1:1:bin:/bin:/sbin/nologin<br>daemon:x:2:2:daemon:/sbin:/sbin/nologin<br>adm:x:3:4:adm:/var/adm:/sbin/nologin<br>lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br>dbus:x:81:81:System message bus:/:/sbin/nologin<br>polkitd:x:999:998:User <span class="hljs-keyword">for</span> polkitd:/:/sbin/nologin<br>sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin<br>postfix:x:89:89::/var/spool/postfix:/sbin/nologin<br>chrony:x:998:996::/var/lib/chrony:/sbin/nologin<br><br><span class="hljs-comment"># set -C，禁止覆盖输出重定向至已存在的文件</span><br><span class="hljs-comment"># set +C，关闭上述功能</span><br><span class="hljs-comment"># 错误输出重定向：2&gt;，2&gt;&gt;</span><br><span class="hljs-comment"># 合并正常输出流和错误输出流：(1) &amp;&gt;，&amp;&gt;&gt;（2） COMMAND &gt; /path/to/somefile 2&gt;&amp;1</span><br></code></pre></td></tr></table></figure><h4 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># &lt;，通过输入设备键入输出</span><br><span class="hljs-comment"># tr，tr [OPTION]... SET1 [SET2]</span><br><span class="hljs-comment"># 把输入的数据当中的字符，凡是在SET1定义范围内出现的，通通对位转换为SET2出现的字符，不修改原文件</span><br><span class="hljs-comment"># tr SET1 SET2 &lt; /PATH/FROM/SOMEFILE</span><br><span class="hljs-comment"># tr -d SET1 &lt; /PATH/FROM/SOMEFILE，指定移除指定SET1定义范围内出现得字符</span><br>[root@localhost /]<span class="hljs-comment"># tr [a-z] [A-Z]</span><br><span class="hljs-built_in">where</span> are you?<br>WHERE ARE YOU?<br>How are you?    <br>HOW ARE YOU?<br>^C<br><br><span class="hljs-comment"># &lt;&lt;，指定分界符，一般为EOF</span><br>[root@localhost /]<span class="hljs-comment"># cat &gt; /tmp/cat.out &lt;&lt; EOF</span><br>&gt; <span class="hljs-built_in">where</span> are you?<br>&gt; how are you<br>&gt; EOF<br>[root@localhost /]<span class="hljs-comment"># cat ^C</span><br>[root@localhost /]<span class="hljs-comment"># cat /tmp/cat.out </span><br><span class="hljs-built_in">where</span> are you?<br>how are you<br></code></pre></td></tr></table></figure><h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># |，COMMAND1 | COMMAND2 | COMMAND3 | ...</span><br><span class="hljs-comment"># 连接程序，实现将前一个命令的输出直接定向后一个程序当作输入数据流</span><br>[root@localhost /]<span class="hljs-comment"># cat /etc/issue | tr &#x27;a-z&#x27; &#x27;A-Z&#x27;</span><br>\S<br>KERNEL \R ON AN \M<br><br><span class="hljs-comment"># tee，COMMAND | tee /PATH/TO/SOMEFILE</span><br>[root@localhost /]<span class="hljs-comment"># cat /etc/issue | tee /tmp/issue.tee | tr &#x27;a-z&#x27; &#x27;A-Z&#x27;</span><br>\S<br>KERNEL \R ON AN \M<br><br>[root@localhost /]<span class="hljs-comment"># cat /tmp/issue.tee</span><br>\S<br>Kernel \r on an \m<br></code></pre></td></tr></table></figure><h3 id="用户与组"><a href="#用户与组" class="headerlink" title="用户与组"></a>用户与组</h3><h4 id="用户类别"><a href="#用户类别" class="headerlink" title="用户类别"></a>用户类别</h4><ul><li>管理员：0</li><li>普通用户：1-65635<ul><li>系统用户：1-499(CentOS6), 1-999(CentOS7)</li><li>登录用户：500-60000(CentOS6), 1000-60000(CentOS7)</li></ul></li></ul><p>名称解析：Username &lt;–&gt; UID  名称解析库：<code>/etc/passwd</code></p><h4 id="组类别"><a href="#组类别" class="headerlink" title="组类别"></a>组类别</h4><ul><li>管理员组：0</li><li>普通用户组：1-65635<ul><li>系统组：1-499(CentOS6), 1-999(CentOS7)</li><li>登录组：500-60000(CentOS6), 1000-60000(CentOS7)</li></ul></li><li>用户的基本组</li><li>用户的附加组</li><li>私有组：组名同用户名，且只包含一个用户</li><li>公共组：组内包含了多个用户</li></ul><p>名称解析：groupname &lt;–&gt; gid  名称解析库：<code>/etc/group</code></p><h4 id="认证信息"><a href="#认证信息" class="headerlink" title="认证信息"></a>认证信息</h4><p>通过比对事先存储的，与登录时提供的信息是否一致</p><p>密码使用策略：</p><ol><li>使用随机密码</li><li>最短长度不要低于8位</li><li>应该使用大写字母、小写字母、数字和标点符号四类字符中至少三类</li><li>定期更换</li></ol><p>加密算法：</p><ol><li><p>对称加密：加密和解密使用同一个密码</p></li><li><p>非对称加密：加密和解密使用的一对儿密钥</p></li><li><p>单向加密：只能加密，不能解密；提取数据特征码</p><ul><li>算法：<ul><li>md5: message digest, 128bits</li><li>sha：secure hash algorithm, 160bits</li><li>sha224</li><li>sha256</li><li>sha384</li><li>sha512</li></ul></li></ul><p> etc&#x2F;passwd：用户的信息库</p><p> 格式为 ：name:password:UID:GID:GECOS:directory:shell<br> name: 用户名<br> password：可以是加密的密码，也可是占位符x；<br> UID：用户ID；<br> GID：用户所属的主组的ID号；<br> GECOS：注释信息<br> directory：用户的家目录；<br> shell：用户的默认shell，登录时默认shell程序；</p><p> &#x2F;etc&#x2F;shadow：用户密码<br> 用户名:加密的密码:最近一次修改密码的时间:最短使用期限:最长使用期限:警告期段:过期期限:保留字段</p><p> &#x2F;etc&#x2F;group：组的信息库<br> 格式为：group_name:password:GID:user_list<br> user_list：该组的用户成员；以此组为附加组的用户的用户列表；</p></li></ol><h4 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加组，groupadd [选项] group_name</span><br><span class="hljs-comment"># -g GID：指定GID；默认是上一个组的GID+1</span><br><span class="hljs-comment"># -r: 创建系统组</span><br></code></pre></td></tr></table></figure><h4 id="groupmod"><a href="#groupmod" class="headerlink" title="groupmod"></a>groupmod</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改组属性，groupmod [选项] GROUP</span><br><span class="hljs-comment"># -g GID：修改GID；</span><br><span class="hljs-comment"># -n new_name：修改组名；</span><br></code></pre></td></tr></table></figure><h4 id="groupdel"><a href="#groupdel" class="headerlink" title="groupdel"></a>groupdel</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除组，groupdel [选项] GROUP</span><br></code></pre></td></tr></table></figure><h4 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建用户,useradd [选项] 登录名</span><br><span class="hljs-comment"># 创建用户时的诸多默认设定配置文件为/etc/login.defs</span><br><span class="hljs-comment"># -u, --uid UID：指定UID；</span><br><span class="hljs-comment"># -g, --gid GROUP：指定基本组ID，此组得事先存在；</span><br><span class="hljs-comment"># -G, --groups GROUP1[,GROUP2,...[,GROUPN]]]：指明用户所属的附加组，多个组之间用逗号分隔；</span><br><span class="hljs-comment"># -c, --comment COMMENT：指明注释信息；</span><br><span class="hljs-comment"># -d, --home HOME_DIR：以指定的路径为用户的家目录；通过复制/etc/skel此目录并重命名实现；指定的家目录路径如果事先存在，则不会为用户复制环境配置文件；</span><br><span class="hljs-comment"># -s, --shell SHELL：指定用户的默认shell，可用的所有shell列表存储在/etc/shells文件中；</span><br><span class="hljs-comment"># -r, --system：创建系统用户；</span><br><span class="hljs-comment"># useradd -D：显示创建用户的默认配置；</span><br><span class="hljs-comment"># useradd -D 选项: 修改默认选项的值，修改的结果保存于/etc/default/useradd文件中；</span><br></code></pre></td></tr></table></figure><h4 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改用户属性，usermod [选项] 登录名</span><br><span class="hljs-comment"># -u, --uid UID：修改用户的ID为此处指定的新UID；</span><br><span class="hljs-comment"># -g, --gid GROUP：修改用户所属的基本组；</span><br><span class="hljs-comment"># -G, --groups GROUP1[,GROUP2,...[,GROUPN]]]：修改用户所属的附加组；原来的附加组会被覆盖；</span><br><span class="hljs-comment"># -a, --append：与-G一同使用，用于为用户追加新的附加组；</span><br><span class="hljs-comment"># -c, --comment COMMENT：修改注释信息；</span><br><span class="hljs-comment"># -d, --home HOME_DIR：修改用户的家目录；用户原有的文件不会被转移至新位置；</span><br><span class="hljs-comment"># -m, --move-home：只能与-d选项一同使用，用于将原来的家目录移动为新的家目录；</span><br><span class="hljs-comment"># -l, --login NEW_LOGIN：修改用户名；</span><br><span class="hljs-comment"># -s, --shell SHELL：修改用户的默认shell；</span><br><span class="hljs-comment"># -L, --lock：锁定用户密码；即在用户原来的密码字符串之前添加一个&quot;!&quot;；</span><br><span class="hljs-comment"># -U, --unlock：解锁用户的密码；</span><br></code></pre></td></tr></table></figure><h4 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除用户,userdel [选项] 登录</span><br><span class="hljs-comment"># -r：删除用户时一并删除其家目录；</span><br></code></pre></td></tr></table></figure><h4 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># passwd：修改用户自己的密码；</span><br><span class="hljs-comment"># passwd USERNAME：修改指定用户的密码，但仅root有此权限；</span><br><span class="hljs-comment"># -l, -u：锁定和解锁用户；</span><br><span class="hljs-comment"># -d：清除用户密码串；</span><br><span class="hljs-comment"># -e DATE: 过期期限，日期；</span><br><span class="hljs-comment"># -i DAYS：非活动期限；</span><br><span class="hljs-comment"># -n DAYS：密码的最短使用期限；</span><br><span class="hljs-comment"># -x DAYS：密码的最长使用期限；</span><br><span class="hljs-comment"># -w DAYS：警告期限；</span><br><span class="hljs-comment"># --stdin：echo &quot;PASSWORD&quot; | passwd --stdin USERNAME</span><br></code></pre></td></tr></table></figure><h4 id="gpasswd"><a href="#gpasswd" class="headerlink" title="gpasswd"></a>gpasswd</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 组密码文件：/etc/gshadow，gpasswd [选项] group</span><br><span class="hljs-comment"># -a USERNAME：向组中添加用户</span><br><span class="hljs-comment"># -d USERNAME：从组中移除用户</span><br></code></pre></td></tr></table></figure><h4 id="newgrp"><a href="#newgrp" class="headerlink" title="newgrp"></a>newgrp</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 临时切换指定的组为基本组，newgrp [-] [group]</span><br><span class="hljs-comment"># -: 会模拟用户重新登录以实现重新初始化其工作环境；</span><br></code></pre></td></tr></table></figure><h4 id="chage"><a href="#chage" class="headerlink" title="chage"></a>chage</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更改用户密码过期信息，chage [选项] 登录名</span><br><span class="hljs-comment"># -d，-E，-W，-m，-M</span><br></code></pre></td></tr></table></figure><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示用户的真和有效ID，id [OPTION]... [USER]</span><br><span class="hljs-comment"># -u: 仅显示有效的UID；</span><br><span class="hljs-comment"># -g: 仅显示用户的基本组ID; </span><br><span class="hljs-comment"># -G：仅显示用户所属的所有组的ID；</span><br><span class="hljs-comment"># -n: 显示名字而非ID；</span><br></code></pre></td></tr></table></figure><h4 id="su"><a href="#su" class="headerlink" title="su"></a>su</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># switch user</span><br><span class="hljs-comment"># 登录式切换：会通过读取目标用户的配置文件来重新初始化</span><br>su - USERNAME<br>su -l USERNAME<br><span class="hljs-comment"># 非登录式切换：不会读取目标用户的配置文件进行初始化</span><br>su USERNAME<br><span class="hljs-comment"># 注意：管理员可无密码切换至其它任何用户；</span><br><span class="hljs-comment">#  -c &#x27;COMMAND&#x27;：仅以指定用户的身份运行此处指定的命令；</span><br>su - USERNAME -c <span class="hljs-string">&#x27;COMMAND&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><ul><li><code>mode：rwxrwxrwx</code><ul><li>左三位：定义 user（owner）的权限</li><li>中三位：定义 group 的权限</li><li>右三位：定义 other 的权限</li></ul></li><li><code>r</code>：<code>readable</code>，读权限</li><li><code>w</code>：<code>writable</code>，写权限</li><li><code>x</code>：<code>excutable</code>，执行权限</li><li><code>ownership：user,group,other</code></li></ul><h4 id="权限组合机制"><a href="#权限组合机制" class="headerlink" title="权限组合机制"></a>权限组合机制</h4><ul><li><code>---</code>、<code>000</code>、0</li><li><code>--x</code>、<code>001</code>、1</li><li><code>-w-</code>、<code>010</code>、2</li><li><code>-wx</code>、<code>011</code>、3</li><li><code>r--</code>、<code>100</code>、4</li><li><code>r-x</code>、<code>101</code>、5</li><li><code>rw-</code>、<code>110</code>、6</li><li><code>rwx</code>、<code>111</code>、7</li></ul><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更改权限，u:属主、g:属组、o:其他、a:所有</span><br><span class="hljs-comment"># chmod [options] mode file...</span><br><span class="hljs-comment"># 用户只能修改属主为自己的文件</span><br><br><span class="hljs-comment"># 指定所有权限设置，u=,g=,o=,a=</span><br>[root@study /]<span class="hljs-comment"># ll txt</span><br>-rw-r--r--. 1 root root 541 4月   9 21:34 txt<br>[root@study /]<span class="hljs-comment"># chmod g=rw- txt</span><br>[root@study /]<span class="hljs-comment"># ll txt</span><br>-rw-rw-r--. 1 root root 541 4月   9 21:34 txt<br><br><span class="hljs-comment"># 指定单个权限设置，u-r,o+x,g-w,+r,+x</span><br>[root@study /]<span class="hljs-comment"># chmod g-w txt</span><br>[root@study /]<span class="hljs-comment"># ll txt</span><br>-rw-r--r--. 1 root root 541 4月   9 21:34 txt<br>[root@study /]<span class="hljs-comment"># chmod +x txt</span><br>[root@study /]<span class="hljs-comment"># ll txt</span><br>-rwxr-xr-x. 1 root root 541 4月   9 21:34 txt<br><br><span class="hljs-comment"># 进制表示权限修改</span><br>[root@study /]<span class="hljs-comment"># chmod 660 txt</span><br>[root@study /]<span class="hljs-comment"># ll txt</span><br>-rw-rw----. 1 root root 541 4月   9 21:34 txt<br><br><span class="hljs-comment"># -R，--recursive，递归修改</span><br></code></pre></td></tr></table></figure><h4 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改属主</span><br></code></pre></td></tr></table></figure><h4 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改数组</span><br></code></pre></td></tr></table></figure><h4 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 文件权限反向掩码，遮罩码</span><br><span class="hljs-comment"># 文件默认不能拥有执行权限，如果减得的结果中有执行权限则需要加1</span><br>[root@study /]<span class="hljs-comment"># umask</span><br>0022<br><span class="hljs-comment"># umask MASK 设置 umask</span><br></code></pre></td></tr></table></figure><h4 id="install"><a href="#install" class="headerlink" title="install"></a>install</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 复制文件并设置权限</span><br>install [options] [-s] [--strip] <span class="hljs-built_in">source</span> dest<br>install [options] [-s] [--strip] <span class="hljs-built_in">source</span>... directory<br>install [options] [-d,--directory] directory...<br><br><span class="hljs-comment"># -d, --directory</span><br><span class="hljs-comment"># -m mode, --mode=mode</span><br><span class="hljs-comment"># -o owner, --owner=owner</span><br><span class="hljs-comment"># -g group, --group=group</span><br></code></pre></td></tr></table></figure><h4 id="mktemp"><a href="#mktemp" class="headerlink" title="mktemp"></a>mktemp</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建临时文件或临时目录</span><br>[root@study /]<span class="hljs-comment"># mytemp=$(mktemp /tmp/XXXXXXX)</span><br>[root@study /]<span class="hljs-comment"># echo $mytemp</span><br>/tmp/ptfJw0h<br><br><span class="hljs-comment"># -d 创建临时目录</span><br></code></pre></td></tr></table></figure><h3 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h3><blockquote><p>命令的堆积而已</p></blockquote><h4 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h4><p>第一行指定解释器路径，用于指明解释执行当前脚本的解释器程序文件，常用的有：<code>#!/bin/bash</code>、<code>#!/usr/bin/python</code>、<code>#!/usr/bin/perl</code>，脚本文件为 <code>.sh</code></p><p>解释器会自动忽略空白行和加 <code>#</code> 的注释行</p><h4 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h4><p>第一种：<code>chmod +x file.sh</code>、<code>./file.sh</code></p><p>第二种：<code>bash file.sh</code></p><h4 id="bash的配置文件"><a href="#bash的配置文件" class="headerlink" title="bash的配置文件"></a>bash的配置文件</h4><h5 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h5><p>为交互式登录的 shell 进程提供配置</p><p>仅管理员可修改</p><p>全局：<code>/etc/profile</code>, <code>/etc/profile.d/*.sh</code></p><p>用户：<code>~/.bash_profile</code></p><p>功能:</p><ol><li>用于定义环境变量</li><li>运行命令或脚本</li></ol><h5 id="bashrc"><a href="#bashrc" class="headerlink" title="bashrc"></a>bashrc</h5><p>为非交互式登录的 shell 进程提供配置</p><p>全局：<code>/etc/bashrc</code></p><p>用户：<code>~/.bashrc</code></p><p>功能:</p><ol><li>定义本地变量</li><li>定义命令别名</li></ol><h5 id="交互式登录"><a href="#交互式登录" class="headerlink" title="交互式登录"></a>交互式登录</h5><ul><li>直接通过某终端输入账号密码打开的 shell 进程</li><li>使用 su 命令: su - USERNAME,或者使用 su -l USERNAME执行的登录切换</li></ul><h5 id="非交互式登录"><a href="#非交互式登录" class="headerlink" title="非交互式登录"></a>非交互式登录</h5><ul><li>su USERNAME 执行的登录切换</li><li>图形界面下打开的终端</li><li>运行脚本</li></ul><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># grep, egrep, fgrep - 打印匹配给定模式的行</span><br>grep [options] PATTERN [FILE...]<br>grep [options] [-e PATTERN | -f FILE] [FILE...]<br><br>[reajason@study ~]$ grep <span class="hljs-string">&quot;UUID&quot;</span> /etc/fstab<br>UUID=4da0c9b1-d833-434b-a700-6abe448403ec /boot<br><br><span class="hljs-comment"># --color=auto，匹配到的文本高亮显示</span><br><span class="hljs-comment"># -i, --ignore-case 忽略模式 PATTERN 和输入文件中的大小写的分别</span><br><span class="hljs-comment"># -o, --only-matching 只显示匹配的行中与 PATTERN 相匹配的部分</span><br><span class="hljs-comment"># -v, --invert-match 变匹配的意义，只选择不匹配的行</span><br><span class="hljs-comment"># -q, --quiet, --silent 不向标准输出写任何东西，只返回状态吗，echo $?</span><br><span class="hljs-comment"># -A NUM, --after-context=NUM 打印出紧随匹配的行之后的下文 NUM 行</span><br><span class="hljs-comment"># -B NUM, --before-context=NUM 打印出匹配的行之前的上文  NUM 行</span><br><span class="hljs-comment"># -C NUM, --context=NUM 打印出匹配的行的上下文前后各 NUM 行</span><br><br>[reajason@study ~]$ grep <span class="hljs-string">&quot;root&quot;</span> /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>operator:x:11:0:operator:/root:/sbin/nologin<br>[reajason@study ~]$ grep -A 1 <span class="hljs-string">&quot;root&quot;</span> /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>bin:x:1:1:bin:/bin:/sbin/nologin<br>--<br>operator:x:11:0:operator:/root:/sbin/nologin<br>games:x:12:100:games:/usr/games:/sbin/nologin<br>[reajason@study ~]$ grep -B 1 <span class="hljs-string">&quot;root&quot;</span> /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>--<br>mail:x:8:12:mail:/var/spool/mail:/sbin/nologin<br>operator:x:11:0:operator:/root:/sbin/nologin<br>[reajason@study ~]$ grep -C 1 <span class="hljs-string">&quot;root&quot;</span> /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>bin:x:1:1:bin:/bin:/sbin/nologin<br>--<br>mail:x:8:12:mail:/var/spool/mail:/sbin/nologin<br>operator:x:11:0:operator:/root:/sbin/nologin<br>games:x:12:100:games:/usr/games:/sbin/nologin<br></code></pre></td></tr></table></figure><h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 输出文件中的行数、单词数、字节数</span><br><br>[reajason@study ~]$ <span class="hljs-built_in">wc</span> /etc/passwd<br>  43   87 2271 /etc/passwd<br><br><span class="hljs-comment"># -l: lines</span><br><span class="hljs-comment"># -w：words</span><br><span class="hljs-comment"># -c: bytes</span><br></code></pre></td></tr></table></figure><h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在文件的每一行中提取片断</span><br><span class="hljs-comment"># -d CHAR：以指定的字符为分隔符</span><br><span class="hljs-comment"># -f FIELDS：挑选出的字段</span><br></code></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 对文本文件的行排序</span><br><span class="hljs-comment"># -n：基于数值大小而非字符进行排序；</span><br><span class="hljs-comment"># -t CHAR：指定分隔符；</span><br><span class="hljs-comment"># -k #：用于排序比较的字段；</span><br><span class="hljs-comment"># -r：逆序排序；</span><br><span class="hljs-comment"># -f：忽略字符大小写</span><br><span class="hljs-comment"># -u：重复的行只保留一份；</span><br></code></pre></td></tr></table></figure><h4 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除排序文件中的重复行</span><br><span class="hljs-comment"># -c：显示每行的重复次数；</span><br><span class="hljs-comment"># -d：仅显示重复过的的行；</span><br></code></pre></td></tr></table></figure><h4 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 文件比较</span><br><br><span class="hljs-comment"># diff  /PATH/TO/OLDFILE  /PATH/TO/NEWFILE &gt; /PATH/TO/PATCH_FILE</span><br><br><span class="hljs-comment"># -u：使用unfied机制，即显示要修改的行的上下文，默认为3行；</span><br></code></pre></td></tr></table></figure><h4 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 向文件打补丁</span><br><span class="hljs-comment"># patch [OPTIONS] -i /PATH/TO/PATCH_FILE /PATH/TO/OLDFILE</span><br><br><span class="hljs-comment"># patch /PATH/TO/OLDFILE &lt; /PATH/TO/PATCH_FILE</span><br></code></pre></td></tr></table></figure><h3 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h3><h4 id="基本模式"><a href="#基本模式" class="headerlink" title="基本模式"></a>基本模式</h4><ol><li>编辑模式</li><li>输入模式</li><li>末行模式</li></ol><h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><h4 id="模式转换"><a href="#模式转换" class="headerlink" title="模式转换"></a>模式转换</h4><h5 id="编辑模式-gt-输入模式"><a href="#编辑模式-gt-输入模式" class="headerlink" title="编辑模式 -&gt; 输入模式"></a>编辑模式 -&gt; 输入模式</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">i</span>：insert，在光标处输入<br><span class="hljs-selector-tag">a</span>：append，在光标后方一个字符输入<br>o：在光标所在处下方新的一行输入<br><span class="hljs-selector-tag">I</span>：在光标所在处的行首输入<br><span class="hljs-selector-tag">A</span>：在光标所在处的行尾输入<br>O：在光标所在处上方新的一行输入<br></code></pre></td></tr></table></figure><h5 id="输入模式-gt-编辑模式"><a href="#输入模式-gt-编辑模式" class="headerlink" title="输入模式 -&gt; 编辑模式"></a>输入模式 -&gt; 编辑模式</h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Esc</span><br></code></pre></td></tr></table></figure><h5 id="编辑模式-gt-末行模式"><a href="#编辑模式-gt-末行模式" class="headerlink" title="编辑模式 -&gt; 末行模式"></a>编辑模式 -&gt; 末行模式</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">:<br></code></pre></td></tr></table></figure><h5 id="末行模式-gt-编辑模式"><a href="#末行模式-gt-编辑模式" class="headerlink" title="末行模式 -&gt; 编辑模式"></a>末行模式 -&gt; 编辑模式</h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Esc</span><br></code></pre></td></tr></table></figure><h4 id="打开文件-1"><a href="#打开文件-1" class="headerlink" title="打开文件"></a>打开文件</h4><p><code>vim file</code>、<code>vim +n file</code>、<code>vim +/reg file</code></p><h4 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-title class_">ZZ</span>   保存并退出<br><span class="hljs-symbol">:q</span>   退出<br><span class="hljs-symbol">:q!</span>  强制退出，不保存<br><span class="hljs-symbol">:wq!</span> 保存并退出<br><span class="hljs-symbol">:x</span>   保存并退出<br><span class="hljs-symbol">:w</span> /<span class="hljs-title class_">PATH</span>/<span class="hljs-title class_">FILE</span>  另存为<br></code></pre></td></tr></table></figure><h4 id="光标跳转"><a href="#光标跳转" class="headerlink" title="光标跳转"></a>光标跳转</h4><h5 id="字符间跳转"><a href="#字符间跳转" class="headerlink" title="字符间跳转"></a>字符间跳转</h5><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">h:</span> ←<br><span class="hljs-symbol">j:</span> ↓<br><span class="hljs-symbol">k:</span> ↑<br><span class="hljs-symbol">l:</span> →<br></code></pre></td></tr></table></figure><h5 id="单词间跳转"><a href="#单词间跳转" class="headerlink" title="单词间跳转"></a>单词间跳转</h5><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">w:</span> 下一个单词的词首<br><span class="hljs-symbol">e:</span> 当前或后一个单词词尾<br><span class="hljs-symbol">b:</span> 当前或前一个单词词首<br></code></pre></td></tr></table></figure><h5 id="行首行尾跳转"><a href="#行首行尾跳转" class="headerlink" title="行首行尾跳转"></a>行首行尾跳转</h5><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">^: 跳转到行首第一个非空白字符</span><br><span class="hljs-section">0: 跳转至行首</span><br><span class="hljs-section">$: 跳转至行尾</span><br></code></pre></td></tr></table></figure><h5 id="行间跳转"><a href="#行间跳转" class="headerlink" title="行间跳转"></a>行间跳转</h5><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">nG:</span> 跳转到第 n 行<br><span class="hljs-symbol">gg:</span> 跳转第一行<br><span class="hljs-symbol">G:</span>  跳转最后一行<br></code></pre></td></tr></table></figure><h5 id="句间跳转"><a href="#句间跳转" class="headerlink" title="句间跳转"></a>句间跳转</h5><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">()<br></code></pre></td></tr></table></figure><h5 id="段间跳转"><a href="#段间跳转" class="headerlink" title="段间跳转"></a>段间跳转</h5><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="翻屏"><a href="#翻屏" class="headerlink" title="翻屏"></a>翻屏</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">Ctrl+f: 向下翻一屏</span><br><span class="hljs-section">Ctrl+b: 向上翻一屏</span><br><span class="hljs-section">Ctrl+d: 向下翻半屏</span><br><span class="hljs-section">Ctrl+u: 向上翻半屏</span><br><span class="hljs-section">Enter: 按行向后翻</span><br></code></pre></td></tr></table></figure><h4 id="编辑命令"><a href="#编辑命令" class="headerlink" title="编辑命令"></a>编辑命令</h4><h5 id="字符编辑"><a href="#字符编辑" class="headerlink" title="字符编辑"></a>字符编辑</h5><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">x:</span>  删除光标所在处的字符<br><span class="hljs-meta">#x: 删除光标处起始的#个字符</span><br><span class="hljs-symbol">xp:</span> 交换光标所在处的字符与其后面的字符的位置<br></code></pre></td></tr></table></figure><h5 id="替换命令"><a href="#替换命令" class="headerlink" title="替换命令"></a>替换命令</h5><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">r:</span> 替换光标所在处的字符<br></code></pre></td></tr></table></figure><h5 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h5><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">d$: 删除光标所在处到行尾</span><br><span class="hljs-section">d^: 删除光标所在处到行首</span><br><span class="hljs-section">dw: </span><br><span class="hljs-section">de: </span><br><span class="hljs-section">db: </span><br><span class="hljs-section">dd: 删除光标所在一整行</span><br><span class="hljs-comment">#dd: 删除光标所在处的行起始的共#行</span><br></code></pre></td></tr></table></figure><h5 id="粘贴命令"><a href="#粘贴命令" class="headerlink" title="粘贴命令"></a>粘贴命令</h5><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">p:</span> 整行粘贴则在下方另起一行，否则直接粘贴在其后<br><span class="hljs-symbol">P:</span> 整行粘贴则在上方另起一行，否则直接粘贴在其前<br></code></pre></td></tr></table></figure><h5 id="复制命令"><a href="#复制命令" class="headerlink" title="复制命令"></a>复制命令</h5><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">y:</span> 复制，类似于 d 命令<br><br><span class="hljs-symbol">yy:</span> 复制一整行<br></code></pre></td></tr></table></figure><h5 id="改变命令"><a href="#改变命令" class="headerlink" title="改变命令"></a>改变命令</h5><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">c:</span> 删除并进入输入模式<br></code></pre></td></tr></table></figure><h4 id="可视化模式"><a href="#可视化模式" class="headerlink" title="可视化模式"></a>可视化模式</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">v:</span> 按字符选定<br><span class="hljs-symbol">V:</span> 按行选定<br></code></pre></td></tr></table></figure><h4 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">u: 撤销</span><br><span class="hljs-section">Ctrl+r: 取消撤销</span><br></code></pre></td></tr></table></figure><h4 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h4><blockquote><p>内建命令行接口</p></blockquote><h5 id="地址定界"><a href="#地址定界" class="headerlink" title="地址定界"></a>地址定界</h5><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">#：第 # 行<br>#,#：第 # 到 # 行<br>#,+#：第 # 行 偏移 # 行<br>%：全文<br>/reg/：第一次被匹配的文本 <br></code></pre></td></tr></table></figure><h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">/reg：从光标所在处往后查找所有匹配字符<br>?reg：从光标所在处往前查找所有匹配字符<br><span class="hljs-built_in">n</span>：下一个<br><span class="hljs-built_in">N</span>：上一个<br></code></pre></td></tr></table></figure><h5 id="查找并替换"><a href="#查找并替换" class="headerlink" title="查找并替换"></a>查找并替换</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">s<span class="hljs-regexp">/要查找的内容/</span>替换的内容/修饰符<br><br>修饰符：i：忽略大小写<br>   g：全局替换<br></code></pre></td></tr></table></figure><h4 id="多文件模式"><a href="#多文件模式" class="headerlink" title="多文件模式"></a>多文件模式</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:next</span> 下一个文件<br><span class="hljs-symbol">:prev</span> 前一个文件<br><span class="hljs-symbol">:last</span> 最后一个<br><br><span class="hljs-symbol">:wqall</span> 保存所有文件并推出<br><span class="hljs-symbol">:wall</span> 保存所有文件<br><span class="hljs-symbol">:qall</span> 退出所有文件<br></code></pre></td></tr></table></figure><h4 id="多窗口机制"><a href="#多窗口机制" class="headerlink" title="多窗口机制"></a>多窗口机制</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-o：水平分割窗口</span><br><span class="hljs-deletion">-O：垂直分割窗口</span><br>Ctrl+w,arrow：切换<br>Ctrl+w,s：水平分割<br>Ctrl+w,v：垂直分割<br></code></pre></td></tr></table></figure><h4 id="定制Vim"><a href="#定制Vim" class="headerlink" title="定制Vim"></a>定制Vim</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> number（<span class="hljs-built_in">set</span> nu）：显示行号<br><span class="hljs-built_in">set</span> nomber（<span class="hljs-built_in">set</span> nonu）：取消显示行号<br><span class="hljs-built_in">set</span> ai：自动缩进<br><span class="hljs-built_in">set</span> noai：取消自动缩进<br><span class="hljs-built_in">set</span> hlsearch：高亮搜索<br><span class="hljs-built_in">set</span> nohlsearch：取消高亮搜索<br>syntax on：语法高亮<br>syntax off：取消语法高亮<br><span class="hljs-built_in">set</span> lc：忽略大小写<br><span class="hljs-built_in">set</span> nocl：取消忽略大小写 <br></code></pre></td></tr></table></figure><h3 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h3><h4 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h4><p>依赖于事先构建好的索引库</p><ul><li>系统自动实现（周期性任务）</li><li>手动更新数据库（updatedb）</li></ul><p>工作特性</p><ul><li>查找速度快</li><li>模糊查找</li><li>非实时查找</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-b：只匹配 basename</span><br><span class="hljs-deletion">-c：统计出多少符合条件的数量</span><br><span class="hljs-deletion">-r：使用正则表达式</span><br></code></pre></td></tr></table></figure><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>工作特性</p><ul><li>查找速度慢</li><li>精确查找</li><li>实时查找</li></ul><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs ldif">find [OPTION] [查找起始路径][查找条件][处理动作]<br><br><span class="hljs-literal">-</span>name pattern：查找文件名（精确查找） pattern 为 gloB 通配符<br><span class="hljs-literal">-</span>iname pattern：不区分大小写<br><span class="hljs-literal">-</span>user USERNAEM：查找属主<br><span class="hljs-literal">-</span>group GROUPNAME：查找属组<br><span class="hljs-literal">-</span>uid UID：查找属主 uid<br><span class="hljs-literal">-</span>gid GID：查找属组 gid<br><span class="hljs-literal">-</span>nouser：查找没有属主<br><span class="hljs-literal">-</span>nogroup：查找没有属组<br><span class="hljs-literal">-</span>type TYPE：查找文件类型<br>f:普通文件<br>d:目录文件<br>l:符号链接文件<br>b:块设备文件<br>c:字符设备文件<br>p:管道文件<br>s:套接字文件<br><span class="hljs-literal">-</span>size [+|-]<span class="hljs-comment">#</span><br><span class="hljs-comment">#为单位，k,M,G</span><br><span class="hljs-literal">-</span>atime/-amin [+|-]<span class="hljs-comment">#</span><br>根据访问时间查找<br><span class="hljs-literal">-</span>mtime/-mmin [+|-]<span class="hljs-comment">#</span><br>根据修改时间查找<br><span class="hljs-literal">-</span>ctime/-cmin [+|-]<span class="hljs-comment">#</span><br>根据改变时间查找<br><br><span class="hljs-literal">-</span>prem mode<br><br>处理动作：<br><br>默认动作为 -print<br><span class="hljs-literal">-</span>ls：输出文件详细信息<br><span class="hljs-literal">-</span>delete：删除查找的文件<br><span class="hljs-literal">-</span>fls /PATH：ls的输出信息保存指定文件<br><span class="hljs-literal">-</span>ok COMMAND &#123;&#125;\; ：对查找的每个文件执行命令<br></code></pre></td></tr></table></figure><h3 id="特殊权限"><a href="#特殊权限" class="headerlink" title="特殊权限"></a>特殊权限</h3><h4 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h4><p>默认情况下，用户发起的进程，进程的属主是其发起者，因此其以发起者的身份在运行。如果此程序拥有 SUID 权限（u&#x3D;rws），则程序运行为进程时，进程的属主不是发起者，而是程序文件自己的属主。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> u+s FILE<br></code></pre></td></tr></table></figure><h4 id="SGID"><a href="#SGID" class="headerlink" title="SGID"></a>SGID</h4><p>当目录属组有写权限时，且有 SGID 权限时（g&#x3D;rws），那么所有属于此目录的属组，且以属组身份在此目录中新建文件或目录时，新文件的属组不是用户的基本组，而是此目录的属组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> u+s FILE<br></code></pre></td></tr></table></figure><h4 id="STIKY"><a href="#STIKY" class="headerlink" title="STIKY"></a>STIKY</h4><p>对于属组或全局可写得到目录，组内的所有用户或系统上的所有系统的所有用户对此目录中都能创建新文件或删除所有的已有文件，如果此类目录设置 Stiky 权限（o&#x3D;rwt），则每个用户能创建新文件，且只能删除自己的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> o+t FILE<br></code></pre></td></tr></table></figure><h4 id="facl"><a href="#facl" class="headerlink" title="facl"></a>facl</h4><p>额外赋权机制，另一层让普通用户能控制赋权给另外的用户或租的赋权机制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 获取文件的 facl 权限</span><br>getfacl FLIE<br><br><span class="hljs-comment"># 设置文件的 facl 权限</span><br>setfacl -m u:USERNAME:MODE FILE<br>setfacl -m g:GROUPNAME:MODE FILE<br><br><span class="hljs-comment"># 撤销赋权</span><br>setfacl -x u:USERNAME FILE<br>setfacl -x g:GROUPNAME FILE<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>支付宝多账号同步</title>
    <link href="/2020/11/07/AlipayAutoSync/"/>
    <url>/2020/11/07/AlipayAutoSync/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>主要实现功能为支付宝多账号切换 + 进入运动进行步数同步</p>          </div> <span id="more"></span><div class="note note-success">            <p>本脚本所使用的autojs版本为 —&gt; <a href="https://lingsiki.lanzoui.com/in80Mi4ve3a">Auto.js_4.1.1 Alpha2</a><br>实现原理：利用三星健康管理刷三星健康的步数，然后把三星健康的步数同步到每一个小号上</p>          </div><h3 id="一、基本功能"><a href="#一、基本功能" class="headerlink" title="一、基本功能"></a>一、基本功能</h3><ol><li>支付宝刷步数</li><li>支付宝账号切换</li><li>运动同步以及捐步</li></ol><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><h4 id="1、关闭支付宝"><a href="#1、关闭支付宝" class="headerlink" title="1、关闭支付宝"></a>1、关闭支付宝</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 关闭支付宝函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">closeAlipay</span>(<span class="hljs-params"></span>)&#123;<br>    appName = app.<span class="hljs-title function_">getPackageName</span>(<span class="hljs-string">&#x27;支付宝&#x27;</span>)<br>    app.<span class="hljs-title function_">openAppSetting</span>(appName)<br>    <span class="hljs-title function_">sleep</span>(<span class="hljs-number">1000</span>)<br>    <span class="hljs-keyword">var</span> obj = <span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;结束运行&#x27;</span>).<span class="hljs-title function_">findOne</span>(<span class="hljs-number">5000</span>)<br>    <span class="hljs-title function_">clickCenter</span>(obj)<br>    <span class="hljs-keyword">var</span> btn = <span class="hljs-title function_">idContains</span>(<span class="hljs-string">&#x27;button1&#x27;</span>).<span class="hljs-title function_">findOne</span>(<span class="hljs-number">1000</span>)<br>    <span class="hljs-keyword">if</span> (btn)&#123;<br>        btn.<span class="hljs-title function_">click</span>()<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;支付宝关闭成功！\n开启任务&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、支付宝刷步数"><a href="#2、支付宝刷步数" class="headerlink" title="2、支付宝刷步数"></a>2、支付宝刷步数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 利用三星健康 + 三星健康管理实现支付宝刷步数</span><br><span class="hljs-comment"> * 环境搭建（Root手机）：</span><br><span class="hljs-comment"> * 1、下载刷步数三件套（https://lingsiki.lanzoui.com/b0ejfe25a）。</span><br><span class="hljs-comment"> * 2、edxp激活应用变量模块，并且设置三星健康、支付宝和三星健康管理模拟机型为三星型号手机。</span><br><span class="hljs-comment"> * 3、进入三星健康设置-关于三星健康点击版本号十次开启开发者模式-然后进入数据权限开启支付宝和三星健康管理的所有权限。</span><br><span class="hljs-comment"> * 4、进入支付宝的支付宝运动-右上角三点进入设置，开启记录运动数据。</span><br><span class="hljs-comment"> * 5、保持三星健康在后台，打开三星健康管理增加步数，进入三星健康等一会儿即可同步步数，最后关闭重启支付宝，进入运动查看同步情况</span><br><span class="hljs-comment"> * 6、若失败可能是机型伪装的问题，也有可能是第一天刷步数可能延迟会有点大，第二天以后一般都是秒同步的</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">步数=count * 12000</span>&#125; count </span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">steps</span>(<span class="hljs-params">count</span>) &#123;<br>    <span class="hljs-title function_">launchApp</span>(<span class="hljs-string">&#x27;三星健康&#x27;</span>);<br>    <span class="hljs-title function_">sleep</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-title function_">sleep</span>(<span class="hljs-number">1000</span>);<br>    app.<span class="hljs-title function_">launch</span>(<span class="hljs-string">&quot;com.samsung.android.app.health.dataviewer&quot;</span>);<br>    <span class="hljs-title function_">idContains</span>(<span class="hljs-string">&quot;floatingActionButton&quot;</span>).<span class="hljs-title function_">waitFor</span>()<br>    <span class="hljs-title function_">sleep</span>(<span class="hljs-number">1000</span>)<br>    <span class="hljs-title function_">sleep</span>(<span class="hljs-number">1000</span>)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; count; index++) &#123;<br>        <span class="hljs-title function_">idContains</span>(<span class="hljs-string">&quot;floatingActionButton&quot;</span>).<span class="hljs-title function_">findOne</span>().<span class="hljs-title function_">click</span>()<br>        <span class="hljs-title function_">sleep</span>(<span class="hljs-number">500</span>)<br>        <span class="hljs-title function_">click</span>(<span class="hljs-number">800</span>, <span class="hljs-number">1750</span>)<br>        <span class="hljs-title function_">sleep</span>(<span class="hljs-number">500</span>)<br>    &#125;<br>    <span class="hljs-title function_">launchApp</span>(<span class="hljs-string">&#x27;三星健康&#x27;</span>);<br>    <span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;主页&#x27;</span>).<span class="hljs-title function_">waitFor</span>();<br>    <span class="hljs-keyword">var</span> obj = <span class="hljs-title function_">idContains</span>(<span class="hljs-string">&#x27;goal&#x27;</span>).<span class="hljs-title function_">findOne</span>()<br>    <span class="hljs-title function_">clickCenter</span>(obj);<br>    <span class="hljs-title function_">sleep</span>(<span class="hljs-number">5000</span>)<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>        step = <span class="hljs-title function_">idContains</span>(<span class="hljs-string">&#x27;current_steps&#x27;</span>).<span class="hljs-title function_">findOne</span>().<span class="hljs-title function_">text</span>()<br>        <span class="hljs-keyword">if</span> (step != <span class="hljs-string">&#x27;0&#x27;</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;当前刷步数为：&quot;</span> + step)<br>            <span class="hljs-keyword">return</span> step;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、支付宝登录"><a href="#3、支付宝登录" class="headerlink" title="3、支付宝登录"></a>3、支付宝登录</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 支付宝登录函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">账号</span>&#125; accont </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">密码</span>&#125; key </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">accont, key</span>) &#123;<br>    <span class="hljs-comment">// 进入支付宝密码登录界面</span><br>    app.<span class="hljs-title function_">startActivity</span>(app.<span class="hljs-title function_">intent</span>(&#123;<br>        <span class="hljs-attr">action</span>: <span class="hljs-string">&quot;VIEW&quot;</span>,<br>        <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;alipayqr://platformapi/startapp?appId=20000008&quot;</span>,<br>    &#125;));<br>    <span class="hljs-title function_">textMatches</span>(<span class="hljs-string">&quot;换个账号登录&quot;</span>).<span class="hljs-title function_">findOne</span>(<span class="hljs-number">5000</span>)<br>    <span class="hljs-title function_">click</span>(<span class="hljs-string">&quot;换个账号登录&quot;</span>)<br>    <span class="hljs-title function_">sleep</span>(<span class="hljs-number">400</span>)<br>    <span class="hljs-title function_">setText</span>(<span class="hljs-number">0</span>, accont);<br>    <span class="hljs-title function_">textMatches</span>(<span class="hljs-string">&quot;下一步&quot;</span>).<span class="hljs-title function_">findOne</span>(<span class="hljs-number">5000</span>)<br>    <span class="hljs-title function_">click</span>(<span class="hljs-string">&quot;下一步&quot;</span>)<br>    <span class="hljs-title function_">textContains</span>(<span class="hljs-string">&quot;换个方式登录&quot;</span>).<span class="hljs-title function_">waitFor</span>()<br>    <span class="hljs-keyword">var</span> obj = <span class="hljs-title function_">textMatches</span>(<span class="hljs-regexp">/短信验证码登录|指纹登录|换个方式登录/</span>).<span class="hljs-title function_">findOne</span>().<span class="hljs-title function_">text</span>()<br>    <span class="hljs-keyword">if</span> (obj == <span class="hljs-string">&quot;短信验证码登录&quot;</span> || obj == <span class="hljs-string">&quot;指纹登录&quot;</span>) &#123;<br>        <span class="hljs-title function_">sleep</span>(<span class="hljs-number">500</span>)<br>        <span class="hljs-title function_">textMatches</span>(<span class="hljs-regexp">/换个验证方式|换个方式登录/</span>).<span class="hljs-title function_">findOne</span>()<br>        <span class="hljs-title function_">clickCenter</span>(<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;换个方式登录&quot;</span>).<span class="hljs-title function_">findOne</span>(<span class="hljs-number">2000</span>))<br>        <span class="hljs-title function_">clickCenter</span>(<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;换个验证方式&quot;</span>).<span class="hljs-title function_">findOne</span>(<span class="hljs-number">2000</span>))<br>        <span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;密码登录&quot;</span>).<span class="hljs-title function_">findOne</span>()<br>        <span class="hljs-title function_">sleep</span>(<span class="hljs-number">400</span>)<br>        <span class="hljs-keyword">while</span> (!<span class="hljs-title function_">click</span>(<span class="hljs-string">&quot;密码登录&quot;</span>)) &#123; &#125;<br>        <span class="hljs-title function_">sleep</span>(<span class="hljs-number">200</span>)<br>        <span class="hljs-title function_">setText</span>(<span class="hljs-number">0</span>, accont);<br>        <span class="hljs-title function_">sleep</span>(<span class="hljs-number">200</span>);<br>        <span class="hljs-title function_">setText</span>(<span class="hljs-number">1</span>, key);<br>        <span class="hljs-title function_">sleep</span>(<span class="hljs-number">200</span>)<br>        <span class="hljs-title function_">idContains</span>(<span class="hljs-string">&quot;loginButton&quot;</span>).<span class="hljs-title function_">findOne</span>().<span class="hljs-title function_">click</span>()<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(accont, <span class="hljs-string">&quot;登录成功&quot;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">sleep</span>(<span class="hljs-number">400</span>)<br>        <span class="hljs-title function_">setText</span>(<span class="hljs-number">1</span>, key);<br>        <span class="hljs-title function_">sleep</span>(<span class="hljs-number">400</span>)<br>        <span class="hljs-title function_">idContains</span>(<span class="hljs-string">&quot;loginButton&quot;</span>).<span class="hljs-title function_">findOne</span>().<span class="hljs-title function_">click</span>()<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(accont, <span class="hljs-string">&quot;登录成功&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、步数同步"><a href="#4、步数同步" class="headerlink" title="4、步数同步"></a>4、步数同步</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 进入支付宝运动步数同步以及捐步</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">go_sports</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">sleep</span>(<span class="hljs-number">2000</span>)<br>    app.<span class="hljs-title function_">startActivity</span>(&#123;<br>        <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;alipayqr://platformapi/startapp?saId=20000869&quot;</span><br>    &#125;)<br>    <span class="hljs-title function_">textContains</span>(<span class="hljs-string">&quot;走路线&quot;</span>).<span class="hljs-title function_">waitFor</span>();<br>    <span class="hljs-title function_">swipe</span>(device.<span class="hljs-property">width</span> / <span class="hljs-number">9</span> * <span class="hljs-number">8</span>, device.<span class="hljs-property">height</span> / <span class="hljs-number">3</span>, device.<span class="hljs-property">width</span> / <span class="hljs-number">9</span> * <span class="hljs-number">8</span>, device.<span class="hljs-property">height</span> / <span class="hljs-number">3</span> * <span class="hljs-number">2</span>, <span class="hljs-number">500</span>)<br>    <span class="hljs-title function_">sleep</span>(<span class="hljs-number">5000</span>)<br>    <span class="hljs-keyword">var</span> obj1 = <span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;去捐步&#x27;</span>).<span class="hljs-title function_">findOne</span>(<span class="hljs-number">1000</span>)<br>    <span class="hljs-keyword">if</span> (obj1 != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-title function_">clickCenter</span>(<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;去捐步&#x27;</span>).<span class="hljs-title function_">findOne</span>())<br>        <span class="hljs-title function_">sleep</span>(<span class="hljs-number">3000</span>)<br>        <span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;立即捐步&#x27;</span>).<span class="hljs-title function_">findOne</span>()<br>        <span class="hljs-title function_">sleep</span>(<span class="hljs-number">200</span>)<br>        <span class="hljs-keyword">while</span> (!<span class="hljs-title function_">click</span>(<span class="hljs-string">&quot;立即捐步&quot;</span>)) &#123;&#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;捐步成功&#x27;</span>)<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;已经捐完步数了&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、进入蚂蚁森林"><a href="#5、进入蚂蚁森林" class="headerlink" title="5、进入蚂蚁森林"></a>5、进入蚂蚁森林</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 进入蚂蚁森林</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">enterForest</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">sleep</span>(<span class="hljs-number">2000</span>)<br>    app.<span class="hljs-title function_">startActivity</span>(&#123;<br>        <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;alipayqr://platformapi/startapp?saId=60000002&quot;</span><br>    &#125;)<br>    <span class="hljs-title function_">sleep</span>(<span class="hljs-number">8000</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h3><p>下载链接：<a href="https://github.com/ReaJason/AutoJsScripts/blob/master/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%A4%9A%E8%B4%A6%E5%8F%B7%E5%88%87%E6%8D%A2%E6%AD%A5%E6%95%B0%E5%90%8C%E6%AD%A5%E8%84%9A%E6%9C%AC.js">GitHub地址链接</a></p><h3 id="四、运行效果"><a href="#四、运行效果" class="headerlink" title="四、运行效果"></a>四、运行效果</h3><iframe height="400" width="500" src="//player.bilibili.com/player.html?aid=670137563&bvid=BV17a4y1s7nP&cid=253887490&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="五、注意事项"><a href="#五、注意事项" class="headerlink" title="五、注意事项"></a>五、注意事项</h3><ol><li>安装autojs之后，点击右小角新建文件，将完整代码粘贴进去，开启无障碍模式即可运行</li><li>使用时修改小号账号和密码，以及大号账号和密码即可</li><li>每一部手机的脚本运行效果可能会不一样，因为软件的局限性</li><li>可以根据autojs的文档自己编写脚本 —&gt; <a href="https://hyb1996.github.io/AutoJs-Docs/#/">AutoJs-Docs</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>AutoJs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Script</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
