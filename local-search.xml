<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>梦想是注定孤独的旅行</title>
    <link href="/2021/08/08/BeStrongerAndBetter/"/>
    <url>/2021/08/08/BeStrongerAndBetter/</url>
    
    <content type="html"><![CDATA[<center><h1>Notions</h1></center><a id="more"></a><p>&emsp;&emsp;刚毕完业，就兴致冲冲地出来找工作，由于自己很菜，又不愿待在原专业去工地上，所以最后跌跌撞撞找到了深圳一个办公室敲代码的工作，勉勉强强维持生计的样子，6-24 号就跑出来，现在也一个多月了，慢慢地适应了这边的生活，收获了许多也成长了不少。</p><p>&emsp;&emsp;刚出来那一会儿，每天晚上都不想回到那个城中村的小房子里面，一 <strong>热</strong>，开空调费电，二 <strong>网差</strong>，联通直接没信号。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/BeStrongerAndBetter_img/place.jpg" alt="井底之蛙视角"></p><p>&emsp;&emsp;工作完之后，把东西放在房间里就出去散步，然后拿起手机打开微信看今天该和谁视频电话了，那段时间每天找家里人或者朋友们微信视频通话（有说不完的话，因为第一次出远门工作，新奇的经历）。今天给小郑同学打电话，明天给爸爸妈妈打，后天给奶奶外婆，还有苟哥、俊宏、叔叔、姨妈等等……在外面散步的时候由于深圳沿海，风吹拂在脸上，清凉又舒服，和他们视频的时候有讲不完的话，但每当回到房间里面，关上灯侧躺着准备睡觉的时候，眼角的泪水就开始奔涌不止，不是初来深圳的生活陌生而孤独想哭，而更多的是感动幸福得想哭——妈妈帮我找这边的熟人看有没有深圳工作的可以照顾照顾我；奶奶有天打电话过来说哪个附近有认识的人，你周末可以去那玩玩；姨妈姑姑都对我说一个人在外面工作不要舍不得吃，姨妈还给我还发了个小红包；小郑同学我每天打过去也不会嫌我烦，虽然 ta 学习压力比较大也会聆听我这边的工作生活等等。伴随着泪水的留下，我成长了许多，从小到大由于我喜欢做噩梦，晚上一个人睡觉从来不敢关灯睡觉，一关灯脑子就会充斥着鬼或者很害怕的事情，不过在这边每天晚上都能把灯关了。在这边做需求能很快能完成，Oracle 写查询语句，做接口开发也很熟练了，个人能力得到了一定的认可。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/BeStrongerAndBetter_img/notes.png" alt="好好记账、写写日记"></p><p>  现在工作稳定了，因此开始考虑个人素质能力的提高上，开始规划『未来』，上上周开始每天晚上有规律的进行身体锻炼，上周开始发现自己想学习的东西一直很多，必须找个方法规划好自己的计划让我更好的学习和执行，因此开始学习 GTD（<a href="https://gettingthingsdone.com/">Getting Things Done</a>），然后使用 <a href="https://zh.wikipedia.org/zh-hans/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95">番茄钟</a> 进行工作和学习，想用 <a href="https://www.notion.so/zh-cn">notion</a> 来管理自己的计划和知识（但目前还没学会），工具什么的适合自己的才是做好的。到目前为止可以看出我想做的事情真的很多，脑子有时候一片浆糊，不过当我写下之后，脑子里面确实会舒服很多。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/BeStrongerAndBetter_img/todolist.png" alt="Typora YYDS"></p><p>  梦想是注定孤独的旅行，希望大家都能脚踏实地，仰望星空，成为自己想成为的模样，在最该努力奋斗的日子多为自己或者是后代的命运奋斗一点。</p>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows10 使用心得与总结</title>
    <link href="/2021/05/01/WindowsUsage/"/>
    <url>/2021/05/01/WindowsUsage/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>🙄Windows10 一个玩英雄联盟的系统而已</p>          </div><a id="more"></a><h2 id="🙋‍♂️前言"><a href="#🙋‍♂️前言" class="headerlink" title="🙋‍♂️前言"></a>🙋‍♂️前言</h2><p>&emsp;&emsp;Windows10 操作系统基本我们买电脑，初始系统就这个（Mac 除外），电脑是一个工具就和手机一样，使用起来得心应手，效率自然就越高。不知道大家是否用电脑觉得都是越用越卡，越用越不舒服，也不知道为什么就是老卡，其实也不需要用什么大型软件，其实就是我们的使用习惯不是很好。</p><p>&emsp;&emsp;我们其实都不自觉的在拿到电脑之后设置成自己喜欢的样子，下面我会分享一些我常用的操作以及一些使用经验，有些地方还是遵从你们自己的使用体验来，并不一定我的就适合你的。</p><h2 id="🔥常用快捷键"><a href="#🔥常用快捷键" class="headerlink" title="🔥常用快捷键"></a>🔥常用快捷键</h2><p>&emsp;&emsp;快捷键这块其实比较看使用习惯，以下是我的一些常用快捷键，使用频率基本很高，快捷键很多（大家百度一片），我基本这么点完全够用。</p><ul><li><code>Win+I</code>：打开 Windows 设置，一键呼出它不香吗😏</li><li><code>Win+.</code>：打开 emoji，博客文章表情出处！</li><li><code>Win+V</code>：开启/打开剪贴板，Win10 大加强，连复制的图片都有，终于不用蠢萌蠢萌地复制一个粘贴一个</li><li><code>Win+Q</code>：打开 Windows 搜索，最近常用，搜索设置里面的东西很香</li><li><code>Ctrl+A</code>：全选，不要鼠标从头拖到尾了，用到老</li><li><code>Ctrl+C</code>：复制，用到老</li><li><code>Ctrl+V</code>：粘贴，用到老</li><li><code>Ctrl+Z</code>：撤回，用到老</li><li><code>Ctrl+X</code>：剪切，用到老</li><li><code>Ctrl+Shift+Z</code>：恢复，基本可以说是我撤销多了，然后这组快捷键返回去</li><li><code>Ctrl+F</code>：查找，网页可以，word 文档中也可，记事本中也可，基本用来查找文本</li><li><code>Alt+Tab</code>：按住 <code>Alt</code>，继续按 <code>Tab</code> 切换程序，现在基本用鼠标任务栏点击切换了</li><li><code>F2</code>：重命名，点击文件按 <code>F2</code> 即可，比起鼠标右键然后去选快 100 倍！</li><li><code>Esc</code>：退出，某些场景下可用</li><li><code>Alt+F4</code>：关闭当前程序，在桌面按该快捷键可以弹出关机选项</li><li>待补充……</li></ul><h2 id="⚙Windows设置"><a href="#⚙Windows设置" class="headerlink" title="⚙Windows设置"></a>⚙Windows设置</h2><h3 id="🤏更改用户账户控制设置"><a href="#🤏更改用户账户控制设置" class="headerlink" title="🤏更改用户账户控制设置"></a>🤏更改用户账户控制设置</h3><p>&emsp;&emsp;有些图标带着盾牌的软件，Windows 出于保护电脑，会需要点一个确认才能继续运行，我安装这个软件显然我就是要用咯，这不就是多余操作吗？！当然对于使用习惯还没那么好的小伙伴还是建议先默认就好了，毕竟有些时候谈一些莫名其妙的或者后台莫名其妙运行软件可以阻止运行。</p><p>&emsp;&emsp;<code>Win+Q</code>，打开 Windows 搜索，搜索 <code>更改用户账户控制设置</code>，回车进入，拉到最低，打开这类软件就不会需要点确定了。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WindowsUsage_img/%E6%9B%B4%E6%94%B9%E7%94%A8%E6%88%B7%E8%B4%A6%E6%88%B7%E6%8E%A7%E5%88%B6%E8%AE%BE%E7%BD%AE.png" alt="更改用户账户控制设置.jpg"></p><h3 id="💻我的电脑-amp-回收站"><a href="#💻我的电脑-amp-回收站" class="headerlink" title="💻我的电脑&amp;回收站"></a>💻我的电脑&amp;回收站</h3><p>&emsp;&emsp;<code>Win+Q</code>，搜索 <code>主题和相关设置</code>，回车进入，（或者桌面右键选择个性化，然后进入主题），找到相关设置中的桌面图标管理，选择对应选项，即可在桌面显示图标</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WindowsUsage_img/%E4%B8%BB%E9%A2%98%E5%92%8C%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE.png" alt="主题和相关设置.png"></p><h3 id="💿磁盘管理"><a href="#💿磁盘管理" class="headerlink" title="💿磁盘管理"></a>💿磁盘管理</h3><p>&emsp;&emsp;<code>Win+Q</code>，搜索 <code>创建并格式化硬盘分区</code>，回车进入，（或者在桌面左下角 Windows 标志处，右键选择磁盘管理），在这里可以看到自己的硬盘个数和分区情况，一般新买的硬盘插入电脑或重装之后需要在此初始化硬盘分区。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WindowsUsage_img/win.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WindowsUsage_img/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86.png" alt="磁盘管理.png"></p><h3 id="📌Win-E-打开我的电脑"><a href="#📌Win-E-打开我的电脑" class="headerlink" title="📌Win+E 打开我的电脑"></a>📌Win+E 打开我的电脑</h3><p>  打开我的电脑，点击上边菜单栏的查看，进入选项，设置打开文件资源管理器时打开此电脑，然后应用，之后使用 <code>Win + E</code> 即可打开我的电脑，个人觉得非常舒适。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WindowsUsage_img/win+e.png" alt="win+e.png"></p><h2 id="📁文件管理"><a href="#📁文件管理" class="headerlink" title="📁文件管理"></a>📁文件管理</h2><p>&emsp;&emsp;我猜还是有很多小伙伴不太会管理自己的文件，管理磁盘空间吧，文件需要管理也就像我们知识需要管理，你要以最快地速度找到它，那么文件夹以及文件对方就应该更加合理，或者说自己知道它到底在哪，而不是随意安放。 </p><p>&emsp;&emsp;我觉得我自己的文件分类也并不是最好的，毕竟有时候自己看着目录也烦，翻得难受，但是总会翻到，毕竟我能放到的只有这里。基本大家盘符比较多，我推荐使用一个你觉得你能把里面的东西全清空的作为你开始文件管理的磁盘（尽量足够大），由于我并没有分盘，所以我有 1T，如果你分盘了，你也可以使用分盘管理，就不同类文件放不同盘符。</p><ul><li>QQ<ul><li>QQData（用来存放 QQ 数据），需要打开 QQ 自行指定</li></ul></li><li>WeChat<ul><li>WeChatData（用来存放微信数据），需要打开微信自行指定</li></ul></li><li>Software（各类软件存放目录）<ul><li>软件安装方式见下节（推荐为先为软件在此创建文件夹，然后安装选船舰的文件夹）</li></ul></li><li>ReaJason（以自己用户名取名，存放自己的文件）<ul><li>我的文档</li><li>我的音乐</li><li>我的电影</li><li>我的资源</li><li>我的手机</li><li>我的笔记</li></ul></li><li>Download（下载目录）（基本浏览器，下载器全指向该文件夹）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WindowsUsage_img/File_Manage1.png" alt="我的 1T 机械盘"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WindowsUsage_img/File_Manage2.png" alt="个人文件目录"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WindowsUsage_img/File_Manage3.png" alt="软件目录"></p><h2 id="🌊软件安装与卸载"><a href="#🌊软件安装与卸载" class="headerlink" title="🌊软件安装与卸载"></a>🌊软件安装与卸载</h2><div class="note note-warning">            <p>我建议 360 全家桶和 2345 全家桶一定不要碰，高速下载也一定不要碰！</p>          </div><h3 id="💡下载地址首选官网"><a href="#💡下载地址首选官网" class="headerlink" title="💡下载地址首选官网"></a>💡下载地址首选官网</h3><ul><li><a href="https://im.qq.com/pcqq/">QQ PC 下载官网</a></li><li><a href="https://pc.weixin.qq.com/">微信 PC 下载官网</a></li><li><a href="https://www.microsoft.com/zh-cn/edge">Microsoft Edge</a></li><li><a href="https://store.steampowered.com/about/">Steam 下载官网</a></li><li><a href="https://www.wegame.com.cn/client">WeGame 下载官网</a></li><li>……</li></ul><h3 id="🔔其次软件分享网站"><a href="#🔔其次软件分享网站" class="headerlink" title="🔔其次软件分享网站"></a>🔔其次软件分享网站</h3><p>&emsp;&emsp;这类网站下载的软件大多为修改版或者破解版，其中也有便携版，便携版的意思为解压即可使用，而不需要安装选定安装目录，安装目录即是你解压之后的文件夹</p><p>&emsp;&emsp;为什么使用修改版或破解版，原因一，官方版可能存在太多广告，经常性地弹出广告，需要手动关，而且广告很多很辣鸡，就好像那 辣鸡 qq 空间的好友热播，全是那种，见一个就举报低俗，就有些广告很恶心，严重影响使用体验；原因二，修改版可能会添加一点稍微实用的功能，也有些基本傻瓜式配置好了，打开就能用；原因三，官方原版收费，只能破解版。当然对于破解版软件，如自身有条件 <strong>请支持正版</strong>。</p><ul><li><a href="https://www.423down.com/">423Down</a></li><li><a href="https://www.ghpym.com/">果核剥壳</a></li><li><a href="https://www.pilifx.com/">霹雳分享</a></li><li><a href="http://axutongxue.com/">阿虚同学的储物间</a></li><li><a href="http://www.chendandan.ys168.com/">陈蛋蛋的宝藏库</a></li><li><a href="https://www.52pojie.cn/forum-16-1.html">吾爱破解</a></li><li>……</li></ul><h3 id="🎉安装建议"><a href="#🎉安装建议" class="headerlink" title="🎉安装建议"></a>🎉安装建议</h3><ol><li>安装软件前建议为软件创建一个文件夹（尽量使用英语），不知道怎么命名的话，可以打开安装，等需要指定目录的时候，复制它自动创建的文件夹名，然后重新指定到自己的文件夹即可。</li><li>使用自定义安装！即自己指定安装在上面创建的文件夹中。</li><li>尽量不要安装在系统盘（C 盘），因为 C 盘不够大的话，当 C 盘变红（即小于 10G）会严重影响电脑性能。</li><li>便携版的解压下来，把文件夹移到你的软件目录，打开使用即可，上图 我的软件目录带版本号的即是使用的便携版软件</li></ol><h3 id="🎉卸载建议"><a href="#🎉卸载建议" class="headerlink" title="🎉卸载建议"></a>🎉卸载建议</h3><p>&emsp;&emsp;推荐使用 <a href="https://geekuninstaller.com/download">geek uninstaller</a>，一款公认比较🐂的卸载工具，非常便携，下载打开即可用（下载左边 free 版即可），使用该款软件卸载的原因是，卸载软件会将关联的文件夹和注册表同时删除掉，最后选择删除文件夹的时候，自己稍加注意一下不是自己重要的文件夹即可。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WindowsUsage_img/geek_uninstaller.png" alt="geek_uninstaller.png"></p><h2 id="🎨浏览器调教"><a href="#🎨浏览器调教" class="headerlink" title="🎨浏览器调教"></a>🎨浏览器调教</h2><div class="note note-info">            <p>以 Windows10 自带的 Microsoft Edge 为例，进行演示</p><p>目前该款以 Chromium 内核的浏览器还不错，推荐使用</p>          </div><h3 id="🛠浏览器扩展"><a href="#🛠浏览器扩展" class="headerlink" title="🛠浏览器扩展"></a>🛠浏览器扩展</h3><p>&emsp;&emsp;绝大多数浏览器基本都配备了扩展插件这个功能，在浏览器右边三个点，扩展，点击进入到扩展管理页面，可以看到自己已安装，也可以 <a href="https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home?hl=zh-CN">搜索</a> 安装扩展插件。</p><p>&emsp;&emsp;可以在此处查看浏览器扩展推荐：<a href="https://zhaoolee.gitbooks.io/chrome/content/">编者序 · Chrome 插件英雄榜</a></p><p>&emsp;&emsp;我使用的插件列表：</p><p>&emsp;&emsp;1. <a href="https://microsoftedge.microsoft.com/addons/detail/adguard-%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E5%99%A8/pdffkfellgipmhklpdmokmckkkfcopbh?hl=zh-CN">AdGuard 广告拦截器 - Microsoft Edge Addons</a>——网页去广告<br>&emsp;&emsp;2. <a href="https://microsoftedge.microsoft.com/addons/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/idghocbbahafpfhjnfhpbfbmpegphmmp?hl=zh-CN">沙拉查词-聚合词典划词翻译 - Microsoft Edge Addons</a>——网页划词翻译<br>&emsp;&emsp;3. <a href="https://microsoftedge.microsoft.com/addons/detail/tampermonkey/iikmkjmpaadaobahmlepeloendndfphd?hl=zh-CN">Tampermonkey - Microsoft Edge Addons</a>——搭配 <a href="https://greasyfork.org/zh-CN/scripts">油猴脚本</a>，起飞<br>&emsp;&emsp;4. 其他很多基本不怎么用……</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WindowsUsage_img/Microsoft_edge_extension.png" alt="Microsoft_edge_extension.png"></p><h3 id="🏷书签管理"><a href="#🏷书签管理" class="headerlink" title="🏷书签管理"></a>🏷书签管理</h3><p>  书签管理其实和文件管理一样，管理自己浏览过的网页，收藏下来方便下次浏览与使用，建议大家下意识管理自己的书签，遇到自己觉得有用的网站或者最近常用的网站，即收藏到书签栏，或者相应的书签文件夹，就在网页链接的最后有一个 ⭐+ 的标志即为收藏页面，点击之后文件夹选项即是选择保存路径。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WindowsUsage_img/Mscrosoft_Edge_favorites.png" alt="Mscrosoft_Edge_favorites.png"></p><h2 id="✨常用小工具"><a href="#✨常用小工具" class="headerlink" title="✨常用小工具"></a>✨常用小工具</h2><ul><li><p>7zip（压缩软件）</p><ul><li>使用方法：选中压缩包文件，右键 7-Zip 选择提取到 “压缩包文件名\“，即可解压到当前目录下</li><li>蓝奏云链接：<a href="https://lingsiki.lanzoui.com/i98Evolf7ah">32 位</a>、<a href="https://lingsiki.lanzoui.com/iXSS2olf7if">64 位</a></li><li>官网地址：<a href="https://www.7-zip.org/">https://www.7-zip.org</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WindowsUsage_img/7-Zip.png" alt="7-Zip.png"></p></li><li><p>PotPlayer（非常强大的播放器，再也不用担心打不开视频文件）</p><ul><li>官网：<a href="https://tv.kakao.com/guide/potplayer">https://tv.kakao.com/guide/potplayer</a> （有点慢，需要 fq）</li><li>蓝奏云链接（官网安装包）：<a href="https://lingsiki.lanzoui.com/i8Cc7osbcqb">32 位</a>、<a href="https://lingsiki.lanzoui.com/i1bhVosbcgb">64 位</a></li><li>果核剥壳：<a href="https://www.ghxi.com/potplayer.html">https://www.ghxi.com/potplayer.html</a></li><li>使用修改版请自行关联所有视频文件，打开软件按 F5 可设置关联，还有许多快捷键操作请自行百度学习</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WindowsUsage_img/potplayer.png" alt="potplayer.png"></p></li><li><p>屏蔽系统更新</p><ul><li>使用建议：对于配置不是很好的电脑，建议关闭Windows更新，因为更新可能导致电脑蓝屏或者出现开不了机的情况</li><li>蓝奏云链接：<a href="https://lingsiki.lanzoui.com/igJ0oolezuj">https://lingsiki.lanzoui.com/igJ0oolezuj</a></li><li>更新地址：<a href="https://www.sordum.org/9470/windows-update-blocker-v1-6">https://www.sordum.org/9470/windows-update-blocker-v1-6</a></li></ul></li><li><p>关闭Windows安全中心</p><ul><li>使用建议：就一般来言，有些软件比如激活软件会被吞，这让我很难受，由于自己不会去下莫名其妙的地方下载东西，因此电脑也不会担心中病毒，即便发生了，立马下个火绒救救急即可</li><li>蓝奏云链接：<a href="https://lingsiki.lanzoui.com/iWwvPolezfe">https://lingsiki.lanzoui.com/iWwvPolezfe</a></li><li>更新地址：<a href="https://www.sordum.org/9480/defender-control-v1-8">https://www.sordum.org/9480/defender-control-v1-8</a></li></ul></li><li><p>HWIDGen Windows激活（需联网）</p><ul><li>使用体验：这是我用过最舒服的激活器了，推荐数字激活，点一下激活即可，关闭杀毒软件使用。</li><li>蓝奏云链接：<a href="https://lingsiki.lanzoui.com/im8UKoletxg">https://lingsiki.lanzoui.com/im8UKoletxg</a></li><li>果核剥壳汉化版：<a href="https://www.ghxi.com/hwidgen.html">https://www.ghxi.com/hwidgen.html</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WindowsUsage_img/HWID.png" alt="HWIDGen.png"></p></li><li><p>微软运行库</p><ul><li>使用体验：重装系统必备，避免有些软件的运行还需要去安装特定的运行库。</li><li>蓝奏云链接：<a href="https://lingsiki.lanzoui.com/iOrXRoo4ldg">https://lingsiki.lanzoui.com/iOrXRoo4ldg</a></li><li>果核剥壳封装版：<a href="https://www.ghxi.com/yxkhj.html">https://www.ghxi.com/yxkhj.html</a></li></ul></li><li><p>Office 2013-2021 C2R Install</p><ul><li>使用体验：一站式 office 卸载、下载、激活，我感觉比 office tool 还好用，因为傻瓜式，点几下就好了</li><li>蓝奏云链接：<a href="https://lingsiki.lanzoui.com/i0WtRoleoeh">https://lingsiki.lanzoui.com/i0WtRoleoeh</a></li><li>更新地址：<a href="https://free.appnee.com/office-2013-2021-c2r-install">https://free.appnee.com/office-2013-2021-c2r-install</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WindowsUsage_img/office_install.png" alt="office_install.png"></p></li><li><p>Dism++</p><ul><li>使用体验：基本使用的是 C 盘空间清理和工具箱中修改 hosts</li><li>官网地址：<a href="https://www.chuyu.me/zh-Hans">https://www.chuyu.me/zh-Hans</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WindowsUsage_img/dism++.png" alt="dism++.png"></p></li><li><p>TranslucentTB （任务栏透明）</p><ul><li>GitHub仓库地址：<a href="https://github.com/TranslucentTB/TranslucentTB">https://github.com/TranslucentTB/TranslucentTB</a></li><li>Microsoft Store 汉化版：<a href="https://www.microsoft.com/zh-cn/p/translucenttb-%E6%B1%89%E5%8C%96-by-tpxxn/9n5w18jc9bg2?activetab=pivot:overviewtab">translucenttb-汉化-by-tpxxn</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WindowsUsage_img/translucent.png" alt="translucent.png"></p></li><li><p>Snipaste（截图 + 贴图）</p><ul><li>官网地址：<a href="https://zh.snipaste.com/">https://zh.snipaste.com</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WindowsUsage_img/Snipaste.png" alt="Snipaste.png"></p></li><li><p>QQ精简版（刚使用，还可以）</p><ul><li>蓝奏云链接：<a href="https://www.lanzoui.com/b385621">https://www.lanzoui.com/b385621</a> 密码：9527</li><li>Dreamcast 发布地址：<a href="http://dreamcast2.ys168.com/">http://dreamcast2.ys168.com</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WindowsUsage_img/QQ.png" alt="QQ.png"></p></li></ul><div class="note note-primary">            <p>其实要说的挺多的，不过写起来又觉得不知道写啥，欢迎补充和提出相关建议</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Skill</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xposed Hook 完美校园获取本机 DeviceId</title>
    <link href="/2021/04/18/17wanxiaoHookGetDeviceId/"/>
    <url>/2021/04/18/17wanxiaoHookGetDeviceId/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>简单记录一下完美校园 app 逆向 + Hook 获取 deviceId 生成的方法</p>          </div><a id="more"></a><div class="note note-success">            <p>完美校园自动打卡项目：<a href="https://github.com/ReaJason/17wanxiaoCheckin">https://github.com/ReaJason/17wanxiaoCheckin</a><br>本文使用的所有资源包括成品链接：<a href="https://lingsiki.lanzoui.com/b0eklg2ih">https://lingsiki.lanzoui.com/b0eklg2ih</a> 密码：2333</p>          </div><h2 id="🤝静态分析"><a href="#🤝静态分析" class="headerlink" title="🤝静态分析"></a>🤝静态分析</h2><h3 id="🔍查壳"><a href="#🔍查壳" class="headerlink" title="🔍查壳"></a>🔍查壳</h3><div class="note note-info">            <p>查壳工具：<a href="http://www.legendsec.org/1888.html">ApkScan-PKID</a> 查看 app 是否加固（需要 Java 环境）</p>          </div><p>&emsp;&emsp;如果 app 加固的话需要脱壳才能看到源码，没有加固则最好，在豌豆荚下载了完美校园历史版本发现，5.0.2 版本没有加固，而最新的 5.3.6 版本使用了 360 加固，其他版本有阿里和腾讯加固的都有，不知道他们为什么换这么多壳……，因此本文采取的思路是在 5.0.2 版本中找到 deviceId 的获取方法，然后使用 xp hook 绕壳去 hook 5.3.6 版本的相关代码，也很幸运 5.3.6 版本生成 deviceId 的代码虽然修改了位置，但是还是找到了 hook 出来的办法。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17WanXiaoHookGetDeviceId_img/5.0.2.png" alt="5.0.2"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17WanXiaoHookGetDeviceId_img/5.3.6.png" alt="5.3.6"></p><h3 id="🤔分析源码"><a href="#🤔分析源码" class="headerlink" title="🤔分析源码"></a>🤔分析源码</h3><div class="note note-info">            <p>源码查看工具：<a href="https://github.com/skylot/jadx">jadx</a><br>把使用方法为打开 bin 目录下的 jadx-gui.bat，然后选择 apk</p>          </div><ol><li><p>在搜索文本工具中搜索 <code>/loginnew</code>，即可查看有一个匹配值，双击进去，然后右键查看该值 <code>i</code> 的用例，也就是哪里用了这个值，也刚好发现一个 <code>c.i</code>，双击进入即可发现登录报表的所有参数，基本都在这里出现了</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17WanXiaoHookGetDeviceId_img/loginnew.png" alt="search_loginnew"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17WanXiaoHookGetDeviceId_img/loginnew_example.png" alt="find_i"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17WanXiaoHookGetDeviceId_img/loginreqdata.png" alt="loginreqdata"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17WanXiaoHookGetDeviceId_img/logindata.png" alt="logindata"></p></li><li><p>我们可以看到这个 <code>private String deviceId = AppUtils.f(SystemApplication.e());</code> 这行代码说明了 deviceId 生成的来源，选中 <code>f</code> ，右键跳到声明，即可查看对应源码</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17WanXiaoHookGetDeviceId_img/deviceid_f.png" alt="deviceId_f"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17WanXiaoHookGetDeviceId_img/deviceid_func.png" alt="deviceid_func"></p></li><li><p>可以看到该类有许多的 get 方法，我们可以通过 hook 这些方法，来获取对应值（不过还得看登录方式是否使用了对应值）</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17WanXiaoHookGetDeviceId_img/hook_point.png" alt="hook_point"></p></li><li><p>使用 jadx 找到 5.3.6 版本 360 加固后的 app 入口</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17WanXiaoHookGetDeviceId_img/360.png" alt="classloader"></p></li></ol><h2 id="🪂Xp-Hook"><a href="#🪂Xp-Hook" class="headerlink" title="🪂Xp Hook"></a>🪂Xp Hook</h2><div class="note note-info">            <p>环境搭建以及入门：<a href="https://www.52pojie.cn/forum.php?mod=viewthread&tid=1315865&highlight=frida+hook"> [超级详细]Frida Hook和Xposed Hook 再搞Crackme</a><br>网上 Xp Hook 的教程还是有一点点可以学习的，可自行搜索学习相应知识</p>          </div><ol><li><p>新建项目，打开左侧资源管理设置为 Project，将 api-82 的两个文件放到 app/libs 下</p></li><li><p>在 app/bulid.gradle 下面的 dependencies 中加入以下代码，然后点击右上角的 Sync</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">compileOnly &#x27;de.robv.android.xposed:api:82&#x27;<br>compileOnly &#x27;de.robv.android.xposed:api:82:sources&#x27;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17WanXiaoHookGetDeviceId_img/xphook_set1.png" alt="xphook_set1"></p></li><li><p>在 AndroidManifest.xml 中加入一下代码</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;xposedmodule&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;xposeddescription&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;hook 5.3.6 版本完美校园登录参数，包括 deviceId&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;xposedminversion&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;54&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17WanXiaoHookGetDeviceId_img/xphook_set2.png" alt="xphook_set2"></p></li><li><p>在 main 文件下创建 assets 文件夹，在其下创建 xposed_init 文件，文件中写 xposed 的入口即 <code>com.wanxiao.xp_hook.MainHook</code>（包名 + 类名）</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17WanXiaoHookGetDeviceId_img/xphook_set3.png" alt="xphook_set3"></p></li><li><p>在 MainActivity 同级目录下创建 MainHook 的 Java class 文件</p></li><li><p>编写 Hook 代码，当前代码为 Hook 5.3.6 版本的代码，因为需要绕过 360 加固 Hook</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// Hook 完美校园</span><br><span class="hljs-keyword">if</span> (!loadPackageParam.packageName.equals(<span class="hljs-string">&quot;com.newcapec.mobile.ncp&quot;</span>)) &#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br>XposedBridge.log(<span class="hljs-string">&quot;已 HOOK 到完美校园&quot;</span>);<br><br><span class="hljs-comment">// Hook 360加固</span><br>findAndHookMethod(<span class="hljs-string">&quot;com.stub.StubApp&quot;</span>, <br>                  loadPackageParam.classLoader,<br>                  <span class="hljs-string">&quot;attachBaseContext&quot;</span>, <br>                  Context.class, <br>                  <span class="hljs-keyword">new</span> XC_MethodHook() &#123;<br>                      <span class="hljs-meta">@Override</span><br>                      <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>                          <span class="hljs-keyword">super</span>.afterHookedMethod(param);<br>                          <span class="hljs-comment">//获取到Context对象，通过这个对象来获取classloader</span><br>                          Context context = (Context) param.args[<span class="hljs-number">0</span>];<br>                          <span class="hljs-comment">//获取classloader，之后hook加固后的就使用这个classloader</span><br>                          ClassLoader classLoader = context.getClassLoader();<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getAppCode&quot;</span>, <span class="hljs-string">&quot;appCode: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getDeviceId&quot;</span>, <span class="hljs-string">&quot;deviceId: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getNetWork&quot;</span>, <span class="hljs-string">&quot;netWork: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getPassword&quot;</span>, <span class="hljs-string">&quot;password: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getQudao&quot;</span>, <span class="hljs-string">&quot;qudao: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getRequestMethod&quot;</span>, <span class="hljs-string">&quot;requestMethod: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getSms&quot;</span>, <span class="hljs-string">&quot;sms: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getShebeixinghao&quot;</span>, <span class="hljs-string">&quot;shebeixinghao: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getSystemType&quot;</span>, <span class="hljs-string">&quot;systemType: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getTelephoneInfo&quot;</span>, <span class="hljs-string">&quot;telephoneInfo: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getTelephoneModel&quot;</span>, <span class="hljs-string">&quot;telephoneModel: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getToken&quot;</span>, <span class="hljs-string">&quot;token: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getType&quot;</span>, <span class="hljs-string">&quot;type: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getUnionid&quot;</span>, <span class="hljs-string">&quot;unionid: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getUserId&quot;</span>, <span class="hljs-string">&quot;userId: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getUserName&quot;</span>, <span class="hljs-string">&quot;userName: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getWanxiaoVersion&quot;</span>, <span class="hljs-string">&quot;wanxiaoVersion: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;getYunyingshang&quot;</span>, <span class="hljs-string">&quot;yunyingshang: &quot;</span>);<br>                          hook_param(classLoader, <span class="hljs-string">&quot;toJsonString&quot;</span>, <span class="hljs-string">&quot;当前登录方式请求参数: &quot;</span>);<br>                      &#125;<br>                  &#125;);<br><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hook_param</span><span class="hljs-params">(ClassLoader classLoader, String methodName, String resultName)</span></span>&#123;<br>    findAndHookMethod(<br>        <span class="hljs-string">&quot;com.wanxiao.rest.entities.login.LoginReqData&quot;</span>, classLoader, methodName,<br>        <span class="hljs-keyword">new</span> XC_MethodHook() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>                String msg = resultName + param.getResult();<br>                XposedBridge.log(msg);<br>                Log.i(<span class="hljs-string">&quot;[ 17wanxiaoHook ]&quot;</span>, msg);<br>            &#125;<br>        &#125;<br>    );<br><br>&#125;;<br></code></pre></div></td></tr></table></figure></li><li><p>结果展示</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/17WanXiaoHookGetDeviceId_img/result.jpg" alt="result"></p></li></ol><h2 id="❄总结"><a href="#❄总结" class="headerlink" title="❄总结"></a>❄总结</h2><p>&emsp;&emsp;安卓逆向这方面我只是个小小新手，Xp Hook 真的很牛皮，更强大的功能目前还用不上，Frida Hook 测试只能 Hook 5.0.2 版本，5.3.6 版本死活显示多进程，Frida Hook 不到，有机会接触这方面的再继续学习，目前也就这样了。</p><div class="note note-danger">            <p>本文仅供交流学习，请勿用于违法用途</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
      <tag>Xposed</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的刷机之旅 — Redmi K20 Pro</title>
    <link href="/2021/04/12/AndroidFlashRom/"/>
    <url>/2021/04/12/AndroidFlashRom/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>🎉玩机党的快乐！</p>          </div><a id="more"></a><h2 id="🙋‍♂️前言"><a href="#🙋‍♂️前言" class="headerlink" title="🙋‍♂️前言"></a>🙋‍♂️前言</h2><p>大二开始接触手机上的各种破解软件，在类似葫芦侠，各种瞎几把论坛瞎逛找一些好玩的软件或者美化操作，当时拿着荣耀畅玩 5A 、OPPO R9，软件安装限制很大。一个偶然的机会，下载了 <a href="https://coolapk.com/">酷安</a>，接触到了 ROOT 和 Xposed 模块，并产生了非常浓厚的兴趣（因为可玩性实在是太高了），后来（大三）买了一个 Redmi Note 7 Pro 开始了我的刷机之路（选择红米的手机是因为小米手机官方有解锁工具，类原生适配非常多，红米手机又便宜，学生党只能这个样子了），加群以及在酷安学习了很久之后，写了一个 <a href="https://mp.weixin.qq.com/s/aFvXRVqvBMkPgy3rnaQrFA">刷机教程</a>，而如今（大四）手持 Redmi K20 Pro 基本养老了，不过 <a href="https://github.com/topjohnwu/Magisk">Magisk</a> 和 <a href="https://github.com/LSPosed/LSPosed">Lsposed</a>（后来兴起的用来代替 <a href="https://github.com/ElderDrivers/EdXposed">EdXposed</a>）也还是必装，毕竟 <a href="https://github.com/yc9559/uperf/releases">yc 调度模块 </a>（省电优化）和 <a href="https://forum.xda-developers.com/t/xposed-edge-pro.3525566/">Xposed Edge Pro</a>（自动化以及手势增强）等等是真的香喷喷。</p><p>MIUI12.5 发布了这么久，有些地方优化还是没做好，可能还需要一段时间吧，现在小米疯狂出新手机，对于我这个手机估计离停更也不远了，大家应该都听过类原生流畅丝滑之类的，但是其功能就没有 MIUI 这么多了，因此要用得习惯对于我来说还是很难得，不过对于玩机党来说有时候，在类原生和 MIUI 中间反复横跳是常有的事情，今天有时间就再更新一下之前的刷机教程（适用于所有小米手机，套路都一样），再来演示一波类原生刷机教程以及刷面具。</p><h2 id="💡XDA-论坛"><a href="#💡XDA-论坛" class="headerlink" title="💡XDA 论坛"></a>💡XDA 论坛</h2><div class="note note-info">            <p>XDA 论坛官网：<a href="https://forum.xda-developers.com/">https://forum.xda-developers.com/</a><br>Redmi K20 Pro ：<a href="https://forum.xda-developers.com/c/redmi-k20-pro-xiaomi-mi-9t-pro.8953/">https://forum.xda-developers.com/c/redmi-k20-pro-xiaomi-mi-9t-pro.8953/</a><br>其他机型自行在论坛官网的右上角搜索即可，加载有点慢，毕竟是国外的网站</p>          </div><div class="note note-warning">            <p>Tips：<br>刷机资源绝大多数都以手机代号来命名，所以需要先知道自己的手机代号<br>小米手机可以在 <a href="https://miuiver.com/xiaomi-device-codename/">【小米手机代号名称查询】</a> 查找，例如 Redmi K20 Pro 的手机代号为 raphael</p>          </div><p>我觉得这个 XDA 是国外玩机党的 HOME，基本类原生全都发布在这里，每个手机板块下都有一个叫 ***ROMs, Kernels, Re，在这个下面就可以找到类原生系统的发布地址，和简单的刷入操作介绍，对于我们来说刷之前可以先去酷安对应手机板块下逛逛，看刷哪个比较好，看别人的刷入体验有哪些特别要注意的地方。</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/Redmi_K20_Pro_XDA.png" alt="Redmi_K20_Pro_XDA.png"></p><h2 id="🔓解-BL-锁"><a href="#🔓解-BL-锁" class="headerlink" title="🔓解 BL 锁"></a>🔓解 BL 锁</h2><div class="note note-info">            <p>解锁小米手机官网：<a href="http://www.miui.com/unlock/index.html">http://www.miui.com/unlock/index.html</a><br>官方解锁工具：<a href="http://miuirom.xiaomi.com/rom/u1106245679/5.5.224.55/miflash_unlock-5.5.224.55.zip">miflash_unlock</a></p>          </div><div class="note note-warning">            <p>Tips:<br>小米解锁手机需要设备和账号绑定一周后才给予解锁服务的，可能可以秒解，解锁是会清除手机所有数据的，所以请务必备份手机的重要数据，等待期间可以学习学习刷机教程</p>          </div><ol><li>打开开发者选项<ul><li>进入设置－我的设备－全部参数－MIUI版本－疯狂点几下开启开发者模式</li></ul></li><li>绑定账号与设备<ul><li>进入设置－更多设置－开发者选项－设备解锁状态－绑定账号和设备</li></ul></li><li>打开解锁工具，登录小米账号，并检测设备是否可解锁，如果可则解锁，不可则慢慢等待相应时间</li><li>手机进入 fastboot 模式（即官方教程给出的 Bootloader 模式）（不一定要关机，同时按住开机键和音量下键，一直按着即可进入），手机用数据线连接电脑</li><li>点击解锁（会清除所有设备数据，注意备份重要数据）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/unlock_success.png" alt="unlock_success.png"></p><h2 id="⚙刷入-TWRP"><a href="#⚙刷入-TWRP" class="headerlink" title="⚙刷入 TWRP"></a>⚙刷入 TWRP</h2><div class="note note-info">            <p>TWRP 官网：<a href="https://twrp.me/Devices/">https://twrp.me/Devices/</a><br>Redmi K20 Pro：<a href="https://twrp.me/xiaomi/xiaomimi9tpro.html">https://twrp.me/xiaomi/xiaomimi9tpro.html</a><br>OrangeFox：<a href="https://archive.orangefox.download/OrangeFox-Stable/">https://archive.orangefox.download/OrangeFox-Stable/</a></p>          </div><ol><li><p>获取 TWRP</p><ul><li>在上方的 TWRP 官网中，找到自己的设备页面，在 Download Links 下选择 Primary (Americas)，即可找到最新的 TWRP 镜像文件，因为镜像站点在国外下载可能过慢，下方评论回复有时间可帮下。Redmi K20 Pro twrp-3.5.2_9-0-raphael.img：<a href="https://lingsiki.lanzoui.com/izQJIo1bxwb">蓝奏云</a></li><li>可在酷安手机板块搜索下载，应该是有人搬运的，或者去刷机群找找</li></ul></li><li><p>获取 ADB</p><ul><li>给出下面两个版本的 adb，Android版本低的建议 32 版本，我使用 41 版本，有时候 adb 无法连接手机或者 TWRP 刷不进去可能是 adb 版本的问题，换一个有可能可以解决</li><li><a href="https://lingsiki.lanzoui.com/iz9Bao1c0na">adb version 1.0.32.zip</a></li><li><a href="https://lingsiki.lanzoui.com/iy8HBo1c0mj">adb version 1.0.41.zip</a></li></ul></li><li><p>连接手机</p><ul><li>手机进入 fastboot 模式（因为界面有个兔子也称兔子模式）（不一定要关机，直接同时按住开机键和音量下键，一直按着即可进入）</li><li>手机数据线连接电脑</li></ul></li><li><p>使用命令刷入 TWRP</p><ul><li>解压 ADB 压缩包，在资源管理器的地址栏输入 cmd，回车即可在当前目录打开命令行</li><li>输入 <code>fastboot devices -l</code> 查看是否已连接上</li><li>输入 <code>fastboot flash recovery 将 img 文件拖入此处</code>，刷入 TWRP</li><li>显示 Finished 即完成，在 fastboot 模式下，同时按住开机键和音量上键，一直按着直到手机震动一下松手即可进入 TWRP 界面</li><li>官方 TWRP 版本进入会有一个界面选择是否系统分区只读，select language 选择中文，下次不再提醒，滑动修改</li></ul><p>该方式是通用的刷入第三方 REC 的方法，那种什么一键刷入的也就用这个命令，因此你也可以以这种方式刷入其他第三方 REC，例如上方给出的 OrangeFox（橙狐），下载对应手机代号最新的压缩包，解压就可以看见 img 镜像文件，也可以在 TWRP 中直接刷入下载下来的 zip 包，重启 TWRP ，REC 就变成了 OrangeFox（橙狐），如果由于某种误操作导致 TWRP 掉了，再以该方式刷入就行了</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/open_cmd.png" alt="open_cmd.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/fastboot_rec.png" alt="fastboot_rec.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/TWRP_first.jpg" alt="TWRP_first.jpg"></p><h2 id="🎨卡刷-ROM"><a href="#🎨卡刷-ROM" class="headerlink" title="🎨卡刷 ROM"></a>🎨卡刷 ROM</h2><div class="note note-info">            <p>卡刷其实就是在 TWRP（第三方 REC） 里面将 zip 包刷入手机，这里以 <a href="https://sourceforge.net/projects/evolution-x/files/raphael/EvolutionX_5.6_raphael-11-20210413-0411-OFFICIAL.zip/download">EvolutionX_5.6_raphael-11-20210413</a> 为例安装类原生，所需要的固件包版本为 <a href="https://downloads.akhilnarang.dev/MIUI/raphael/RAPHAEL-V12.0.6.0.QFKCNXM-10.0-vendor-firmware.zip">RAPHAEL-V12.0.6.0</a>，Redmi K20 Pro TWRP 目前无法自动解密，为防止 TWRP 乱码，可刷入 <a href="https://lingsiki.lanzoui.com/iLHEeo1l08j">强制解密补丁</a> （不知道其他手机是否可用）</p>          </div><ol><li>电脑端下载指定版本固件包、类原生包、强制解密补丁</li><li>手机进入 TWRP，数据线连接电脑，电脑打开手机存储将包全部移到手机内部存储的 TWRP 文件夹</li><li>点击 TWRP 主界面的安装，找到 TWRP 文件夹并选择固件包，滑动刷入，安装完成之后以相同方式刷入类原生包和强制解密补丁</li><li>点击 TWRP 主界面的清楚，格式化 DATA，yes，重启系统</li><li>升级系统<ul><li>先直接下载新版本的完整包</li><li>进入 TWRP 刷入顺序为：完整包 - Magisk 卡刷包（可选） - 强制解密补丁 - 重启系统</li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/flash_rom.jpg" alt="flash_rom.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/format_data.jpg" alt="format_data.jpg"></p><h2 id="🎭安装-Magisk"><a href="#🎭安装-Magisk" class="headerlink" title="🎭安装 Magisk"></a>🎭安装 Magisk</h2><div class="note note-info">            <p>Magisk GitHub：<a href="https://github.com/topjohnwu/Magisk">https://github.com/topjohnwu/Magisk</a></p>          </div><div class="note note-warning">            <p>Tips:<br>Magisk 以前分发的都是卡刷包，刷完桌面就会有 Magisk 管理器，但是 Magisk 在 <a href="https://github.com/topjohnwu/Magisk/releases/tag/v22.0">22.0</a> 版本之后就没有分发卡刷 zip 包了，只有一个 apk 文件，但是将 apk 文件后缀名改为 zip 即可变成卡刷包。Magisk 在升级系统和刷入内核的时候都会掉，此时只要刷完系统包或者内核之后再刷入 Magisk 的卡刷包即可</p>          </div><ol><li>下载 <a href="https://github.com/topjohnwu/Magisk/releases">Magisk.apk</a> 并安装，然后在文件管理将其改为 .zip 格式</li><li>同时按住开机键和音量上键，进入 TWRP，安装 - 选择 Magisk.zip - 刷入 - 重启</li><li>打开 Magisk app 即可显示安装的版本</li><li>卸载的话就下载 <a href="https://github.com/topjohnwu/Magisk/releases/download/v21.4/Magisk-uninstaller-20210117.zip">Magisk-uninstall.zip</a> 在 TWRP 刷入即可卸载</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/magisk.jpg" alt="magisk.jpg"></p><h2 id="✨安装-Lsposed"><a href="#✨安装-Lsposed" class="headerlink" title="✨安装 Lsposed"></a>✨安装 Lsposed</h2><div class="note note-info">            <p>Lsposed：<a href="https://github.com/LSPosed/LSPosed">https://github.com/LSPosed/LSPosed</a><br>EdXposed：<a href="https://github.com/ElderDrivers/EdXposed">https://github.com/ElderDrivers/EdXposed</a></p>          </div><ol><li>在 Magisk app 中先安装 Riru 后安装 Riru-LSPosed 重启即可</li><li>重启后，打开 LSPosed app 即可查看 LSPosed 是否安装成功</li><li>可以在仓库中安装 xp 模块，然后在模块中启用，并勾选作用域（即该 xp 模块 需要对谁起作用）</li><li>如果作用的是单个 app 开启模块后重启 app 即可生效，如果作用域为系统框架那么需要重启生效</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/lsp.jpg" alt="lsp.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/xp_module.jpg" alt="xp_module.jpg"></p><h2 id="☂线刷救砖"><a href="#☂线刷救砖" class="headerlink" title="☂线刷救砖"></a>☂线刷救砖</h2><div class="note note-success">            <p>对于刚开始玩刷机的朋友，可能会操作不当会遇到手机突然无法开机，或者等等情况<br>只要同时按住开机键和音量下键能够进入 fastboot 模式，那么你就可以通过线刷的方式开机</p>          </div><div class="note note-info">            <p>小米官方线刷教程：<a href="http://www.miui.com/shuaji-393.html">http://www.miui.com/shuaji-393.html</a><br>小米官方通用刷机工具：<a href="http://bigota.d.miui.com/tools/MiFlash2018-5-28-0.zip">http://bigota.d.miui.com/tools/MiFlash2018-5-28-0.zip</a></p>          </div><div class="note note-warning">            <p>Tips:<br>各机型线刷包也是在该链接下载，线刷包是以 tar 格式结尾的包，卡刷包是以 zip 格式结尾的，我当时拿卡刷包去线刷，线刷工具说找不到脚本，折腾半天找不到解决办法，所以这里特别提醒！</p>          </div><ol><li>下载本机型的线刷包解压，我用 7zip 要解压两次，解压之后文件夹有许多 .bat .sh 文件，下载通用刷机工具解压</li><li>打开在刷机工具文件夹中 XiaoMiFlash.exe，安装驱动</li><li>手机进入 fastboot 模式（不一定要关机，同时按住开机键和音量下键，一直按着即可进入），用数据线连接电脑</li><li>点击加载设备，下面即会显示一行东西意味着手机已连接</li><li>点击选择，选择解压之后的线刷包</li><li>在右下角有三种模式，一般使用第一个全部删除就可以，最后一个全部删除并 lock 即是回锁，等什么时候你不再刷机了，可以以这种方式回锁设备</li><li>用时可能需要一点点时间，如果报错，请自行百度或求助于各大论坛学习解决</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/AndroidFlashRom_img/usb_flash.png" alt="usb_flash.png"></p><div class="note note-info">            <p>以上完，如有错误，恳请指正，仅记录一下自己刷机的过程，大家想玩就玩，刷机需谨慎，变砖两行泪</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
      <tag>Skill</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ の STL</title>
    <link href="/2021/03/28/CppSTL/"/>
    <url>/2021/03/28/CppSTL/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>为了更好地使用 C++ 刷算法题，学习一下 STL</p>          </div><a id="more"></a><h2 id="✨前言"><a href="#✨前言" class="headerlink" title="✨前言"></a>✨前言</h2><p>&emsp;&emsp;数据结构与算法是找工作绕不过的坎，因此慢慢啃这一块是非常有必要的，并且学习它也有利于自己一直保持思考的习惯。希望自己变得更优秀，希望大家也能好好学习。</p><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><blockquote><p>字符串</p></blockquote><h4 id="string-初始化"><a href="#string-初始化" class="headerlink" title="string 初始化"></a>string 初始化</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">string</span> s1;<br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">s2</span><span class="hljs-params">(s1)</span></span>;<br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">s3</span><span class="hljs-params">(<span class="hljs-string">&quot;value&quot;</span>)</span></span>;<br><span class="hljs-built_in">string</span> s4 = s3;<br><span class="hljs-built_in">string</span> s5 = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-built_in">string</span> s6 = (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// aa</span><br></code></pre></div></td></tr></table></figure><h4 id="string-操作"><a href="#string-操作" class="headerlink" title="string 操作"></a>string 操作</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// cin &gt;&gt; s，读取遇到空白停止</span><br><span class="hljs-comment">// getline(cin, s)，读取一整行，直至末尾</span><br><span class="hljs-comment">// s.empty()，字符串为空返回 true，反之 false</span><br><span class="hljs-comment">// s.size()，返回字符串的长度</span><br><span class="hljs-comment">// s[n]</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// string 赋值</span><br>s1 = <span class="hljs-string">&quot;hello&quot;</span>;<br>s1.assign(<span class="hljs-string">&quot;abcdef&quot;</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// abcd</span><br>s2.assigh(s1, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// abc</span><br>s2.length(); <span class="hljs-comment">// 3</span><br><br><span class="hljs-comment">// string 取值，[]越界直接报错，at越界抛出异常</span><br>s1[<span class="hljs-number">0</span>];<br>s1.at(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// string 拼接，字面值和 string 是不同类型</span><br><span class="hljs-built_in">string</span> s1 = <span class="hljs-string">&quot;我&quot;</span>;<br><span class="hljs-built_in">string</span> s2 = <span class="hljs-string">&quot;你&quot;</span>;<br>s1 += s2; <span class="hljs-comment">// &quot;我你&quot;</span><br>s1.append(<span class="hljs-string">&quot;ta&quot;</span>);<br><span class="hljs-built_in">string</span> s3 = s1 + <span class="hljs-string">&quot;爱&quot;</span> + <span class="hljs-string">&quot;你&quot;</span>;<br><span class="hljs-built_in">string</span> s4 = <span class="hljs-string">&quot;我&quot;</span> + <span class="hljs-string">&quot;爱&quot;</span> + s2; <span class="hljs-comment">// 错误，不允许两个字面值相加</span><br><br><br><span class="hljs-comment">// string 查找</span><br><span class="hljs-built_in">string</span> s1 = <span class="hljs-string">&quot;abcdef&quot;</span>;<br>s1.find(<span class="hljs-string">&quot;ab&quot;</span>); <span class="hljs-comment">// 0</span><br>s1.find(<span class="hljs-string">&quot;ac&quot;</span>); <span class="hljs-comment">// -1</span><br>s1.rfind(<span class="hljs-string">&quot;ab&quot;</span>); <span class="hljs-comment">// 0</span><br><br><span class="hljs-comment">// string 替换</span><br><span class="hljs-built_in">string</span> s3 = <span class="hljs-string">&quot;hello&quot;</span>;<br>s3.replace(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;1111&quot;</span>); <span class="hljs-comment">// h1111o</span><br><br><span class="hljs-comment">// string 比较</span><br><span class="hljs-built_in">string</span> s1 = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-built_in">string</span> s2 = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-built_in">string</span> s3 = <span class="hljs-string">&quot;bbc&quot;</span>;<br>s1.compare(s2); <span class="hljs-comment">// 0</span><br>s1.compare(s3); <span class="hljs-comment">// -1</span><br>s3.compare(s1); <span class="hljs-comment">// 1</span><br><br><span class="hljs-comment">// string 子串</span><br><span class="hljs-built_in">string</span> s1 = <span class="hljs-string">&quot;abcdef&quot;</span>;<br>s1.substr(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// bc</span><br><br><span class="hljs-comment">// string 插入</span><br><span class="hljs-built_in">string</span> s1 = <span class="hljs-string">&quot;hello&quot;</span>;<br>s1.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;111&quot;</span>); <span class="hljs-comment">// h111ello</span><br><br><span class="hljs-comment">// string 删除</span><br>s1.erase(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br><br><span class="hljs-comment">// string 转 c-style</span><br><span class="hljs-built_in">string</span> s1 = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * p = s1.c_str();<br><br><span class="hljs-comment">// c-style 转 string</span><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">s2</span><span class="hljs-params">(p)</span></span>;<br></code></pre></div></td></tr></table></figure><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><blockquote><p>动态数组</p></blockquote><h4 id="vector-初始化"><a href="#vector-初始化" class="headerlink" title="vector 初始化"></a>vector 初始化</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// 创建一个空的 vector</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br><br><span class="hljs-comment">// 拷贝构造</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v2</span><span class="hljs-params">(v1)</span></span>;      <br><br><span class="hljs-comment">// array 转 vector，指定长度</span><br><span class="hljs-keyword">int</span> arr[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v3</span><span class="hljs-params">(arr, arr + <span class="hljs-number">5</span>)</span></span>;<br><br><span class="hljs-comment">// 初始化元素个数为 5，每个值为 0</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v4</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span>;  <span class="hljs-comment">// &#123;0,0,0,0,0&#125;</span><br><br><span class="hljs-comment">// 初始化元素个数为 5，每个值为 1</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v5</span><span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-number">1</span>)</span></span>;  <span class="hljs-comment">// &#123;1,1,1,1,1&#125;</span><br><br><span class="hljs-comment">// 赋值初始化，等同于 vector&lt;int&gt; v6 = &#123;1,2,3,4,5&#125;</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v6&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><br><span class="hljs-comment">// &#123;&#125; 用来进行列表初始化，如果其中的值无法用于列表初始化，编译器则用默认值初始化 vector 对象</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v7&#123;<span class="hljs-number">2</span>&#125;;           <span class="hljs-comment">// &#123;2&#125;</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; v8&#123;<span class="hljs-number">2</span>&#125;;        <span class="hljs-comment">// 初始化长度为 2，每个值为空，&#123;&quot;&quot;, &quot;&quot;&#125;</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; v9&#123;<span class="hljs-number">2</span>, <span class="hljs-string">&quot;hi&quot;</span>&#125;;  <span class="hljs-comment">// 初始化长度为 2，每个值为 hi，&#123;&quot;hi&quot;, &quot;hi&quot;&#125;</span><br></code></pre></div></td></tr></table></figure><h4 id="vector-操作"><a href="#vector-操作" class="headerlink" title="vector 操作"></a>vector 操作</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// v.push_back(t)，将值为 t 元素追加到 vector 尾部</span><br><span class="hljs-comment">// v.empty()，vector 为空返回 true</span><br><span class="hljs-comment">// v.size()，返回 vector 大小</span><br><span class="hljs-comment">// v[n]，用于访问已存在的元素，而不能用于添加元素</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// vector 赋值</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v1</span><span class="hljs-params">(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)</span></span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v2 = v1;<br>printVector(v2); <span class="hljs-comment">// 3 3 3 3 </span><br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v4;<br>v4.assign(v2.begin(), v2.end());<br>printVector(v2); <span class="hljs-comment">// 3 3 3 3 </span><br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v5 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>v4.swap(v5);<br>printVector(v4); <span class="hljs-comment">// 1 2 3 4 5</span><br><br><span class="hljs-comment">// vector 大小</span><br><br><span class="hljs-built_in">cout</span> &lt;&lt; v4.size() &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 5</span><br><span class="hljs-keyword">if</span>(v4.empty())&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;v4 为空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-built_in">cout</span>&lt;&lt; <span class="hljs-string">&quot;v4 不为空&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; v4.capacity() &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 5</span><br>v4.resize(<span class="hljs-number">7</span>);<br>printVector(v4); <span class="hljs-comment">// 1 2 3 4 5 0 0</span><br>v4.resize(<span class="hljs-number">10</span>, <span class="hljs-number">3</span>);<br>printVector(v4); <span class="hljs-comment">// 1 2 3 4 5 0 0 3 3 3</span><br>v4.resize(<span class="hljs-number">3</span>);<br>printVector(v4); <span class="hljs-comment">// 1 2 3</span><br><br><span class="hljs-comment">// vector 取值</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>v.push_back(<span class="hljs-number">1</span>);<br>v.push_back(<span class="hljs-number">2</span>);<br>v.push_back(<span class="hljs-number">3</span>);<br>v.push_back(<span class="hljs-number">4</span>);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; v[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">cout</span> &lt;&lt; v.at(<span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 2</span><br><span class="hljs-built_in">cout</span> &lt;&lt; v.front() &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">cout</span> &lt;&lt; v.back() &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 4</span><br><br><span class="hljs-comment">// vector 插入</span><br>v.insert(v.begin(), <span class="hljs-number">100</span>); <br>printVector(v); <span class="hljs-comment">// 100 1 2 3 4</span><br>v.insert(v.begin(), <span class="hljs-number">2</span>, <span class="hljs-number">100</span>); <br>printVector(v); <span class="hljs-comment">// 100 100 100 1 2 3 4</span><br><br>v.push_back(<span class="hljs-number">10</span>);<br>printVector(v); <span class="hljs-comment">// 100 100 100 1 2 3 4 10</span><br><br><span class="hljs-comment">// vector 删除</span><br>v.pop_back();<br>printVector(v); <span class="hljs-comment">// 100 100 100 1 2 3 4</span><br><br>v.erase(v.begin());<br>printVector(v); <span class="hljs-comment">// 100 100 1 2 3 4 </span><br><br><span class="hljs-comment">// v.erase(v.begin(), v.end());</span><br>v.clear();<br></code></pre></div></td></tr></table></figure><h4 id="vector-遍历"><a href="#vector-遍历" class="headerlink" title="vector 遍历"></a>vector 遍历</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-comment">// for 语句体中不应改变其所遍历序列的大小</span><br><span class="hljs-comment">// 循环体内部含有向 vector 对象添加元素的语句，则不能使用 for</span><br><span class="hljs-comment">// 通过索引</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v.size(); ++i)<br>&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-comment">// for loop</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i: v)<br>&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-comment">// 迭代器</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator i = v.begin(); i != v.end(); i++)<br>&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br></code></pre></div></td></tr></table></figure><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><blockquote><p>双端队列</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// deque 构造方法</span><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt;  d;<br><br><span class="hljs-function"><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">d2</span><span class="hljs-params">(d)</span></span>;<br><br><span class="hljs-function"><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">d4</span><span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-number">1</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">d3</span><span class="hljs-params">(d2.begin(), d2.end())</span></span>;<br><br><span class="hljs-comment">// deque 赋值</span><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d;<br>d.assign(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>);<br>printDeque(d); <span class="hljs-comment">// 1 1 1</span><br><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d2;<br>d2.assign(d.begin(), d.end());<br>printDeque(d2); <span class="hljs-comment">// 1 1 1</span><br><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d3;<br>d3.push_back(<span class="hljs-number">1</span>);<br>d3.push_back(<span class="hljs-number">2</span>);<br>d3.push_front(<span class="hljs-number">3</span>);<br>printDeque(d3); <span class="hljs-comment">// 3 1 2</span><br>d3.swap(d2);<br>printDeque(d3); <span class="hljs-comment">// 1 1 1</span><br>printDeque(d2); <span class="hljs-comment">// 3 1 2</span><br><br><span class="hljs-comment">// deque 大小</span><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d;<br>d.push_back(<span class="hljs-number">1</span>);<br>d.push_back(<span class="hljs-number">2</span>);<br>d.push_back(<span class="hljs-number">3</span>);<br>d.push_back(<span class="hljs-number">4</span>);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; d.size() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 4</span><br><span class="hljs-built_in">cout</span> &lt;&lt; d.empty() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 0</span><br><br>d.resize(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>);<br>printDeque(d);  <span class="hljs-comment">// 1 2 3 4 2 2 2 2 2 2</span><br><br><span class="hljs-comment">// deque 取值</span><br><span class="hljs-built_in">cout</span> &lt;&lt; d[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">cout</span> &lt;&lt; d.at(<span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 1</span><br><br><span class="hljs-built_in">cout</span> &lt;&lt; d.front() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">cout</span> &lt;&lt; d.back() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 4</span><br><br><span class="hljs-comment">// deque 插入</span><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; d;<br>d.push_back(<span class="hljs-number">1</span>);<br>d.push_back(<span class="hljs-number">2</span>);<br>d.push_front(<span class="hljs-number">3</span>);<br>printDeque(d);  <span class="hljs-comment">// 3 1 2</span><br><br>d.insert(d.begin(), <span class="hljs-number">1</span>);<br>printDeque(d);  <span class="hljs-comment">// 1 3 1 2</span><br>d.insert(d.begin(), <span class="hljs-number">3</span>, <span class="hljs-number">2</span>);<br>printDeque(d);  <span class="hljs-comment">// 2 2 2 1 3 1 2</span><br><br><br><span class="hljs-comment">// deque 删除</span><br>d.pop_back();<br><br>d.pop_front();<br><br>d.erase(d.begin(), d.end());<br>d.clear();<br></code></pre></div></td></tr></table></figure><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><blockquote><p>先进后出</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"> <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br>s.push(<span class="hljs-number">10</span>);<br>s.push(<span class="hljs-number">20</span>);<br>s.push(<span class="hljs-number">30</span>);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; s.size() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 3</span><br><br><span class="hljs-built_in">cout</span> &lt;&lt; s.top() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 30</span><br>s.pop();<br><span class="hljs-built_in">cout</span> &lt;&lt; s.top() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 20</span><br>s.pop();<br><span class="hljs-built_in">cout</span> &lt;&lt; s.top() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 10</span><br>s.pop();<br><br><span class="hljs-built_in">cout</span> &lt;&lt; s.empty() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">cout</span> &lt;&lt; s.size() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 0</span><br></code></pre></div></td></tr></table></figure><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><blockquote><p>先进先出</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// queue 构造方法</span><br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>q.push(<span class="hljs-number">1</span>);  <span class="hljs-comment">// 往队尾放元素</span><br>q.push(<span class="hljs-number">2</span>);<br>q.push(<span class="hljs-number">3</span>);<br>q.push(<span class="hljs-number">4</span>);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; q.size() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 4</span><br><br><span class="hljs-keyword">while</span>(!q.empty())&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; q.front() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    q.pop();  <span class="hljs-comment">// 弹出队头元素</span><br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br></code></pre></div></td></tr></table></figure><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><blockquote><p>双向链表</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// list 构造方法</span><br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt; l;<br><span class="hljs-function"><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">l1</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">l2</span><span class="hljs-params">(l1.begin(), l1.end())</span></span>;<br>printList(l2);  <span class="hljs-comment">// 10 10 10 </span><br><br><span class="hljs-comment">// list 插入</span><br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt; l3;<br>l3.push_back(<span class="hljs-number">1</span>);<br>l3.push_back(<span class="hljs-number">2</span>);<br>l3.push_front(<span class="hljs-number">3</span>);<br>l3.push_front(<span class="hljs-number">4</span>);<br>printList(l3);  <span class="hljs-comment">// 4 3 1 2</span><br><br>l3.insert(l3.begin(), <span class="hljs-number">2</span>, <span class="hljs-number">100</span>);<br>printList(l3); <span class="hljs-comment">// 100 100 4 3 1 2 </span><br><br><span class="hljs-comment">// list 删除</span><br>l3.pop_back();<br>l3.pop_front();<br>printList(l3);  <span class="hljs-comment">// 100 4 3 1 </span><br><br>l3.remove(<span class="hljs-number">4</span>);<br>printList(l3);  <span class="hljs-comment">// 100 3 1</span><br>l3.erase(l3.begin(), l3.end());<br>l3.clear();<br><br><span class="hljs-comment">// list 赋值</span><br><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt; l;<br>l.assign(<span class="hljs-number">3</span>, <span class="hljs-number">10</span>);<br>printList(l);  <span class="hljs-comment">// 10 10 10</span><br>l.push_back(<span class="hljs-number">99</span>);<br>l.push_front(<span class="hljs-number">100</span>);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; l.size() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 5</span><br><span class="hljs-built_in">cout</span> &lt;&lt; l.empty() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">cout</span> &lt;&lt; l.front() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 100</span><br><span class="hljs-built_in">cout</span> &lt;&lt; l.back() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 99</span><br></code></pre></div></td></tr></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><blockquote><p>不允许重复的值，元素不允许修改</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s1;<br>s1.insert(<span class="hljs-number">8</span>);<br>s1.insert(<span class="hljs-number">3</span>);<br>s1.insert(<span class="hljs-number">2</span>);<br>s1.insert(<span class="hljs-number">7</span>);<br><br>printSet(s1);  <span class="hljs-comment">// 2 3 7 8</span><br><span class="hljs-built_in">cout</span> &lt;&lt; s1.size() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 4</span><br><span class="hljs-built_in">cout</span> &lt;&lt; s1.empty() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 0</span><br><br>s1.erase(<span class="hljs-number">2</span>);<br>printSet(s1);  <span class="hljs-comment">// 3 7 8</span><br><br>s1.erase(s1.begin(), s1.end());<br>s1.clear();<br><br><span class="hljs-comment">// set 查找</span><br><br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s1;<br>s1.insert(<span class="hljs-number">1</span>);<br>s1.insert(<span class="hljs-number">5</span>);<br>s1.insert(<span class="hljs-number">7</span>);<br>s1.insert(<span class="hljs-number">2</span>);<br>s1.insert(<span class="hljs-number">3</span>);<br>s1.insert(<span class="hljs-number">5</span>);<br><br>printSet(s1);  <span class="hljs-comment">// 1 2 3 5 7</span><br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator pos =  s1.find(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(pos != s1.end())&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到了 1 :&quot;</span> &lt;&lt; *pos &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;未找到&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; s1.count(<span class="hljs-number">5</span>) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 1</span><br><br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator low = s1.lower_bound(<span class="hljs-number">3</span>);<br><span class="hljs-keyword">if</span>(low != s1.end())&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到了 lower_bound(3):&quot;</span> &lt;&lt; *low &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;未找到&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator up = s1.upper_bound(<span class="hljs-number">3</span>);<br><span class="hljs-keyword">if</span>(up != s1.end())&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到了 upper_bound(3):&quot;</span> &lt;&lt; *up &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;未找到&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator, <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator&gt; ret = s1.equal_range(<span class="hljs-number">3</span>);<br><br><span class="hljs-built_in">cout</span> &lt;&lt; *(ret.first) &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 3 相当于 lower_bound</span><br><span class="hljs-built_in">cout</span> &lt;&lt; *(ret.second) &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 5 相当于 upper_bound</span><br><br><span class="hljs-comment">// set 排序</span><br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>, MyCompare&gt; s;<br>s.insert(<span class="hljs-number">10</span>);<br>s.insert(<span class="hljs-number">4</span>);<br>s.insert(<span class="hljs-number">6</span>);<br>s.insert(<span class="hljs-number">4</span>);<br>s.insert(<span class="hljs-number">7</span>);<br>s.insert(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> num : s)&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-comment">// 10 7 6 4 1</span><br></code></pre></div></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><blockquote><p>键值对</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// map 构造方法</span><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; m;<br><br><span class="hljs-comment">// map 插入</span><br>m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>m.insert(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));  <span class="hljs-comment">// 推荐</span><br>m.insert(<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;::value_type(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br>m[<span class="hljs-number">4</span>] = <span class="hljs-number">40</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;::iterator it = m.begin(); it != m.end(); it++)&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;key:&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">&quot;value:&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">// map 大小</span><br><span class="hljs-built_in">cout</span> &lt;&lt; m.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; m.empty() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-comment">// map 删除</span><br>m.erase(m.begin());  <span class="hljs-comment">// 删除第一个</span><br>m.erase(<span class="hljs-number">2</span>);  <span class="hljs-comment">// 删除 key 为 2 的键值对</span><br><br>m.erase(m.begin(), m.end());<br>m.clear();<br><br><span class="hljs-comment">// map 查找</span><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; m;<br>m.insert(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>m.insert(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));<br>m.insert(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;::iterator pos = m.find(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(pos != m.end())&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;找到&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;未找到&quot;</span>  &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-keyword">int</span> num = m.count(<span class="hljs-number">3</span>);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;键为3的数量为：&quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;::iterator ret1 = m.lower_bound(<span class="hljs-number">2</span>);  <span class="hljs-comment">// 小于等于 3 的第一个元素的迭代器</span><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;::iterator ret2 = m.upper_bound(<span class="hljs-number">2</span>);  <span class="hljs-comment">// 大于 3 的第一个元素的迭代器</span><br><br><span class="hljs-built_in">cout</span> &lt;&lt; ret1-&gt;first  &lt;&lt; ret1-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 2 20</span><br><span class="hljs-built_in">cout</span> &lt;&lt; ret2-&gt;first  &lt;&lt; ret2-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 3 30</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>完美校园自动打卡</title>
    <link href="/2021/03/19/17wanxiaoCheckInSCF/"/>
    <url>/2021/03/19/17wanxiaoCheckInSCF/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>今天你打卡了吗？</p>          </div><a id="more"></a><div class="note note-success">            <p>项目地址：<a href="https://github.com/ReaJason/17wanxiaoCheckin">https://github.com/ReaJason/17wanxiaoCheckin</a></p>          </div><h2 id="🌈使用方法"><a href="#🌈使用方法" class="headerlink" title="🌈使用方法"></a>🌈使用方法</h2><h3 id="1、新建云函数"><a href="#1、新建云函数" class="headerlink" title="1、新建云函数"></a>1、新建云函数</h3><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/17wanxiaoCheckin/Pictures/%E6%90%9C%E7%B4%A2%E4%BA%91%E5%87%BD%E6%95%B0.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/17wanxiaoCheckin/Pictures/%E6%96%B0%E5%BB%BA%E4%BA%91%E5%87%BD%E6%95%B01.png"></p><h3 id="2、上传-SCF-包"><a href="#2、上传-SCF-包" class="headerlink" title="2、上传 SCF 包"></a>2、上传 SCF 包</h3><p>本地上传 zip 包（17wanxiaoCheckin-SCF v*.*.zip：<a href="https://lingsiki.lanzoui.com/b0ekhmcxe">蓝奏云</a>，密码：2333）</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/17wanxiaoCheckin/Pictures/%E6%96%B0%E5%BB%BA%E4%BA%91%E5%87%BD%E6%95%B02.png"></p><h3 id="3、触发器配置"><a href="#3、触发器配置" class="headerlink" title="3、触发器配置"></a>3、触发器配置</h3><p>自定义创建 — 触发周期：自定义触发 — Cron 表达式：0 0 6,14 * * * * — 完成 — 立即跳转</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/17wanxiaoCheckin/Pictures/%E8%AE%BE%E7%BD%AE%E8%A7%A6%E5%8F%91%E5%99%A8.png"></p><h3 id="4、超时设置"><a href="#4、超时设置" class="headerlink" title="4、超时设置"></a>4、超时设置</h3><p>函数管理 — 函数配置 — 编辑 — 执行超时时间：900 — 保存</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/17wanxiaoCheckin/Pictures/%E7%BC%96%E8%BE%91%E4%BA%91%E5%87%BD%E6%95%B0.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/17wanxiaoCheckin/Pictures/%E7%BC%96%E8%BE%91%E4%BA%91%E5%87%BD%E6%95%B02.png"></p><h3 id="5、配置文件"><a href="#5、配置文件" class="headerlink" title="5、配置文件"></a>5、配置文件</h3><ul><li><p>整个 json 文件使用一个 <code>[]</code> 列表用来存储打卡用户数据，每一个用户占据了一个 <code>&#123;&#125;</code>键值对，初次修改务必填写的数据为：<code>phone</code>、<code>password</code>、<code>device_id</code>（获取方法：<a href="https://lingsiki.lanzoui.com/iQamDmt165i">蓝奏云</a>，下载解压使用）、健康打卡的开关（根据截图判断自己属于哪一类<a href="https://cdn.jsdelivr.net/gh/ReaJason/17wanxiaoCheckin/Pictures/one.png">【1】</a>、<a href="https://cdn.jsdelivr.net/gh/ReaJason/17wanxiaoCheckin/Pictures/two.png">【2】</a>），校内打卡开关（有则开），推送设置 <code>push</code>。</p></li><li><p>关于 <code>post_json</code>，如若打卡推送数据中无错误，则不用管，若有 null，或其他获取不到的情况，则酌情修改即可，和推送是一一对应的。</p></li><li><p>如果多人打卡，则复制单个用户完整的 <code>&#123;&#125;</code>，紧接在上个用户其后即可。</p></li><li><p>【第一次使用推荐 QQ 邮箱推送，数据推送全面】</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/17wanxiaoCheckin/Pictures/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99.png"></p><h3 id="6、测试部署"><a href="#6、测试部署" class="headerlink" title="6、测试部署"></a>6、测试部署</h3><p>若弹框【检测到您的函数未部署……】选是 — 查看执行日志以及推送信息（执行失败请带上执行日志完整截图反馈）</p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/17wanxiaoCheckin/Pictures/%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81.png"></p><h3 id="7、检测成功"><a href="#7、检测成功" class="headerlink" title="7、检测成功"></a>7、检测成功</h3><ul><li>第一类健康打卡成功结果：<code>&#123;&#39;msg&#39;: &#39;成功&#39;, &#39;code&#39;: &#39;10000&#39;, &#39;data&#39;: 1&#125;</code>，显示打卡频繁也算</li><li>第二类健康打卡成功结果：<code>&#123;&#39;code&#39;: 0, &#39;msg&#39;: &#39;成功&#39;&#125;</code></li><li>校内打卡成功结果：<code>&#123;&#39;msg&#39;: &#39;成功&#39;, &#39;code&#39;: &#39;10000&#39;, &#39;data&#39;: 1&#125;</code></li><li>仔细查看打卡的数据，如果有值为 null 的，可能是因为打卡数据无法自动填写，请在配置文件中添加该项的赋值</li><li>由于前面使用软件获取了 device_id，所以请使用支付宝小程序查看打卡结果是否记录上去，以免手机登录使用的 device_id 失效</li></ul><h3 id="8、表格数据-None"><a href="#8、表格数据-None" class="headerlink" title="8、表格数据 None"></a>8、表格数据 None</h3><ul><li>找到并记住自己值为 None 的选项，并记住此 propertyname，我们需要修改 value 为我们所填写的信息，有多少就修改多少</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/17wanxiaoCheckin/Pictures/%E6%9F%A5%E7%9C%8B%E8%A1%A8%E6%A0%BC.png"></p><ul><li>打开第一行推送数据，找到与之对应的推送数据</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/17wanxiaoCheckin/Pictures/%E6%9F%A5%E7%9C%8B%E6%8E%A8%E9%80%81.png"></p><ul><li>在第二行中查找推送数据，propertyname 下的 checkValue 为我们所能填写的值</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/17wanxiaoCheckin/Pictures/%E8%8E%B7%E5%8F%96%E5%80%BC.png"></p><ul><li>最后修改配置文件，第一类健康打卡则在 one_check 下的 post_json 下修改，校内即校内下面的</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/17wanxiaoCheckin/Pictures/%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE.png"></p><h2 id="📜FQA"><a href="#📜FQA" class="headerlink" title="📜FQA"></a>📜FQA</h2><ul><li>如果有问题，这边请 <a href="https://github.com/ReaJason/17wanxiaoCheckin#fqa">GitHub</a>，或进群反馈 <a href="https://github.com/ReaJason/17wanxiaoCheckin-Actions/issues/30">交流群</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Script</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微博超话签到工具</title>
    <link href="/2021/02/04/WBTopicCheckTool/"/>
    <url>/2021/02/04/WBTopicCheckTool/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>本工具接口全来自微博网页版，仅作封装和打包实现</p>          </div><a id="more"></a><div class="note note-success">            <p>项目地址：<a href="https://github.com/ReaJason/WBTopicCheckTool">https://github.com/ReaJason/WBTopicCheckTool</a></p>          </div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于之前的很多接口作废了，暂时也不想花时间在这上面了，之前也挖了点坑，这个写出来算是给之前 <a href="https://github.com/ReaJason/WeiBo_SuperTopics">WeiBo_SuperTopics</a> 一个交代，简单的用 PyQt5 封装了微博网页版的扫码登陆以及签到请求，想要学习的小伙伴可以下载源码进行学习。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ol><li>Windows 10</li><li>Python 3.7.9</li><li>requests==2.25.1，PyQt5==5.15.1</li></ol><h2 id="界面截图"><a href="#界面截图" class="headerlink" title="界面截图"></a>界面截图</h2><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WBTopicCheckTool_img/home.png" alt="home"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WBTopicCheckTool_img/scan_login.png" alt="scan_login"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WBTopicCheckTool_img/login_success.png" alt="login_success"></p><p><img src="https://cdn.jsdelivr.net/gh/ReaJason/blog_imgs/WBTopicCheckTool_img/check_in.png" alt="check_in.png"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>下载源码之后，先安装第三方库<code>pip install -r requirements.txt</code>，再使用 <code>python start.py</code>启动程序</li><li>程序打包命令，<code>pyinstaller -F -w -i ./res/favicon.ico start.py</code>，然后将<code>res</code>目录复制到 <code>dist</code>目录</li><li>扫码登录成功之后会自动获取超话列表，获取失败，刷新超话重新获取即可</li><li>超话数量越多，签到间隔建议设置大一点，以防请求异常</li><li>若无法使用本程序，请检查自己账号是否异常，不要拿异常账号反馈</li><li>本程序只供参考学习，请勿用于违法用途</li><li>使用本程序导致微博账号异常或冻结甚至封禁都与作者无关</li><li>凡以任何方式下载使用本程序者，视为自愿接受本声明约束。</li></ol><h2 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h2><p>​     <a href="https://lingsiki.lanzoui.com/b0eke1lof">https://lingsiki.lanzoui.com/b0eke1lof</a> 密码: 3d8a</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyQt5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python语法学习</title>
    <link href="/2021/01/19/PythonLearning/"/>
    <url>/2021/01/19/PythonLearning/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Python 脚本小子的自我养成，还远远不够！</p>          </div> <a id="more"></a><h2 id="学习环境"><a href="#学习环境" class="headerlink" title="学习环境"></a>学习环境</h2><ol><li><a href="https://www.python.org/downloads/release/python-379/">Python 3.7.9</a></li><li><a href="https://www.jetbrains.com/pycharm/download/other.html">PyCharm Professional Edition 2020.3.2</a></li><li><a href="https://www.ghpym.com/ideapatch.html">JetBrains 2020.3 通杀补丁（学习用，有能力请支持正版）</a></li><li><a href="https://www.bilibili.com/video/BV1Mz4y1C7LV"> 黑马程序员 python 5.0</a></li></ol><h2 id="Python-基础语法"><a href="#Python-基础语法" class="headerlink" title="Python 基础语法"></a>Python 基础语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 单行注释</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">多行注释1</span><br><span class="hljs-string">多行注释2</span><br><span class="hljs-string">多行注释3</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">多行注释1</span><br><span class="hljs-string">多行注释2</span><br><span class="hljs-string">多行注释3</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></div></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>可改变的量为变量，指向内存的一块空间，当不使用时即会被回收</li><li>变量名只能由数字、字母和下划线组成，不能用关键字，不能数字开头，建议不要用中文</li><li>变量名尽量见名知意</li><li>Python 中常量，一般通过全部大写字母来约定俗成</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 查询关键字</span><br><span class="hljs-keyword">import</span> keyword<br>print(keyword.kwlist)<br><br><span class="hljs-comment"># 变量的交换</span><br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">19</span><br>a, b = b, a<br>print(a)  <span class="hljs-comment"># 19</span><br>print(b)  <span class="hljs-comment"># 10</span><br></code></pre></div></td></tr></table></figure><h3 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h3><ul><li>True：除了 False 都是 True</li><li>False：0、0.0、0j、’’、[]、()、set()、{}、None</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># bool()，强制将其他类型转为bool</span><br>print(bool(<span class="hljs-number">10</span>))  <span class="hljs-comment"># True</span><br>print(bool(<span class="hljs-number">0</span>))  <span class="hljs-comment"># False</span><br>print(bool(<span class="hljs-number">0.0</span>))  <span class="hljs-comment"># False</span><br>print(bool(<span class="hljs-string">&#x27;0&#x27;</span>))  <span class="hljs-comment"># True</span><br>print(bool(<span class="hljs-string">&#x27;&#x27;</span>))  <span class="hljs-comment"># False</span><br>print(bool(&#123;&#125;))  <span class="hljs-comment"># False</span><br>print(bool([]))  <span class="hljs-comment"># False</span><br>print(bool(set()))  <span class="hljs-comment"># False</span><br>print(bool(<span class="hljs-number">0j</span>))  <span class="hljs-comment"># False</span><br>print(bool(<span class="hljs-literal">None</span>))  <span class="hljs-comment"># False</span><br></code></pre></div></td></tr></table></figure><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><ul><li>int 整型，二进制，八进制，十进制，十六进制</li><li>float 浮点型，小数</li><li>conplex 复数，实部+虚部</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># type()，获取变量的类型</span><br><span class="hljs-comment"># id()，获取变量内存地址</span><br><br>a = <span class="hljs-number">0b11</span><br>print(a, type(a))  <span class="hljs-comment"># 3 &lt;class &#x27;int&#x27;&gt;</span><br>b = <span class="hljs-number">0o11</span><br>print(b, type(b))  <span class="hljs-comment"># 9 &lt;class &#x27;int&#x27;&gt;</span><br>c = <span class="hljs-number">0x11</span><br>print(c, type(c))  <span class="hljs-comment"># 17 &lt;class &#x27;int&#x27;&gt;</span><br>d = <span class="hljs-number">1.1</span><br>print(d, type(d))  <span class="hljs-comment"># 1.1 &lt;class &#x27;float&#x27;&gt;</span><br>e = <span class="hljs-number">2e2</span><br>print(e, type(e))  <span class="hljs-comment"># 200.0 &lt;class &#x27;float&#x27;&gt;</span><br>f = <span class="hljs-number">1</span> + <span class="hljs-number">2j</span><br>print(f, type(f))  <span class="hljs-comment"># (1+2j) &lt;class &#x27;complex&#x27;&gt;</span><br>g = complex(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>print(g, type(g))  <span class="hljs-comment"># (2+3j) &lt;class &#x27;complex&#x27;&gt;</span><br>h = <span class="hljs-literal">True</span><br>print(h, type(h))  <span class="hljs-comment"># True &lt;class &#x27;bool&#x27;&gt;</span><br>i = <span class="hljs-literal">False</span><br>print(i, type(i))  <span class="hljs-comment"># False &lt;class &#x27;bool&#x27;&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># int()，强制将int、float、bool、纯数字字符串转为int</span><br>print(int(<span class="hljs-number">10</span>))  <span class="hljs-comment"># 10</span><br>print(int(<span class="hljs-number">10.66</span>))  <span class="hljs-comment"># 10</span><br>print(int(<span class="hljs-literal">True</span>))  <span class="hljs-comment"># 1</span><br>print(int(<span class="hljs-literal">False</span>))  <span class="hljs-comment"># 0</span><br>print(int(<span class="hljs-string">&#x27;12345678&#x27;</span>))  <span class="hljs-comment"># 12345678</span><br><br><span class="hljs-comment"># float()，强制将int、float、bool、纯数字字符串转为float</span><br>print(float(<span class="hljs-number">10</span>))  <span class="hljs-comment"># 10.0</span><br>print(float(<span class="hljs-number">10.66</span>))  <span class="hljs-comment"># 10.66</span><br>print(float(<span class="hljs-literal">True</span>))  <span class="hljs-comment"># 1.0</span><br>print(float(<span class="hljs-literal">False</span>))  <span class="hljs-comment"># 0.0</span><br>print(float(<span class="hljs-string">&#x27;12345678&#x27;</span>))  <span class="hljs-comment"># 12345678.0</span><br><br><span class="hljs-comment"># complex()，强制将int、float、bool、纯数字字符串、complex转为complex</span><br>print(complex(<span class="hljs-number">10</span>))  <span class="hljs-comment"># (10+0j)</span><br>print(complex(<span class="hljs-number">10.66</span>))  <span class="hljs-comment"># (10.66+0j)</span><br>print(complex(<span class="hljs-literal">True</span>))  <span class="hljs-comment"># (1+0j)</span><br>print(complex(<span class="hljs-literal">False</span>))  <span class="hljs-comment"># 0j</span><br>print(complex(<span class="hljs-string">&#x27;12345678&#x27;</span>))  <span class="hljs-comment"># (12345678+0j)</span><br>print(complex(<span class="hljs-number">1</span>+<span class="hljs-number">2j</span>))  <span class="hljs-comment"># (1+2j)</span><br><br><span class="hljs-comment"># 当两个不同类型的数据进行运算的时候，低精度默认向高精度转换</span><br><span class="hljs-comment"># bool -&gt; int -&gt; float -&gt; complex</span><br><span class="hljs-comment"># 不要用小数作比较，存在精度损耗</span><br></code></pre></div></td></tr></table></figure><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 2 -&gt; 10</span><br>a = <span class="hljs-number">0b11</span><br>print(int(a))  <span class="hljs-comment"># 3</span><br><br><span class="hljs-comment"># 8 -&gt; 10</span><br>b = <span class="hljs-number">0o11</span><br>print(int(b))  <span class="hljs-comment"># 9</span><br><br><span class="hljs-comment"># 16 -&gt; 10</span><br>c = <span class="hljs-number">0x11</span><br>print(int(c))  <span class="hljs-comment"># 17</span><br><br><span class="hljs-comment"># 10 -&gt; 2</span><br>d = <span class="hljs-number">3</span><br>print(bin(d))  <span class="hljs-comment"># 0b11</span><br><br><span class="hljs-comment"># 10 -&gt; 8</span><br>print(oct(d))  <span class="hljs-comment"># 0o3</span><br><br><span class="hljs-comment"># 10 -&gt; 16</span><br>print(hex(d))  <span class="hljs-comment"># 0x3</span><br></code></pre></div></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># +、-、*、/、//、%、**</span><br><span class="hljs-comment"># / 永远返回浮点数类型</span><br><span class="hljs-comment"># // 直接舍弃小数部分</span><br><span class="hljs-comment"># % 求余数，** 乘方</span><br><span class="hljs-comment"># 混合运算优先级顺序，() 高于 ** 高于 *,/,//,% 高于 +,-</span><br><br>print(<span class="hljs-number">5</span> + <span class="hljs-number">2</span>)  <span class="hljs-comment"># 7</span><br>print(<span class="hljs-number">5.0</span> + <span class="hljs-number">2</span>)  <span class="hljs-comment"># 7.0</span><br>print(<span class="hljs-number">5</span> - <span class="hljs-number">2</span>)  <span class="hljs-comment"># 3</span><br>print(<span class="hljs-number">5</span> * <span class="hljs-number">2</span>)  <span class="hljs-comment"># 10</span><br>print(<span class="hljs-number">5</span> / <span class="hljs-number">2</span>)  <span class="hljs-comment"># 2.5</span><br>print(<span class="hljs-number">4</span> / <span class="hljs-number">2</span>)  <span class="hljs-comment"># 2.0</span><br>print(<span class="hljs-number">5</span> // <span class="hljs-number">2</span>)  <span class="hljs-comment"># 2</span><br>print(<span class="hljs-number">5</span> % <span class="hljs-number">2</span>)  <span class="hljs-comment"># 1</span><br>print(<span class="hljs-number">5</span> ** <span class="hljs-number">2</span>)  <span class="hljs-comment"># 25</span><br></code></pre></div></td></tr></table></figure><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># =，将等号右侧的结果赋值给等号左边得到变量</span><br><span class="hljs-comment"># 单变量赋值</span><br>num = <span class="hljs-number">1</span><br>print(num)  <span class="hljs-comment"># 1</span><br><br><span class="hljs-comment"># 多变量赋值</span><br>a, b, c = <span class="hljs-number">1</span>, <span class="hljs-number">1.1</span>, <span class="hljs-string">&quot;hello&quot;</span><br>print(a)  <span class="hljs-comment"># 1</span><br>print(b)  <span class="hljs-comment"># 1.1</span><br>print(c)  <span class="hljs-comment"># hello</span><br><br><span class="hljs-comment"># 多变量赋相同值</span><br>a = b = <span class="hljs-number">100</span><br>print(a)  <span class="hljs-comment"># 100</span><br>print(b)  <span class="hljs-comment"># 100</span><br><br><span class="hljs-comment"># 变量交换值</span><br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">20</span><br>a, b = b, a<br>print(a)  <span class="hljs-comment"># 20</span><br>print(b)  <span class="hljs-comment"># 10</span><br><br><span class="hljs-comment"># +=，c += a 等价于 c = c + a</span><br><span class="hljs-comment"># -=，c -= a 等价于 c = c - a</span><br><span class="hljs-comment"># *=，c *= a 等价于 c = c * a</span><br><span class="hljs-comment"># /=，c /= a 等价于 c = c / a</span><br><span class="hljs-comment"># //=，c //= a 等价于 c = c // a</span><br><span class="hljs-comment"># %=，c %= a 等价于 c = c % a</span><br><span class="hljs-comment"># **=，c **= a 等价于 c = c ** a</span><br><br><span class="hljs-comment"># 注意：先计算右侧结果，在进行复合赋值运算</span><br>a = <span class="hljs-number">10</span><br>a *= <span class="hljs-number">1</span> + <span class="hljs-number">2</span><br>print(a)  <span class="hljs-comment"># 30</span><br></code></pre></div></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># ==，判断相等，如果两侧操作数结果相等，则为 True，反之为 False</span><br><span class="hljs-comment"># !=，不等于，如果两侧操作数不相等，则为 True，反之为 False</span><br><span class="hljs-comment"># &gt;，如果运算符左侧操作数结果大于右侧操作数结果，则为 True，反之为 False</span><br><span class="hljs-comment"># &lt;，如果运算符左侧操作数结果小于右侧操作数结果，则为 True，反之为 False</span><br><span class="hljs-comment"># &gt;=，如果运算符左侧操作数结果大于等于右侧操作数结果，则为 True，反之为 False</span><br><span class="hljs-comment"># &lt;=，如果运算符左侧操作数结果小于等于右侧操作数结果，则为 True，反之为 False</span><br><br>print(<span class="hljs-number">1</span> == <span class="hljs-number">1</span>)  <span class="hljs-comment"># True</span><br>print(<span class="hljs-number">2</span> != <span class="hljs-number">1</span>)  <span class="hljs-comment"># True</span><br>print(<span class="hljs-number">3</span> &gt; <span class="hljs-number">2</span>)  <span class="hljs-comment"># True</span><br>print(<span class="hljs-number">2</span> &lt; <span class="hljs-number">3</span>)  <span class="hljs-comment"># True</span><br>print(<span class="hljs-number">3</span> &gt;= <span class="hljs-number">2</span>)  <span class="hljs-comment"># True</span><br>print(<span class="hljs-number">2</span> &lt;= <span class="hljs-number">3</span>)  <span class="hljs-comment"># True</span><br></code></pre></div></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># and，与，都真才真，若前一个表达式为假则不会再继续运算后面的表达式，因此建议假可能性大的放前面，优化程序</span><br><span class="hljs-comment"># or，或，一真则真，若钱一个表达式为真则不会再继续运算后面的表达式，因此建议真可能性大的放前面，优化程序</span><br><span class="hljs-comment"># not，非，取反</span><br></code></pre></div></td></tr></table></figure><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># if判断</span><br><span class="hljs-keyword">if</span> 条件<span class="hljs-number">1</span>：<br>    条件<span class="hljs-number">1</span>成立的代码<br>    ......<br><span class="hljs-keyword">elif</span> 条件<span class="hljs-number">2</span>:<br>    条件<span class="hljs-number">2</span>成立的代码<br>    ......<br><span class="hljs-keyword">else</span>:<br>    条件都不成立执行的代码<br>    ......<br><br><span class="hljs-comment"># 打印成绩等地，A</span><br>num = <span class="hljs-number">100</span><br><span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">90</span>:<br>    print(<span class="hljs-string">&#x27;A&#x27;</span>)<br><span class="hljs-keyword">elif</span> num &gt; <span class="hljs-number">60</span>:<br>    print(<span class="hljs-string">&#x27;B&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">&#x27;C&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 条件成立执行的表达式 if 条件 else 条件不成立执行的表达式</span><br>a = <span class="hljs-number">10</span> <span class="hljs-keyword">if</span> <span class="hljs-number">5</span> &gt; <span class="hljs-number">3</span> <span class="hljs-keyword">else</span> <span class="hljs-number">5</span><br>print(a)  <span class="hljs-comment"># 10</span><br></code></pre></div></td></tr></table></figure><h4 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 单 while 循环</span><br><span class="hljs-keyword">while</span> 条件：<br>    条件成立执行代码<span class="hljs-number">1</span><br>    条件成立执行代码<span class="hljs-number">2</span><br>    ......<br><br><span class="hljs-comment"># 循环打印 5 次，hello world</span><br>n = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> n &lt;= <span class="hljs-number">5</span>:<br>    print(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>    n += <span class="hljs-number">1</span><br>“”“<br>hello world<br>hello world<br>hello world<br>hello world<br>hello world<br>”“”<br><br><span class="hljs-comment"># while else，else 为循环执行之后执行的代码</span><br>n = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> n &lt;= <span class="hljs-number">5</span>:<br>    print(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>    n += <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">&#x27;loop done&#x27;</span>)<br>“”“<br>hello world<br>hello world<br>hello world<br>hello world<br>hello world<br>loop done<br>”“”<br></code></pre></div></td></tr></table></figure><h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 跳出循环</span><br></code></pre></div></td></tr></table></figure><h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 跳过此次循环，转而执行下一次循环</span><br></code></pre></div></td></tr></table></figure><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 单 for 循环</span><br><span class="hljs-keyword">for</span> 临时变量 <span class="hljs-keyword">in</span> 序列：<br>    重复执行代码<span class="hljs-number">1</span><br>    重复执行代码<span class="hljs-number">2</span><br>    ......<br><br><span class="hljs-comment"># for 循环打印 hello world</span><br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;hello world&quot;</span>:<br>    print(word)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">h</span><br><span class="hljs-string">e</span><br><span class="hljs-string">l</span><br><span class="hljs-string">l</span><br><span class="hljs-string">o</span><br><span class="hljs-string"> </span><br><span class="hljs-string">w</span><br><span class="hljs-string">o</span><br><span class="hljs-string">r</span><br><span class="hljs-string">l</span><br><span class="hljs-string">d</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># for else，else 为循环执行之后执行的代码</span><br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;hello world&quot;</span>:<br>    print(word)<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">&quot;loop done&quot;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">h</span><br><span class="hljs-string">e</span><br><span class="hljs-string">l</span><br><span class="hljs-string">l</span><br><span class="hljs-string">o</span><br><span class="hljs-string"> </span><br><span class="hljs-string">w</span><br><span class="hljs-string">o</span><br><span class="hljs-string">r</span><br><span class="hljs-string">l</span><br><span class="hljs-string">d</span><br><span class="hljs-string">loop done</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></div></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>可用 <code>&quot;....&quot;</code>、<code>&#39;...&#39;</code> 以及 <code>&quot;&quot;&quot;...&quot;&quot;&quot;</code> 来表示字符串</li><li>字符串可用 <code>/</code>来转义特殊字符，字符串前加 <code>r</code>，即表示原始字符串</li><li>不可变类型</li></ul><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 索引从0开始，有负索引，从-1开始，因为 -0 = 0</span><br><span class="hljs-comment"># 索引如果越界，会报错 IndexError</span><br>word = <span class="hljs-string">&#x27;Python&#x27;</span><br>print(word[<span class="hljs-number">0</span>])  <span class="hljs-comment"># P</span><br>print(word[<span class="hljs-number">-1</span>])  <span class="hljs-comment"># n</span><br>print(word[<span class="hljs-number">5</span>])  <span class="hljs-comment"># n</span><br>print(word[<span class="hljs-number">-6</span>])  <span class="hljs-comment"># P</span><br></code></pre></div></td></tr></table></figure><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 切片越界自动处理，并不会报错</span><br>word = <span class="hljs-string">&#x27;Python&#x27;</span><br>print(word[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])  <span class="hljs-comment"># Py</span><br>print(word[::<span class="hljs-number">2</span>])  <span class="hljs-comment"># 设置步进为 2，Pto</span><br>print(word[<span class="hljs-number">2</span>:])  <span class="hljs-comment"># thon</span><br>print(word[:])  <span class="hljs-comment"># Python</span><br>print(word[<span class="hljs-number">3</span>:])  <span class="hljs-comment"># hon</span><br>print(word[<span class="hljs-number">1</span>:<span class="hljs-number">8</span>])  <span class="hljs-comment"># ython</span><br></code></pre></div></td></tr></table></figure><h4 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># format()</span><br><span class="hljs-comment"># # 格式&#123;:[填充][对齐 &lt; &gt; = ^][符号 + = ][宽度][千位分隔符 , _][.保留位数][类型 b c d o x n...]&#125;</span><br>print(<span class="hljs-string">&#x27;&#123;&#125;、&#123;&#125;、&#123;&#125;&#x27;</span>.format(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 1、2、3</span><br>print(<span class="hljs-string">&#x27;&#123;0&#125;、&#123;1&#125;、&#123;2&#125;&#x27;</span>.format(a, b, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 1、2、3</span><br>print(<span class="hljs-string">&#x27;&#123;2&#125;、&#123;1&#125;、&#123;0&#125;&#x27;</span>.format(<span class="hljs-number">1</span>, b, c))  <span class="hljs-comment"># 3、2、1</span><br>print(<span class="hljs-string">&#x27;&#123;x&#125;、&#123;y&#125;&#x27;</span>.format(x=<span class="hljs-number">3</span>, y=<span class="hljs-number">2</span>))  <span class="hljs-comment"># 3、2</span><br>print(<span class="hljs-string">&#x27;&#123;0[0]&#125;、&#123;0[1]&#125;&#x27;</span>.format([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]))  <span class="hljs-comment"># 1、2</span><br><br><br><span class="hljs-comment"># f-string 使用基本和 format() 格式相同</span><br><span class="hljs-comment"># &#123;&#125;中不允许出现\，如需使用可创建临时变量</span><br>word = <span class="hljs-string">&#x27;Python&#x27;</span><br>print(<span class="hljs-string">f&#x27;I like <span class="hljs-subst">&#123;word&#125;</span>&#x27;</span>)  <span class="hljs-comment"># I like Python</span><br>print(<span class="hljs-string">f&#x27;I like <span class="hljs-subst">&#123;word!s&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 调用str()  I like Python</span><br>print(<span class="hljs-string">f&#x27;I like <span class="hljs-subst">&#123;word!a&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 调用ascii()  I like &#x27;Python&#x27;</span><br>print(<span class="hljs-string">f&#x27;I like <span class="hljs-subst">&#123;word!r&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 调用repr()  I like &#x27;Python&#x27;</span><br>print(<span class="hljs-string">f&#x27;I like <span class="hljs-subst">&#123;repr(word)&#125;</span>&#x27;</span>)  <span class="hljs-comment"># I like &#x27;Python&#x27;</span><br></code></pre></div></td></tr></table></figure><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># str()，强制转化成字符串</span><br>print(str(<span class="hljs-number">1</span>))  <span class="hljs-comment"># &#x27;1&#x27;</span><br>print(str(<span class="hljs-number">1.1</span>))  <span class="hljs-comment"># &#x27;1.1&#x27;</span><br>print(str(<span class="hljs-literal">True</span>))  <span class="hljs-comment"># &#x27;True&#x27;</span><br>print(str([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))  <span class="hljs-comment"># &#x27;[1, 2, 3]&#x27;</span><br>print(str(&#123;<span class="hljs-string">&quot;str&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>&#125;))  <span class="hljs-comment"># &quot;&#123;&#x27;str&#x27;: &#x27;123&#x27;&#125;&quot;</span><br><br><span class="hljs-comment"># + 拼接字符串，* 复制多份</span><br>str1 = <span class="hljs-string">&quot;hello &quot;</span><br>str2 = <span class="hljs-string">&quot;python&quot;</span><br>print(str1 + str2)  <span class="hljs-comment"># hello python</span><br>print(str1 * <span class="hljs-number">3</span>)  <span class="hljs-comment"># hello hello hello </span><br><br><span class="hljs-comment"># repr()，不转移字符原型化输出字符串（pycharm 里面 run 会自动优化输出，使用命令行更直观）</span><br>print(str(<span class="hljs-string">&#x27;hello world&#x27;</span>))  <span class="hljs-comment"># &#x27;hello world&#x27;</span><br>print(repr(<span class="hljs-string">&#x27;hello world&#x27;</span>))  <span class="hljs-comment"># &quot;&#x27;hello world&#x27;&quot;</span><br><br><span class="hljs-comment"># len()，查看字符串长度</span><br>hello_str = <span class="hljs-string">&quot;hello world i like python and c plus and everything hello my friend&quot;</span><br>print(len(hello_str))  <span class="hljs-comment"># 67</span><br><br><span class="hljs-comment"># find(sub[, start[, end]])，检测 sub 子串是否包含在字符串 [start,end] 中，找到返回下标，没找到返回 -1</span><br><span class="hljs-comment"># rfind()，从右边开始找</span><br>print(hello_str.find(<span class="hljs-string">&quot;world&quot;</span>))  <span class="hljs-comment"># 6</span><br>print(hello_str.find(<span class="hljs-string">&quot;worlds&quot;</span>))  <span class="hljs-comment"># -1</span><br>print(hello_str.find(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">100</span>))  <span class="hljs-comment"># 52</span><br><br><span class="hljs-comment"># index(sub[, start[, end]])，检测 sub 子串是否包含在字符串 [start,end] 中，找到返回下标，没找到报错</span><br><span class="hljs-comment"># rindex()，从右边开始找</span><br>print(hello_str.index(<span class="hljs-string">&quot;world&quot;</span>))  <span class="hljs-comment"># 6</span><br>print(hello_str.index(<span class="hljs-string">&quot;worlds&quot;</span>))  <span class="hljs-comment"># ValueError: substring not found</span><br>print(hello_str.index(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">100</span>))  <span class="hljs-comment"># 52</span><br><br><span class="hljs-comment"># count()，返回子串出现的次数</span><br>print(hello_str.count(<span class="hljs-string">&quot;hello&quot;</span>))  <span class="hljs-comment"># 2</span><br>print(hello_str.count(<span class="hljs-string">&quot;i&quot;</span>))  <span class="hljs-comment"># 4</span><br><br><span class="hljs-comment"># replace(old, new[, count])，返回字符串的副本，将 new 替代 old，并指定 count 次数</span><br>new_str = hello_str.replace(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;fuck&quot;</span>)<br>print(hello_str)  <span class="hljs-comment"># hello world i like python and c plus and everything hello my friend</span><br>print(new_str)  <span class="hljs-comment"># fuck world i like python and c plus and everything fuck my friend</span><br>new_str = hello_str.replace(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;fuck&quot;</span>， <span class="hljs-number">1</span>)<br>print(new_str)  <span class="hljs-comment"># fuck world i like python and c plus and everything hello my friend</span><br><br><span class="hljs-comment"># split(sep=None, maxsplit=-1)，返回一个由字符串内单词组成的列表，使用 sep 作为分隔字符串，如果给出了 maxsplit，则最多进行 maxsplit 次拆分，默认以空字符串作为分隔符</span><br>print(hello_str.split())  <span class="hljs-comment"># [&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;i&#x27;, &#x27;like&#x27;, &#x27;python&#x27;, &#x27;and&#x27;, &#x27;c&#x27;, &#x27;plus&#x27;, &#x27;and&#x27;, &#x27;everything&#x27;, &#x27;hello&#x27;, &#x27;my&#x27;, &#x27;friend&#x27;]</span><br>print(hello_str.split(maxsplit=<span class="hljs-number">1</span>))  <span class="hljs-comment"># [&#x27;hello&#x27;, &#x27;world i like python and c plus and everything hello my friend&#x27;]</span><br><br><span class="hljs-comment"># strip([chars])，返回原字符串的副本，移除其中的前导和末尾字符，默认移除前后空白，可指定对应 chars</span><br><span class="hljs-comment"># lstrip()，只删除左边，rstrip()，只删除右边</span><br>hello_str = <span class="hljs-string">&quot;   hello world  &quot;</span><br>print(hello_str)  <span class="hljs-comment"># &#x27;   hello world  &#x27;</span><br>print(hello_str.strip())  <span class="hljs-comment"># &#x27;hello world&#x27;</span><br><br><span class="hljs-comment"># join(iterable)，返回一个由 iterable 中的字符串拼接而成的字符串</span><br>str_list = [<span class="hljs-string">&quot;my&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;is&quot;</span>, <span class="hljs-string">&quot;ReaJason&quot;</span>]<br>print(<span class="hljs-string">&quot; &quot;</span>.join(str_list))  <span class="hljs-comment"># my name is ReaJason</span><br>str_dict = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>&#125;<br>print(<span class="hljs-string">&quot; &quot;</span>.join(str_dict))  <span class="hljs-comment"># name age</span><br><br><span class="hljs-comment"># capitalize()，返回原字符串的副本，其首个字符大写，其余为小写</span><br>print(<span class="hljs-string">&quot;hello world&quot;</span>.capitalize())  <span class="hljs-comment"># Hello world</span><br><br><span class="hljs-comment"># lower()，返回原字符串的副本，其所有区分大小写的字符均转换为小写</span><br><span class="hljs-comment"># islower()，判断字符串是否全为小写</span><br>print(<span class="hljs-string">&quot;HELLO WORLD&quot;</span>.lower())  <span class="hljs-comment"># hello world</span><br>print(<span class="hljs-string">&quot;HELLO WORLD&quot;</span>.islower())  <span class="hljs-comment"># False</span><br>print(<span class="hljs-string">&quot;hello world&quot;</span>.islower())  <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># title()，返回原字符串的标题版本，其中每个单词第一个字母为大写，其余字母为小写</span><br>print(<span class="hljs-string">&quot;hello world&quot;</span>.title())  <span class="hljs-comment"># Hello World</span><br><br><span class="hljs-comment"># upper()，返回原字符串的副本，其中所有区分大小写的字符均转换为大写</span><br><span class="hljs-comment"># isupper()，判断字符串是否全为大写</span><br>print(<span class="hljs-string">&quot;hello world&quot;</span>.upper())  <span class="hljs-comment"># HELLO WORLD</span><br>print(<span class="hljs-string">&quot;hello world&quot;</span>.isupper())  <span class="hljs-comment"># False</span><br>print(<span class="hljs-string">&quot;HELLO WORLD&quot;</span>.isupper())  <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># ljust(width[, fillchar])，返回长度为 width 的靠左对齐字符串，使用指定的 fillchar 填充空位</span><br>print(<span class="hljs-string">&quot;hello world&quot;</span>.ljust(<span class="hljs-number">20</span>))  <span class="hljs-comment"># &#x27;hello world         &#x27;</span><br>print(<span class="hljs-string">&quot;hello world&quot;</span>.ljust(<span class="hljs-number">20</span>, <span class="hljs-string">&quot;-&quot;</span>))  <span class="hljs-comment"># &#x27;hello world---------&#x27;</span><br><br><span class="hljs-comment"># rjust(width[, fillchar])，返回长度为 width 的靠右对齐字符串，使用指定的 fillchar 填充空位</span><br>print(<span class="hljs-string">&quot;hello world&quot;</span>.rjust(<span class="hljs-number">20</span>))  <span class="hljs-comment"># &#x27;         hello world&#x27;</span><br>print(<span class="hljs-string">&quot;hello world&quot;</span>.rjust(<span class="hljs-number">20</span>, <span class="hljs-string">&quot;-&quot;</span>))  <span class="hljs-comment"># &#x27;---------hello world&#x27;</span><br><br><span class="hljs-comment"># center(width[, fillchar])，返回长度为 width 的居中对齐字符串，使用指定的 fillchar 填充空位</span><br>print(<span class="hljs-string">&quot;hello world&quot;</span>.center(<span class="hljs-number">20</span>))  <span class="hljs-comment"># &#x27;    hello world     &#x27;</span><br>print(<span class="hljs-string">&quot;hello world&quot;</span>.center(<span class="hljs-number">20</span>, <span class="hljs-string">&quot;-&quot;</span>))  <span class="hljs-comment"># &#x27;----hello world-----&#x27;</span><br><br><span class="hljs-comment"># startswith(prefix[, start[, end]])，如果字符串以指定的 prefix 开始则返回 True，否则返回 False</span><br>print(<span class="hljs-string">&quot;hello world&quot;</span>.startswith(<span class="hljs-string">&quot;hello&quot;</span>))  <span class="hljs-comment"># True</span><br>print(<span class="hljs-string">&quot;hello world&quot;</span>.startswith(<span class="hljs-string">&quot;h&quot;</span>))  <span class="hljs-comment"># True</span><br>print(<span class="hljs-string">&quot;hello world&quot;</span>.startswith(<span class="hljs-string">&quot;world&quot;</span>))  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># endswith(suffix[, start[, end]])，如果字符串以指定的 suffix 结束返回 True，否则返回 False</span><br>print(<span class="hljs-string">&quot;hello world&quot;</span>.endswith(<span class="hljs-string">&quot;world&quot;</span>))  <span class="hljs-comment"># True</span><br>print(<span class="hljs-string">&quot;hello world&quot;</span>.endswith(<span class="hljs-string">&quot;d&quot;</span>))  <span class="hljs-comment"># True</span><br>print(<span class="hljs-string">&quot;hello world&quot;</span>.endswith(<span class="hljs-string">&quot;hello&quot;</span>))  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># isalpha(),如果字符串中的所有字符都是字母，并且至少有一个字符，返回 True ，否则返回 False</span><br>print(<span class="hljs-string">&quot;hello world&quot;</span>.isalpha())  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># isdigit()，如果字符串中的所有字符都是数字，并且至少有一个字符，返回 True ，否则返回 False</span><br>print(<span class="hljs-string">&quot;1234&quot;</span>.isdigit())  <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># isalnum()，如果字符串中的所有字符都是字母或数字且至少有一个字符，则返回 True ， 否则返回 False</span><br>print(<span class="hljs-string">&quot;1234&quot;</span>.isalnum())  <span class="hljs-comment"># True</span><br>print(<span class="hljs-string">&quot;hello world&quot;</span>.isalnum())  <span class="hljs-comment"># False</span><br>print(<span class="hljs-string">&quot;hello1world&quot;</span>.isalnum())  <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># isspace()，如果字符串中只有空白字符且至少有一个字符则返回 True ，否则返回 False</span><br>print(<span class="hljs-string">&quot;   &quot;</span>.isspace())  <span class="hljs-comment"># True</span><br></code></pre></div></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul><li>用 <code>[]</code> 组合复合类型（不限定只能一种类型）</li><li>使用方括号，其中的项以逗号分隔: <code>[a]</code>, <code>[a, b, c]</code></li><li>使用一对方括号来表示空列表: <code>[]</code></li><li>可变数据类型，可获取，可修改，有序</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">list1 = [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-number">13.14</span>, <span class="hljs-literal">True</span>, <span class="hljs-number">1</span>+<span class="hljs-number">1j</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;ReaJason&#x27;</span>]<br></code></pre></div></td></tr></table></figure><h4 id="索引-1"><a href="#索引-1" class="headerlink" title="索引"></a>索引</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">print(list1[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 1</span><br>print(list1[<span class="hljs-number">-7</span>])  <span class="hljs-comment"># 1</span><br>print(list1[<span class="hljs-number">-1</span>])  <span class="hljs-comment"># ReaJason</span><br>print(list1[<span class="hljs-number">6</span>])  <span class="hljs-comment"># ReaJason</span><br>print(list1[<span class="hljs-number">5</span>][<span class="hljs-number">1</span>])  <span class="hljs-comment"># 2</span><br>list1[<span class="hljs-number">5</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">250</span><br>print(list1)  <span class="hljs-comment"># [1, &#x27;Python&#x27;, 13.14, True, (1+1j), [1, 250, 3], &#x27;ReaJason&#x27;]</span><br><br><span class="hljs-comment"># 修改指定索引数据</span><br>list1[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span><br>print(list1)  <span class="hljs-comment"># [10, &#x27;Python&#x27;, 13.14, True, (1+1j), [1, 2, 3], &#x27;ReaJason&#x27;]</span><br></code></pre></div></td></tr></table></figure><h4 id="切片-1"><a href="#切片-1" class="headerlink" title="切片"></a>切片</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">print(list1[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])  <span class="hljs-comment"># [1, &#x27;Python&#x27;]</span><br>print(list1[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>])  <span class="hljs-comment"># [1, 13.14, (1+1j)]</span><br>print(list1[::<span class="hljs-number">-1</span>])  <span class="hljs-comment"># [&#x27;ReaJason&#x27;, [1, 2, 3], (1+1j), True, 13.14, &#x27;Python&#x27;, 1]</span><br></code></pre></div></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># for 遍历列表</span><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-number">13.14</span>, <span class="hljs-literal">True</span>, <span class="hljs-number">1</span>+<span class="hljs-number">1j</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;ReaJason&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list1:<br>    print(i)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1</span><br><span class="hljs-string">Python</span><br><span class="hljs-string">13.14</span><br><span class="hljs-string">True</span><br><span class="hljs-string">(1+1j)</span><br><span class="hljs-string">[1, 2, 3]</span><br><span class="hljs-string">ReaJason</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># enumarate()，返回索引和值的元组</span><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-number">13.14</span>, <span class="hljs-literal">True</span>, <span class="hljs-number">1</span>+<span class="hljs-number">1j</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;ReaJason&#x27;</span>]<br><span class="hljs-keyword">for</span> index, value <span class="hljs-keyword">in</span> enumerate(list1):<br>    print(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;index&#125;</span>：<span class="hljs-subst">&#123;value&#125;</span>&quot;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">0：1</span><br><span class="hljs-string">1：Python</span><br><span class="hljs-string">2：13.14</span><br><span class="hljs-string">3：True</span><br><span class="hljs-string">4：(1+1j)</span><br><span class="hljs-string">5：[1, 2, 3]</span><br><span class="hljs-string">6：ReaJason</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># list()，强制转换成列表</span><br>print(list(<span class="hljs-string">&#x27;12345678&#x27;</span>))  <span class="hljs-comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;]</span><br><br><span class="hljs-comment"># + 拼接列表，* 复制元素多份</span><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>list2 = [<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;python&quot;</span>,]<br>print(list1 + list2)  <span class="hljs-comment"># [1, 2, 3, &#x27;hello&#x27;, &#x27;python&#x27;]</span><br>print(list2 * <span class="hljs-number">2</span>)  <span class="hljs-comment"># [&#x27;hello&#x27;, &#x27;python&#x27;, &#x27;hello&#x27;, &#x27;python&#x27;]</span><br><br><span class="hljs-comment"># len()，获取列表元素个数</span><br>list2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>print(len(list2))  <span class="hljs-comment"># 7</span><br><br><span class="hljs-comment"># count(x)，返回元素 x 在列表中出现的次数</span><br>print(list2.count(<span class="hljs-number">1</span>))  <span class="hljs-comment"># 2</span><br><br><span class="hljs-comment"># reverse()，直接翻转原数组的所有元素</span><br>list2.reverse()<br>print(list2)  <span class="hljs-comment"># [5, 4, 3, 2, 1]</span><br><br><span class="hljs-comment"># sort(key=None, reverse=False)，对列表中的元素进行排序</span><br>list2.sort()  <span class="hljs-comment"># [1, 1, 2, 2, 3, 4, 5]</span><br>print(list2)<br>list2.sort(reverse=<span class="hljs-literal">True</span>)<br>print(list2)  <span class="hljs-comment"># [5, 4, 3, 2, 2, 1, 1]</span><br><br><span class="hljs-comment"># index(x[, start[, end]])，返回列表中第一个值为 x 的元素的索引，如果不存在会抛出 ValueError 异常</span><br>name_list = [<span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;Lucy&quot;</span>, <span class="hljs-string">&quot;LiLy&quot;</span>]<br>print(name_list.index(<span class="hljs-string">&quot;Tom&quot;</span>))  <span class="hljs-comment"># 1</span><br>print(name_list.index(<span class="hljs-string">&quot;Toms&quot;</span>))  <span class="hljs-comment"># ValueError: &#x27;Toms&#x27; is not in list</span><br><br><span class="hljs-comment"># in，not in，判断元素是否在列表中，为通用方法，适用于字符串，字典，元组，集合</span><br>print(<span class="hljs-string">&quot;ReaJason&quot;</span> <span class="hljs-keyword">in</span> name_list)  <span class="hljs-comment"># True</span><br>print(<span class="hljs-string">&quot;Dazzling&quot;</span> <span class="hljs-keyword">in</span> name_list)  <span class="hljs-comment"># False</span><br>print(<span class="hljs-string">&quot;ReaJason&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> name_list)  <span class="hljs-comment"># False</span><br>print(<span class="hljs-string">&quot;Dazzling&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> name_list)  <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># append(x)，在列表末尾添加元素x</span><br>name_list.append(<span class="hljs-string">&quot;Jack&quot;</span>)<br>print(name_list)  <span class="hljs-comment"># [&#x27;ReaJason&#x27;, &#x27;Tom&#x27;, &#x27;Lucy&#x27;, &#x27;LiLy&#x27;, &#x27;Jack&#x27;]</span><br><br><span class="hljs-comment"># extend(iterable)，使用可迭代对象中的所有元素来扩展列表</span><br>name_list.extend([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br>print(name_list)  <span class="hljs-comment"># [&#x27;ReaJason&#x27;, &#x27;Tom&#x27;, &#x27;Lucy&#x27;, &#x27;LiLy&#x27;, 1, 2, 3, 4, 5]</span><br><br><span class="hljs-comment"># insert(i,x)，在指定i索引位置插入元素x、</span><br>name_list.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Dazzling&quot;</span>)<br>print(name_list)  <span class="hljs-comment"># [&#x27;ReaJason&#x27;, &#x27;Dazzling&#x27;, &#x27;Tom&#x27;, &#x27;Lucy&#x27;, &#x27;LiLy&#x27;]</span><br><br><br><span class="hljs-comment"># del，删除目标元素或变量</span><br><span class="hljs-keyword">del</span> name_list[<span class="hljs-number">0</span>]<br>print(name_list)  <span class="hljs-comment"># [&#x27;Tom&#x27;, &#x27;Lucy&#x27;, &#x27;LiLy&#x27;]</span><br><span class="hljs-keyword">del</span> name_list<br>print(name_list)  <span class="hljs-comment"># NameError: name &#x27;name_list&#x27; is not defined</span><br><br><span class="hljs-comment"># pop()，pop(i)，删除列表最后一个元素，删除列表指定i索引位置的元素</span><br>x = name_list.pop()<br>y = name_list.pop(<span class="hljs-number">0</span>)<br>print(x)  <span class="hljs-comment"># LiLy</span><br>print(y)  <span class="hljs-comment"># ReaJason</span><br>print(name_list)  <span class="hljs-comment"># [&#x27;Tom&#x27;, &#x27;Lucy&#x27;]</span><br><br><span class="hljs-comment"># remove(x)，移除列表中从左到右第一个值为x的元素</span><br>name_list.remove(<span class="hljs-string">&quot;Tom&quot;</span>)<br>print(name_list)  <span class="hljs-comment"># [&#x27;ReaJason&#x27;, &#x27;Lucy&#x27;, &#x27;LiLy&#x27;]</span><br><br><span class="hljs-comment"># clear()，清空列表</span><br>name_list.clear()<br>print(name_list)  <span class="hljs-comment"># []</span><br><br><span class="hljs-comment"># copy()，返回列表的一个浅拷贝</span><br>name_list2 = name_list.copy()<br>name_list2.append(<span class="hljs-string">&quot;Dazzling&quot;</span>)<br>print(name_list)  <span class="hljs-comment"># [&#x27;ReaJason&#x27;, &#x27;Tom&#x27;, &#x27;Lucy&#x27;, &#x27;LiLy&#x27;]</span><br>print(name_list2)  <span class="hljs-comment"># [&#x27;ReaJason&#x27;, &#x27;Tom&#x27;, &#x27;Lucy&#x27;, &#x27;LiLy&#x27;, &#x27;Dazzling&#x27;]</span><br></code></pre></div></td></tr></table></figure><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># range(start, stop[, step])，range 构造器的参数必须为整数，用来生成序列</span><br>print(list(range(<span class="hljs-number">10</span>)))  <span class="hljs-comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br>print(list(range(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>)))  <span class="hljs-comment"># [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</span><br>print(list(range(<span class="hljs-number">0</span>)))  <span class="hljs-comment"># []</span><br><br><span class="hljs-comment"># 列表推导式，返回一个列表</span><br>list1 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>)]<br>print(list1)  <span class="hljs-comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br>print(list(range(<span class="hljs-number">10</span>)))  <span class="hljs-comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><br><span class="hljs-comment"># 带 if 的列表推导式，如果 i 为偶数，则选择</span><br>list1 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>]<br>print(list1)  <span class="hljs-comment"># [0, 2, 4, 6, 8]</span><br><br><span class="hljs-comment"># 多个 for 循环实现列表推导式，将多层次列表展开</span><br>arr = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]<br>list1 = [j <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i]<br>print(list1)  <span class="hljs-comment"># [1, 2, 3, 4, 5, 6]</span><br></code></pre></div></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><ul><li>用 <code>（）</code> 组合复合类型（不限定只能一种类型）</li><li>使用一对圆括号来表示空元组: <code>()</code></li><li>使用一个后缀的逗号来表示单元组: <code>a,</code> 或 <code>(a,)</code></li><li>使用以逗号分隔的多个项: <code>a, b, c</code> or <code>(a, b, c)</code></li><li>元素数据不可修改，有序</li><li>索引切片和 list 一样</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">tuple1 = (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-number">13.14</span>, <span class="hljs-literal">True</span>, <span class="hljs-number">1</span> + <span class="hljs-number">1j</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;ReaJason&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h4 id="常用函数-2"><a href="#常用函数-2" class="headerlink" title="常用函数"></a>常用函数</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># tuple()，强制转换成元组</span><br>print(tuple(<span class="hljs-string">&#x27;12345678&#x27;</span>))  <span class="hljs-comment"># (&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;)</span><br><br><span class="hljs-comment"># len()，获取列表元素个数</span><br>print(len(tuple1))  <span class="hljs-comment"># 7</span><br><br><span class="hljs-comment"># count(x)，返回元素 x 在列表中出现的次数</span><br>num_tuple = (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>print(num_tuple.count(<span class="hljs-number">1</span>))  <span class="hljs-comment"># 2</span><br>print(num_tuple.count(<span class="hljs-number">2</span>))  <span class="hljs-comment"># 1</span><br><br><span class="hljs-comment"># index(x[, start[, end]])，返回列表中第一个值为 x 的元素的索引，如果不存在会抛出 ValueError 异常</span><br>print(num_tuple.index(<span class="hljs-number">1</span>))  <span class="hljs-comment"># 2</span><br>print(num_tuple.index(<span class="hljs-number">6</span>))  <span class="hljs-comment"># ValueError: tuple.index(x): x not in tuple</span><br></code></pre></div></td></tr></table></figure><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><ul><li>符号为：<code>&#123;&#125;</code></li><li>数据以键值对形式出现</li><li>各个键值对之间用逗号隔开</li><li>字典是无序的对象集合，使用键-值（key-value）存储，拥有极快的查询速度</li><li>字典是可变类型，键（key）必须使用不可变类型</li><li>同一个字典中，键（key）必须是唯一的</li></ul><h4 id="字典创建"><a href="#字典创建" class="headerlink" title="字典创建"></a>字典创建</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 使用 &#123;key1: value1, key1: value1&#125;的形式 创建字典</span><br>dict1 = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">22</span>, <span class="hljs-string">&quot;gender&quot;</span>: <span class="hljs-string">&quot;female&quot;</span>&#125;<br><br><span class="hljs-comment"># 使用dict构造器创建</span><br>dict2 = dict(name=<span class="hljs-string">&quot;ReaJason&quot;</span>, age=<span class="hljs-number">22</span>, gender=<span class="hljs-string">&quot;female&quot;</span>)<br><br><span class="hljs-comment"># 创建空字典</span><br>dict3 = &#123;&#125;<br>dict4 = dict()<br></code></pre></div></td></tr></table></figure><h4 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">22</span>, <span class="hljs-string">&quot;gender&quot;</span>: <span class="hljs-string">&quot;female&quot;</span>&#125;<br><br><span class="hljs-comment"># 增，d[key] = value</span><br>dict1[<span class="hljs-string">&#x27;id&#x27;</span>] = <span class="hljs-number">10</span><br>print(dict1)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;ReaJason&#x27;, &#x27;age&#x27;: 22, &#x27;gender&#x27;: &#x27;female&#x27;, &#x27;id&#x27;: 10&#125;</span><br><br><span class="hljs-comment"># 改，d[key] = value</span><br>dict1[<span class="hljs-string">&#x27;age&#x27;</span>] = <span class="hljs-number">18</span><br>print(dict1)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;ReaJason&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;female&#x27;&#125;</span><br><br><span class="hljs-comment"># 删，del d[val]，将 d[key] 从 d 中移除。 如果映射中不存在 key 则会引发 KeyError</span><br><span class="hljs-keyword">del</span> dict1[<span class="hljs-string">&#x27;name&#x27;</span>]<br>print(dict1)  <span class="hljs-comment"># &#123;&#x27;age&#x27;: 22, &#x27;gender&#x27;: &#x27;female&#x27;&#125;</span><br><br><span class="hljs-comment"># clear()，移除字典中的所有元素</span><br>dict1.clear()<br>print(dict1)  <span class="hljs-comment"># &#123;&#125;</span><br><br><span class="hljs-comment"># 查，d[key]，返回 d 中以 key 为键的项。 如果映射中不存在 key 则会引发 KeyError</span><br>print(dict1[<span class="hljs-string">&#x27;name&#x27;</span>])  <span class="hljs-comment"># ReaJason</span><br>print(dict1[<span class="hljs-string">&#x27;id&#x27;</span>])  <span class="hljs-comment"># KeyError: &#x27;id&#x27;</span><br><br><span class="hljs-comment"># get(key[, default])，如果 key 存在于字典中则返回 key 的值，否则返回 default。 如果 default 未给出则默认为 None，因而此方法绝不会引发 KeyError</span><br>print(dict1.get(<span class="hljs-string">&#x27;name&#x27;</span>))  <span class="hljs-comment"># ReaJason</span><br>print(dict1.get(<span class="hljs-string">&#x27;id&#x27;</span>))  <span class="hljs-comment"># None</span><br>print(dict1.get(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment"># 1</span><br></code></pre></div></td></tr></table></figure><h4 id="常用函数-3"><a href="#常用函数-3" class="headerlink" title="常用函数"></a>常用函数</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">22</span>, <span class="hljs-string">&quot;gender&quot;</span>: <span class="hljs-string">&quot;female&quot;</span>&#125;<br><br><span class="hljs-comment"># len(d)，返回字典 d 中的项数</span><br>print(len(dict1))  <span class="hljs-comment"># 3</span><br><br><span class="hljs-comment"># key in d，如果 d 中存在键 key 则返回 True，否则返回 False</span><br>print(<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-keyword">in</span> dict1)  <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># key not in d，如果 d 中不存在键 key 则返回 True，否则返回 False</span><br>print(<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> dict1)  <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># keys()，返回由字典键组成的一个新视图，类似于字典所有键组成的列表</span><br>print(dict1.keys())  <span class="hljs-comment"># dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;gender&#x27;])</span><br><br><span class="hljs-comment"># values()，返回由字典值组成的一个新视图，类似于字典所有值组成的列表</span><br>print(dict1.values())  <span class="hljs-comment"># dict_values([&#x27;ReaJason&#x27;, 22, &#x27;female&#x27;])</span><br><br><span class="hljs-comment"># items()，返回由字典项 ((键, 值) 对) 组成的一个新视图</span><br>print(dict1.items())  <span class="hljs-comment"># dict_items([(&#x27;name&#x27;, &#x27;ReaJason&#x27;), (&#x27;age&#x27;, 22), (&#x27;gender&#x27;, &#x27;female&#x27;)])</span><br><br><span class="hljs-comment"># 字典遍历，获取 key 和 value</span><br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> dict1.items():<br>    print(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;key&#125;</span>：<span class="hljs-subst">&#123;value&#125;</span>&quot;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">name：ReaJason</span><br><span class="hljs-string">age：22</span><br><span class="hljs-string">gender：female</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># update([other])，使用来自 other 的键/值对更新字典，覆盖原有的键，原地更新</span><br>dict2 = &#123;<span class="hljs-string">&quot;hobby&quot;</span>: <span class="hljs-string">&quot;learning&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>&#125;<br>dict1.update(dict2)<br>print(dict1)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;ReaJason&#x27;, &#x27;age&#x27;: 22, &#x27;gender&#x27;: &#x27;female&#x27;, &#x27;hobby&#x27;: &#x27;learning&#x27;, &#x27;id&#x27;: 1&#125;</span><br><br>dict3 = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Dazzling&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&quot;gender&quot;</span>: <span class="hljs-string">&quot;male&quot;</span>&#125;<br>dict1.update(dict3)<br>print(dict1)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;Dazzling&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;male&#x27;&#125;</span><br></code></pre></div></td></tr></table></figure><h4 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 字典推导式用于快速生成字典，以及提取目标数据</span><br>cookies = <span class="hljs-string">&quot;anonymid=jy0ui55o-u6f6zd; depovince=GW; _r01_=1;&quot;</span><br>cookies = &#123;cookie.split(<span class="hljs-string">&quot;=&quot;</span>)[<span class="hljs-number">0</span>]:cookie.split(<span class="hljs-string">&quot;=&quot;</span>)[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> cookie <span class="hljs-keyword">in</span> cookies.split(<span class="hljs-string">&quot;; &quot;</span>)&#125;<br>print(cookies)  <span class="hljs-comment"># &#123;&#x27;anonymid&#x27;: &#x27;jy0ui55o-u6f6zd&#x27;, &#x27;depovince&#x27;: &#x27;GW&#x27;, &#x27;_r01_&#x27;: &#x27;1;&#x27;&#125;</span><br><br><span class="hljs-comment"># 其他用法同列表推导式</span><br></code></pre></div></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul><li>多个元素的无序组合，集合是无序的，不支持索引操作</li><li>集合元素是唯一的，可用于去重</li></ul><h4 id="集合创建"><a href="#集合创建" class="headerlink" title="集合创建"></a>集合创建</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 使用 &#123;value1, value2&#125;</span><br>set1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br><span class="hljs-comment"># 使用set()方法</span><br>set2 = set([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br><br><span class="hljs-comment"># 创建空集合</span><br>set3 = set()<br></code></pre></div></td></tr></table></figure><h4 id="增删改查-1"><a href="#增删改查-1" class="headerlink" title="增删改查"></a>增删改查</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">set1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>&#125;<br><br><span class="hljs-comment"># add(elem)，将元素 elem 添加到集合中</span><br>set1.add(<span class="hljs-number">30</span>)<br>set1.add(<span class="hljs-number">10</span>)<br>print(set1)  <span class="hljs-comment"># &#123;10, 20, 30&#125;</span><br><br><span class="hljs-comment"># update(*others)，更新集合，添加来自 others 中的所有元素</span><br>list1 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>]<br>set1.update(list1)<br>print(set1)  <span class="hljs-comment"># &#123;40, 10, 50, 20, 30&#125;</span><br><br><span class="hljs-comment"># remove(elem)，从集合中移除元素 elem。 如果 elem 不存在于集合中则会引发 KeyError</span><br>set1.remove(<span class="hljs-number">10</span>)<br>print(set1)  <span class="hljs-comment"># &#123;20&#125;</span><br>set1.remove(<span class="hljs-number">10</span>)  <span class="hljs-comment"># KeyError: 10</span><br><br><span class="hljs-comment"># discard(elem)，如果元素 elem 存在于集合中则将其移除</span><br>set1.discard(<span class="hljs-number">10</span>)<br>print(set1)  <span class="hljs-comment"># &#123;20&#125;</span><br>set1.discard(<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># pop()，从集合中移除并返回任意一个元素。 如果集合为空则会引发 KeyError</span><br>set1.pop()<br>set1.pop()<br>print(set1)  <span class="hljs-comment"># set()</span><br>set1.pop()  <span class="hljs-comment"># KeyError: &#x27;pop from an empty set&#x27;</span><br><br><span class="hljs-comment"># x in s，检测 x 是否为 s 中的成员</span><br>print(<span class="hljs-number">10</span> <span class="hljs-keyword">in</span> set1)  <span class="hljs-comment"># True</span><br>print(<span class="hljs-number">100</span> <span class="hljs-keyword">in</span> set1)  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># x not in s，检测 x 是否非 s 中的成员</span><br>print(<span class="hljs-number">10</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> set1)  <span class="hljs-comment"># False</span><br>print(<span class="hljs-number">100</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> set1)  <span class="hljs-comment"># True</span><br></code></pre></div></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>将一段具有独立功能的代码块整合到一个整体并命名。在需要的地方调用，实现更高效的代码复用</li><li>函数定义参数可有可无，返回值也一样，函数必须先定义后使用</li><li>函数设计要尽量短小，嵌套层次不宜过深</li><li>函数申明应该做到合理、简单、易于使用</li><li>函数参数设计应考虑向下兼容</li><li>一个函数只做一件事，尽量保证函数语句粒度的一致性</li></ul><h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 使用 def 定义函数，return 返回需要返回的值（非必需）</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> 函数名(<span class="hljs-params">参数<span class="hljs-number">1</span>（可选）, 参数<span class="hljs-number">2</span>（可选）</span>):</span><br>    函数内代码<br>    ......<br>    <span class="hljs-keyword">return</span> 返回值（可选）<br><br><span class="hljs-comment"># 定义一个实现加法的函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">a_add_b</span>(<span class="hljs-params">a, b</span>):</span><br>    <span class="hljs-keyword">return</span> a + b<br><br><br>result = a_add_b(<span class="hljs-number">10</span>, <span class="hljs-number">90</span>)<br>print(result)  <span class="hljs-comment"># 100</span><br></code></pre></div></td></tr></table></figure><h4 id="说明文档"><a href="#说明文档" class="headerlink" title="说明文档"></a>说明文档</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">a_add_b</span>(<span class="hljs-params">a, b</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    我是a_add_b的说明文档：一个实现加法的函数</span><br><span class="hljs-string">    :param a: 参数 1</span><br><span class="hljs-string">    :param b: 参数 2</span><br><span class="hljs-string">    :return: 返回值</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> a + b<br><br><span class="hljs-comment"># help(函数名称)，查看函数的说明文档</span><br>help(a_add_b)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Help on function a_add_b in module __main__:</span><br><span class="hljs-string"></span><br><span class="hljs-string">a_add_b(a, b)</span><br><span class="hljs-string">    一个实现加法的函数</span><br><span class="hljs-string">    :param a: 参数 1</span><br><span class="hljs-string">    :param b: 参数 2</span><br><span class="hljs-string">    :return: 返回值</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><ul><li>局部变量，定义在函数内部，作用范围为该函数内</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>():</span><br>    a = <span class="hljs-number">100</span><br>    print(a)<br><br>test()  <span class="hljs-comment"># 100</span><br>print(a)  <span class="hljs-comment"># NameError: name &#x27;a&#x27; is not defined</span><br></code></pre></div></td></tr></table></figure><ul><li>全局变量，定义在全局，当前 py 文件内都可访问到</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">a = <span class="hljs-number">100</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>():</span><br>    print(a)<br><br>test()  <span class="hljs-comment"># 100</span><br>print(a)  <span class="hljs-comment"># 100</span><br></code></pre></div></td></tr></table></figure><ul><li>global()，可被用来表明特定变量生存于全局作用域并且应当在其中被重新绑定</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">a = <span class="hljs-number">100</span><br><br>print(<span class="hljs-string">f&quot;全局变量a：<span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)  <span class="hljs-comment"># 全局变量a：100</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test1</span>():</span><br>    a = <span class="hljs-number">200</span>  <span class="hljs-comment"># 局部变量，</span><br>    print(<span class="hljs-string">f&quot;test1函数的a：<span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test2</span>():</span><br>    <span class="hljs-keyword">global</span> a  <span class="hljs-comment"># 修改全局变量</span><br>    a = <span class="hljs-number">300</span><br>    print(<span class="hljs-string">f&quot;test2函数的a：<span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)<br><br>test1()  <span class="hljs-comment"># test1函数的a：200</span><br>test2()  <span class="hljs-comment"># test2函数的a：300</span><br>print(<span class="hljs-string">f&quot;全局变量a：<span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)  <span class="hljs-comment"># 全局变量a：300</span><br></code></pre></div></td></tr></table></figure><ul><li>nonlocal()，表明特定变量生存于外层作用域中并且应当在其中被重新绑定</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>():</span><br>    a = <span class="hljs-number">200</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test1</span>():</span><br>        print(<span class="hljs-string">f&quot;test1函数的a：<span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)<br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test2</span>():</span><br>        <span class="hljs-keyword">nonlocal</span> a  <span class="hljs-comment"># 修改局部变量</span><br>        print(<span class="hljs-string">f&quot;test2函数的a：<span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)<br>        a = <span class="hljs-number">100</span><br>        print(<span class="hljs-string">f&quot;test1函数的a：<span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)<br>    test1()<br>    test2()<br><br>test()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">test1函数的a：200</span><br><span class="hljs-string">test2函数的a：200</span><br><span class="hljs-string">test1函数的a：100</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h4><ul><li>位置参数</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 位置参数与形参一一对应</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">user_info</span>(<span class="hljs-params">name, age, gender</span>):</span><br>    print(<span class="hljs-string">f&quot;name：<span class="hljs-subst">&#123;name&#125;</span>，age：<span class="hljs-subst">&#123;age&#125;</span>，gender：<span class="hljs-subst">&#123;gender&#125;</span>&quot;</span>)<br><br><br>user_info(<span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;female&quot;</span>)  <span class="hljs-comment"># name：ReaJason，age：18，gender：female</span><br>user_info(<span class="hljs-number">18</span>, <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-string">&quot;ReaJason&quot;</span>)  <span class="hljs-comment"># name：18，age：female，gender：ReaJason</span><br></code></pre></div></td></tr></table></figure><ul><li>关键字参数</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 当函数调用时既有位置参数也有关键字参数时，关键字参数必须写在最后</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">user_info</span>(<span class="hljs-params">name, age, gender</span>):</span><br>    print(<span class="hljs-string">f&quot;name：<span class="hljs-subst">&#123;name&#125;</span>，age：<span class="hljs-subst">&#123;age&#125;</span>，gender：<span class="hljs-subst">&#123;gender&#125;</span>&quot;</span>)<br><br><br>user_info(name=<span class="hljs-string">&quot;ReaJason&quot;</span>, age=<span class="hljs-number">18</span>, gender=<span class="hljs-string">&quot;female&quot;</span>)  <span class="hljs-comment"># name：ReaJason，age：18，gender：female</span><br>user_info(age=<span class="hljs-number">18</span>, gender=<span class="hljs-string">&quot;female&quot;</span>, name=<span class="hljs-string">&quot;ReaJason&quot;</span>)  <span class="hljs-comment"># name：ReaJason，age：18，gender：female</span><br>user_info(<span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-number">18</span>, gender=<span class="hljs-string">&quot;female&quot;</span>)  <span class="hljs-comment"># name：ReaJason，age：18，gender：female</span><br>user_info(name=<span class="hljs-string">&quot;ReaJason&quot;</span>, age=<span class="hljs-number">18</span>, <span class="hljs-string">&quot;female&quot;</span>)  <span class="hljs-comment"># SyntaxError: positional argument follows keyword argument</span><br></code></pre></div></td></tr></table></figure><ul><li>默认参数</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 所有位置参数必须在默认参数之前</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">user_info</span>(<span class="hljs-params">name, age, gender=<span class="hljs-string">&quot;female&quot;</span></span>):</span><br>    print(<span class="hljs-string">f&quot;name：<span class="hljs-subst">&#123;name&#125;</span>，age：<span class="hljs-subst">&#123;age&#125;</span>，gender：<span class="hljs-subst">&#123;gender&#125;</span>&quot;</span>)<br><br><br>user_info(<span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-number">18</span>)  <span class="hljs-comment"># name：ReaJason，age：18，gender：female</span><br>user_info(<span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;male&quot;</span>)  <span class="hljs-comment"># name：ReaJason，age：18，gender：male</span><br></code></pre></div></td></tr></table></figure><ul><li>可变长参数</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># *args，传进去的所有参数都会被 args 变量收集，根据参数位置合并为一个元组</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">user_info</span>(<span class="hljs-params">*args</span>):</span><br>    print(args)<br><br><br>user_info(<span class="hljs-string">&quot;ReaJason&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;female&quot;</span>, [<span class="hljs-string">&quot;learning&quot;</span>, <span class="hljs-string">&quot;gaming&quot;</span>])<br><span class="hljs-comment"># (&#x27;ReaJason&#x27;, 18, &#x27;female&#x27;, [&#x27;learning&#x27;, &#x27;gaming&#x27;])</span><br><br><span class="hljs-comment"># **kwargs，传进去的所有参数都会被 kwargs 变量收集，将关键字参数做为 key 后面的值作为 value 合并为一个一个字典</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">user_info</span>(<span class="hljs-params">**kwargs</span>):</span><br>    print(kwargs)<br><br><br>user_info(name=<span class="hljs-string">&quot;ReaJason&quot;</span>, age=<span class="hljs-number">18</span>, gender=<span class="hljs-string">&quot;female&quot;</span>, hobby=[<span class="hljs-string">&quot;learning&quot;</span>, <span class="hljs-string">&quot;gaming&quot;</span>])<br><span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;ReaJason&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;female&#x27;, &#x27;hobby&#x27;: [&#x27;learning&#x27;, &#x27;gaming&#x27;]&#125;</span><br><br><span class="hljs-comment"># 当位置参数，默认参数，与可变长参数在同一个函数定义中，相对位置为 位置参数 &gt; 默认参数 &gt; 可变长参数</span><br></code></pre></div></td></tr></table></figure><h4 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 定义匿名函数</span><br>a_add_b = <span class="hljs-keyword">lambda</span> a, b: a+b<br>print(a_add_b(<span class="hljs-number">10</span>, <span class="hljs-number">90</span>))  <span class="hljs-comment"># 100</span><br><br><span class="hljs-comment"># 用于列表排序，选定 key</span><br><br></code></pre></div></td></tr></table></figure><h4 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 求一个序列或者多个序列进行函数映射之后的值，列表推导得方式更好</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> x ** <span class="hljs-number">2</span><br><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>list2 = [i ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list1]  <span class="hljs-comment"># 推荐方式</span><br>result1 = map(func, list1)<br>result2 = map(<span class="hljs-keyword">lambda</span> x: x ** <span class="hljs-number">2</span>, list1)<br>print(result1)  <span class="hljs-comment"># &lt;map object at 0x00000177FD39D848&gt;</span><br>print(list(result1))  <span class="hljs-comment"># [1, 4, 9, 16, 25]</span><br>print(list(result2))  <span class="hljs-comment"># [1, 4, 9, 16, 25]</span><br>print(list2)  <span class="hljs-comment"># [1, 4, 9, 16, 25]</span><br></code></pre></div></td></tr></table></figure><h4 id="reduce函数"><a href="#reduce函数" class="headerlink" title="reduce函数"></a>reduce函数</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 对一个序列进行压缩运算，得到一个值</span><br><span class="hljs-keyword">import</span> functools  <span class="hljs-comment"># import 导入模块</span><br><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br>result = functools.reduce(<span class="hljs-keyword">lambda</span> x, y: x + y, list1)<br>print(result)<br></code></pre></div></td></tr></table></figure><h4 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 过滤掉序列中不符合函数条件的元素，列表推导得方式更好</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span><br><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br>list2 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list1 <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]  <span class="hljs-comment"># 推荐方式</span><br>result1 = filter(func, list1)<br>result2 = filter(<span class="hljs-keyword">lambda</span> x: x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, list1)<br>print(result1)  <span class="hljs-comment"># &lt;filter object at 0x000001D589779048&gt;</span><br>print(list(result1))  <span class="hljs-comment"># [2, 4, 6]</span><br>print(list(result2))  <span class="hljs-comment"># [2, 4, 6]</span><br>print(list2)  <span class="hljs-comment"># [2, 4, 6]</span><br></code></pre></div></td></tr></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="文件的读"><a href="#文件的读" class="headerlink" title="文件的读"></a>文件的读</h4><ul><li>关于文件读四个模式</li><li><code>r</code>，以只读的方式打开文件，未找到文件会报错，文件的指针将会放在文件的开头，这是默认模式，<code>r</code> 打开文本文件</li><li><code>rb</code>，以二进制格式打开一个文件用于只读。文件指针放在文件的开头。这是默认模式，<code>rb</code> 打开非文本文件</li><li><code>r+</code>，打开一个文件用于读写，准确来说是读并且追加。文件指针将会放在文件的开头</li><li><code>rb+</code>，以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># f.read(size)，读取文件指定 size 大小字节的数据，每执行一次往后移动指定位数，如果未指定 size，则读取文件所有数据</span><br><span class="hljs-comment"># text.txt 文本内容如下：</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">hello world</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>f = open(<span class="hljs-string">&quot;text.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>content = f.read(<span class="hljs-number">5</span>)<br>print(content)  <span class="hljs-comment"># hello</span><br>content = f.read(<span class="hljs-number">6</span>)<br>print(content)  <span class="hljs-comment">#  world</span><br>f.close()<br><br>f = open(<span class="hljs-string">&quot;text.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>content = f.read()<br>print(content)  <span class="hljs-comment"># hello world</span><br>f.close()<br><br><span class="hljs-comment"># f.readlines()，以列表的形式读取文件中的所有行</span><br><span class="hljs-comment"># text.txt 文本内容如下：</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">hello world</span><br><span class="hljs-string">hello python</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>f = open(<span class="hljs-string">&quot;text.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>content = f.readlines()<br>print(content)  <span class="hljs-comment"># [&#x27;hello world\n&#x27;, &#x27;hello python&#x27;]</span><br>f.close()<br><br><span class="hljs-comment"># f.readline()，从文件中读取一行，换行符（\n）留在字符串的末尾，中间空白行是 \n </span><br><span class="hljs-comment"># text.txt 文本内容如下：</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">hello world</span><br><span class="hljs-string"></span><br><span class="hljs-string">hello python</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>f = open(<span class="hljs-string">&quot;text.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>content = f.readline()<br>print(<span class="hljs-string">f&quot;第一行<span class="hljs-subst">&#123;content!r&#125;</span>&quot;</span>)  <span class="hljs-comment"># 第一行&#x27;hello world\n&#x27;</span><br>content = f.readline()<br>print(<span class="hljs-string">f&quot;第二行<span class="hljs-subst">&#123;content!r&#125;</span>&quot;</span>)  <span class="hljs-comment"># 第二行&#x27;\n&#x27;</span><br>content = f.readline()<br>print(<span class="hljs-string">f&quot;第三行<span class="hljs-subst">&#123;content!r&#125;</span>&quot;</span>)  <span class="hljs-comment"># 第三行&#x27;hello python&#x27;</span><br>content = f.readline()<br>print(<span class="hljs-string">f&quot;第四行<span class="hljs-subst">&#123;content!r&#125;</span>&quot;</span>)  <span class="hljs-comment"># 第四行&#x27;&#x27;，此时文件一共三行，已读完，并不报错，输出空白字符</span><br>f.close()<br></code></pre></div></td></tr></table></figure><h4 id="文件的写"><a href="#文件的写" class="headerlink" title="文件的写"></a>文件的写</h4><ul><li>关于文件写四个模式</li><li><code>w</code>，打开一个文件只用于写入。如果文件已存在则先清空后写入，如果没有文件则创建文件</li><li><code>wb</code>，以二进制格式打开一个文件只用于写入。</li><li><code>w+</code>，打开一个文件用于读写，巴拉巴拉</li><li><code>wb+</code>，以二进制格式打开一个文件用于读写，巴拉巴拉</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># f.write(string) 会把 string 的内容写入到文件中，并返回写入的字符数</span><br>f = open(<span class="hljs-string">&quot;text1.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>f.write(<span class="hljs-string">&quot;hello world&quot;</span>)  <span class="hljs-comment"># 将字符串写入文件中</span><br>f.close()<br><br><span class="hljs-comment"># text1.txt 文本内容：</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">hello world</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="文件的追加"><a href="#文件的追加" class="headerlink" title="文件的追加"></a>文件的追加</h4><ul><li>关于文件写四个模式</li><li><code>a</code>，打开一个文件用于追加。如果文件存在，新内容将写在文件已有内容之后。文件不存在则创建新文件进行写入。</li><li><code>ab</code>，<code>a+</code>，<code>ab+</code></li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">f = open(<span class="hljs-string">&quot;text2.txt&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>, mode=<span class="hljs-string">&quot;a&quot;</span>)<br>f.write(<span class="hljs-string">&quot;我是第一句&quot;</span>)<br>f.close()<br><br><span class="hljs-comment"># text1.txt 文本内容：</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">我是第一句</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># f.tell() 返回一个整数，给出文件对象在文件中的当前位置，表示为二进制模式下时从文件开始的字节数，以及文本模式下的意义不明的数字</span><br><span class="hljs-comment"># text.txt 文本内容：</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">hello world</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>f = open(<span class="hljs-string">&quot;text.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>print(f.tell())  <span class="hljs-comment"># 0</span><br>content = f.read(<span class="hljs-number">5</span>)<br>print(content)  <span class="hljs-comment"># hello</span><br>print(f.tell())  <span class="hljs-comment"># 5</span><br>f.close()<br><br><span class="hljs-comment"># f.seek(offset, whence)，通过向一个参考点添加 offset 来计算位置；参考点由 whence 参数指定。 whence 的 0 值表示从文件开头起算，1 表示使用当前文件位置，2 表示使用文件末尾作为参考点</span><br>f = open(<span class="hljs-string">&quot;text.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>print(f.tell())  <span class="hljs-comment"># 0</span><br>f.seek(<span class="hljs-number">6</span>)<br>content = f.read()<br>print(content)  <span class="hljs-comment"># world</span><br>print(f.tell())  <span class="hljs-comment"># 11</span><br>f.close()<br></code></pre></div></td></tr></table></figure><h4 id="with"><a href="#with" class="headerlink" title="with"></a>with</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># with open(filename, mode, encoding) as f，打开文件不再需要 f.close，with 会自动处理</span><br><span class="hljs-comment"># 不设置读写模式，默认为 r 模式打开文件</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">&quot;text.txt&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> result:<br>    print(result.read())<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">hello world</span><br><span class="hljs-string"></span><br><span class="hljs-string">hello python</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></div></td></tr></table></figure><h2 id="Python-类与对象"><a href="#Python-类与对象" class="headerlink" title="Python 类与对象"></a>Python 类与对象</h2><ol><li>类是对一系列具有相同<strong>特征</strong>和<strong>行为</strong>的事物的统称，是一个抽象概念，特征即属性，行为即方法</li><li>对象是类的一个实例，先有类，后有对象</li><li>类名遵循大驼峰命名如：<code>HelloWorld</code></li><li>属性和方法可以在类中指定也可以动态添加</li><li>面向对象的三个特点：封装、继承、多态</li></ol><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">class 类名:</span><br><span class="hljs-string">    代码</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># self 指的是调用该函数的对象</span><br><span class="hljs-comment"># 定义一个动物类，拥有 name 属性，eat 方法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>:</span><br>    name = <span class="hljs-literal">None</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eat</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> 正在吃...&quot;</span>)<br><br><span class="hljs-comment"># 实例化一个动物：猫，获取属性通过 对象名.属性名</span><br>cat = Animal()  <span class="hljs-comment"># 获得一个 Animal 的实例，拥有 name 属性，和 eat 方法</span><br>cat.name = <span class="hljs-string">&quot;猫&quot;</span>  <span class="hljs-comment"># 指定 cat 的 name 属性的值为猫</span><br>print(cat.name)  <span class="hljs-comment"># 获取 cat 的 name 属性的值 # 猫</span><br>cat.eat()  <span class="hljs-comment"># 调用 cat 的 eat 方法</span><br><span class="hljs-comment">#  猫 正在吃...</span><br></code></pre></div></td></tr></table></figure><h3 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h3><h4 id="init-方法"><a href="#init-方法" class="headerlink" title="init 方法"></a>init 方法</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># __init__ 为初始化方法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>        self.name = name<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eat</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> 正在吃...&quot;</span>)<br><br><br>cat = Animal(<span class="hljs-string">&quot;猫&quot;</span>)  <span class="hljs-comment"># 传入 name 参数，用于初始化一个猫的实例</span><br>print(cat)  <span class="hljs-comment"># &lt;__main__.Animal object at 0x0000028581CED688&gt;</span><br>cat.eat()  <span class="hljs-comment"># 猫 正在吃...</span><br></code></pre></div></td></tr></table></figure><h4 id="str-方法"><a href="#str-方法" class="headerlink" title="str 方法"></a>str 方法</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 当 print 对象的时候，默认打印的是对象的内存地址，定义 __str__ 方法，再次打印对象则输出的是 __str__ 方法的返回值</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>        self.name = name<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;这是一只<span class="hljs-subst">&#123;self.name&#125;</span>&quot;</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eat</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> 正在吃...&quot;</span>)<br>    <br>    <br><br>dog = Animal(<span class="hljs-string">&quot;狗&quot;</span>)  <span class="hljs-comment"># 传入 name 参数，用于初始化一个狗的实例</span><br>print(dog)  <span class="hljs-comment"># 这是一只狗</span><br>dog.eat()  <span class="hljs-comment"># 狗 正在吃...</span><br></code></pre></div></td></tr></table></figure><h4 id="del-方法"><a href="#del-方法" class="headerlink" title="del 方法"></a>del 方法</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 当删除对象的时候，python 解释器会默认调用 __del__ 方法（析构方法）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>:</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>        self.name = name<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;这是一只<span class="hljs-subst">&#123;self.name&#125;</span>&quot;</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eat</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> 正在吃...&quot;</span>)<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__del__</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> 死了&quot;</span>)<br>    <br><br>dog = Animal(<span class="hljs-string">&quot;狗&quot;</span>)  <span class="hljs-comment"># 传入 name 参数，用于初始化一个狗的实例</span><br>print(dog)  <span class="hljs-comment"># 这是一只狗</span><br>dog.eat()  <span class="hljs-comment"># 狗 正在吃...</span><br><span class="hljs-comment">#  狗 死了  # 程序结束，对象删除，所以调用了__del__方法，系统收回内存</span><br></code></pre></div></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ol><li>所有类默认继承 object 类 </li><li>子类继承父类的所有属性和方法</li><li>子类可以重写父类方法</li><li>多继承，一个子类可以有多个父类</li></ol><h4 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.num = <span class="hljs-number">1</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_num</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">f&quot;我的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>(<span class="hljs-params">A</span>):</span><br>    <span class="hljs-keyword">pass</span>  <span class="hljs-comment"># pass用来代码占位，没有任何实际意义</span><br><br><br>b = B()  <span class="hljs-comment"># 创建 B 类的一个实例对象</span><br>print(b.num)  <span class="hljs-comment"># 1 # 打印 b 实例的 num 属性的值，找不到去父类找</span><br>b.print_num()  <span class="hljs-comment"># 我的数字是：1 # 调用 b 实例的 print_num 方法，找不到去父类找</span><br></code></pre></div></td></tr></table></figure><h4 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.num = <span class="hljs-number">1</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_num</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">f&quot;A的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>(<span class="hljs-params">A</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_num</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">f&quot;B的数字是：2&quot;</span>)<br><br><br>b = B()<br>b.print_num()  <span class="hljs-comment"># B的数字是：2</span><br></code></pre></div></td></tr></table></figure><h4 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.num = <span class="hljs-number">1</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_num</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">f&quot;A的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.num = <span class="hljs-number">2</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_num</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">f&quot;B的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>(<span class="hljs-params">B, A</span>):</span><br>    <span class="hljs-keyword">pass</span><br>    <br><br><br>c = C()  <span class="hljs-comment"># 创建 C 类的一个实例对象</span><br>print(c.num)  <span class="hljs-comment"># 2 # 打印 c 实例的 num 属性的值，找不到去父类找</span><br>c.print_num()  <span class="hljs-comment"># B的数字是：2 # 调用 c 实例的 print_num 方法，找不到去父类找</span><br><br><span class="hljs-comment"># __mro__()方法获取继承顺序，即子类未找到属性或方法向上查找父类的顺序</span><br>print(C.__mro__)  <br><span class="hljs-comment"># (&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span><br><span class="hljs-comment"># 如打印顺序可知，C 找不到的话，找 B，再 A，最后 object类</span><br></code></pre></div></td></tr></table></figure><h4 id="多层继承"><a href="#多层继承" class="headerlink" title="多层继承"></a>多层继承</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.num = <span class="hljs-number">1</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_num</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">f&quot;A的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.num = <span class="hljs-number">2</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_num</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">f&quot;B的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>(<span class="hljs-params">B, A</span>):</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span>(<span class="hljs-params">C</span>):</span><br>    <span class="hljs-keyword">pass</span><br><br><br>d = D()<br>d.print_num()  <span class="hljs-comment"># B的数字是：2</span><br>print(D.__mro__)<br><span class="hljs-comment"># (&lt;class &#x27;__main__.D&#x27;&gt;, &lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span><br></code></pre></div></td></tr></table></figure><h4 id="super"><a href="#super" class="headerlink" title="super()"></a>super()</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 子类调用父类的方法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.num = <span class="hljs-number">1</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_num</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">f&quot;A的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>(<span class="hljs-params">A</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_num</span>(<span class="hljs-params">self</span>):</span><br>        super(B, self).print_num()  <span class="hljs-comment"># A的数字是：1</span><br>        print(<span class="hljs-string">f&quot;B的数字是：2&quot;</span>)<br><br><br>b = B()<br>b.print_num()  <span class="hljs-comment"># B的数字是：2</span><br></code></pre></div></td></tr></table></figure><h4 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 设置属性和方法，不继承给子类，在属性和方法名前加 __（双下划钱）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.num = <span class="hljs-number">1</span><br>        self.__score = <span class="hljs-number">100</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_num</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">f&quot;A的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>(<span class="hljs-params">A</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        super(B, self).__init__()  <span class="hljs-comment"># 继承A类的初始化方法</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_num</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">f&quot;B的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br><br>b = B()<br>print(b.num)  <span class="hljs-comment"># 1</span><br>print(b.__score)  <span class="hljs-comment"># AttributeError: &#x27;B&#x27; object has no attribute &#x27;__score&#x27;</span><br><br><br><span class="hljs-comment"># 修改私有属性，get，set</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.num = <span class="hljs-number">1</span><br>        self.__score = <span class="hljs-number">100</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_num</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">f&quot;A的数字是：<span class="hljs-subst">&#123;self.num&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_score</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.__score<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_score</span>(<span class="hljs-params">self, score</span>):</span><br>        self.__score = score<br><br>a = A()<br><span class="hljs-comment"># print(a.__score)</span><br>print(a.get_score())  <span class="hljs-comment"># 100</span><br>a.set_score(<span class="hljs-number">1000</span>)<br>print(a.get_score())  <span class="hljs-comment"># 1000</span><br></code></pre></div></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ol><li>多态是指一类事物有多种形态</li><li>子类重写父类方法，调用不同子类对象的相同父类方法，可以产生不同的执行结果</li></ol><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>:</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">work</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">&quot;动物在叫，人坏掉&quot;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span>(<span class="hljs-params">Animal</span>):</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">work</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">&quot;猫在叫，人坏掉&quot;</span>)<br>    <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>(<span class="hljs-params">Animal</span>):</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">work</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">&quot;狗在叫，人坏掉&quot;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">work_with_pet</span>(<span class="hljs-params">self, cls</span>):</span><br>        cls.work()<br><br><br>cat = Cat()<br>dog = Dog()<br>person = Person()<br>person.work_with_pet(cat)  <span class="hljs-comment"># 猫在叫，人坏掉</span><br>person.work_with_pet(dog)  <span class="hljs-comment"># 狗在叫，人坏掉</span><br></code></pre></div></td></tr></table></figure><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><ul><li>当方法中需要使用类对象（如访问私有类属性等），定义类方法</li><li>类方法一般和类属性配合使用</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># @classmethod，第一个参数必须是类对象，一般为 cls</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>:</span><br>    __name = <span class="hljs-string">&quot;动物&quot;</span><br>    <br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_name</span>(<span class="hljs-params">cls</span>):</span><br>        <span class="hljs-keyword">return</span> cls.__name<br><br><br>a = Animal()<br>print(a.get_name())  <span class="hljs-comment"># 动物</span><br></code></pre></div></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><ul><li>静态方法既不需要传递类对象也不需要传入实例对象</li><li>静态方法也能够通过实例对象和类对象去访问</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># @staticmethod</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>:</span><br>    <br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eat</span>():</span><br>        print(<span class="hljs-string">&quot;吃就完事了&quot;</span>)<br><br>a = Animal()<br>a.eat()  <span class="hljs-comment"># 吃就完事了</span><br></code></pre></div></td></tr></table></figure><h2 id="Python-错误和异常"><a href="#Python-错误和异常" class="headerlink" title="Python 错误和异常"></a>Python 错误和异常</h2><h3 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h3><p>语法错误又称解析错误，可能是你在学习Python 时最容易遇到的错误</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 符号或者缩进语法错误等等</span><br></code></pre></div></td></tr></table></figure><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>即使语句或表达式在语法上是正确的，但在尝试执行时，它仍可能会引发错误。 在执行时检测到的错误被称为 异常，异常不一定会导致严重后果。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    可能出现异常的代码<br><span class="hljs-keyword">except</span> 异常类型:<br>    出现异常之后执行的代码<br><br><span class="hljs-comment"># r 模式打开文件，文件不存在会抛出异常</span><br><span class="hljs-keyword">try</span>:<br>    f = open(<span class="hljs-string">&quot;text.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-keyword">except</span>:<br>    f = open(<span class="hljs-string">&quot;text.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br></code></pre></div></td></tr></table></figure><h4 id="捕获指定异常"><a href="#捕获指定异常" class="headerlink" title="捕获指定异常"></a>捕获指定异常</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    print(<span class="hljs-string">&quot;12345&quot;</span>)<br>    f = open(<span class="hljs-string">&quot;123.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)  <span class="hljs-comment"># 只读模式打开，未找到文件，抛出异常</span><br>    print(<span class="hljs-string">&quot;1111&quot;</span>)  <span class="hljs-comment"># 上面异常，下面代码将不再执行</span><br>    print(num)    <span class="hljs-comment"># 未定义 num，会抛出 NameError 异常错误信息</span><br><span class="hljs-keyword">except</span> (NameError, IOError) <span class="hljs-keyword">as</span> result: <span class="hljs-comment"># 将错误信息赋值给result</span><br>    print(<span class="hljs-string">&quot;产生错误了&quot;</span>)<br>    print(result)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">12345</span><br><span class="hljs-string">产生错误了</span><br><span class="hljs-string">[Errno 2] No such file or directory: &#x27;123.txt&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="捕获所有异常"><a href="#捕获所有异常" class="headerlink" title="捕获所有异常"></a>捕获所有异常</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    print(<span class="hljs-string">&quot;12345&quot;</span>)<br>    f = open(<span class="hljs-string">&quot;123.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>    print(<span class="hljs-string">&quot;1111&quot;</span>)<br>    print(num)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> result: <span class="hljs-comment"># 将错误信息赋值给result</span><br>    print(<span class="hljs-string">&quot;产生错误了&quot;</span>)<br>    print(result)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">12345</span><br><span class="hljs-string">产生错误了</span><br><span class="hljs-string">[Errno 2] No such file or directory: &#x27;123.txt&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="else-语句"><a href="#else-语句" class="headerlink" title="else 语句"></a>else 语句</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 没有异常发生执行的代码，用 else 语句</span><br></code></pre></div></td></tr></table></figure><h4 id="finally-语句"><a href="#finally-语句" class="headerlink" title="finally 语句"></a>finally 语句</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 无论异常是否发生，一定都会执行的代码，用 finally 语句，常用于资源的清理</span><br></code></pre></div></td></tr></table></figure><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PhoneNumError</span>(<span class="hljs-params">Exception</span>):</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, phone</span>):</span><br>        self.phone = phone<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.phone&#125;</span>，手机位数错误，应为11位&quot;</span><br><br><br><span class="hljs-keyword">try</span>:<br>    phone_num = <span class="hljs-string">&quot;1029321212&quot;</span><br>    <span class="hljs-keyword">if</span> len(phone_num) &lt; <span class="hljs-number">11</span>:<br>        <span class="hljs-keyword">raise</span> PhoneNumError(phone_num)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    print(e)  <span class="hljs-comment"># 1029321212，手机位数错误，应为11位</span><br></code></pre></div></td></tr></table></figure><h2 id="Python-模块与包"><a href="#Python-模块与包" class="headerlink" title="Python 模块与包"></a>Python 模块与包</h2><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>模块是一个包含Python定义和语句的文件。文件名就是模块名后跟文件后缀 <code>.py</code></p><p>自定义模块名尽量不要与已有模块同名</p><h4 id="模块的导入"><a href="#模块的导入" class="headerlink" title="模块的导入"></a>模块的导入</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> 模块名<br><span class="hljs-keyword">import</span> 模块名<span class="hljs-number">1</span>,模块名<span class="hljs-number">2</span>       <span class="hljs-comment"># （不推荐）</span><br><span class="hljs-keyword">from</span> 模块名 <span class="hljs-keyword">import</span> 模块内函数<br><span class="hljs-keyword">from</span> 模块名 <span class="hljs-keyword">import</span> *        <span class="hljs-comment"># （不推荐）</span><br><span class="hljs-keyword">import</span> 模块名 <span class="hljs-keyword">as</span> 别名<br><span class="hljs-keyword">from</span> 模块名 <span class="hljs-keyword">import</span> 模块内函数 <span class="hljs-keyword">as</span> 别名<br></code></pre></div></td></tr></table></figure><h4 id="模块搜索顺序"><a href="#模块搜索顺序" class="headerlink" title="模块搜索顺序"></a>模块搜索顺序</h4><ol><li>当前目录</li><li>python 环境变量默认目录下</li><li>python 默认路径</li></ol><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># __all__，设置可导出的函数</span><br><span class="hljs-comment"># 当导出模块后，只能使用__all__ 列表中的函数</span><br></code></pre></div></td></tr></table></figure><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>包是一种通过用“带点号的模块名”来构造 Python 模块命名空间的方法，将有联系的模块组织到一个文件夹，且含有 <code>__init__</code> 文件</p><h4 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> 包名.模块名<br><span class="hljs-keyword">from</span> 包名 <span class="hljs-keyword">import</span> 模块名<br><span class="hljs-comment"># 必须在__init__文件中，添加__all__ = []，控制允许导入的模块列表</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux学习笔记</title>
    <link href="/2021/01/18/LinuxLearning/"/>
    <url>/2021/01/18/LinuxLearning/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Linux 运维学习，跟着视频教程走走流程，学习了解一下 Linux</p>          </div> <a id="more"></a><h2 id="学习环境"><a href="#学习环境" class="headerlink" title="学习环境"></a>学习环境</h2><ol><li><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.0.0-16894299.exe">VMware-workstation-full-16.0.0-16894299.exe</a></li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/centos/7/isos/x86_64/CentOS-7-x86_64-Everything-2009.iso">CentOS-7-x86_64-Everything-2009.iso</a></li><li><a href="https://cloud.189.cn/t/U7vURjZfmiMr">Xftp-7.0.0054p.exe</a></li><li><a href="https://cloud.189.cn/t/bqIfei3eeyui">Xshell-7.0.0054p.exe</a></li><li><a href="https://www.bilibili.com/video/BV12E411K79p">马哥Linux高端运维顶级云计算就业课程网络班37期</a></li></ol><h3 id="Xshell-连接-Centos7"><a href="#Xshell-连接-Centos7" class="headerlink" title="Xshell 连接 Centos7"></a>Xshell 连接 Centos7</h3><p>首先在 Linux 虚拟机打开终端，查看 ip 以及将防火墙关闭</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 1、查看系统是否监听于tcp协议的22号端口</span><br>ss -tnl<br><br><span class="hljs-comment"># 2、查看ip地址</span><br>ifconfig<br><span class="hljs-comment"># ifconfig command not found，则安装net-tools</span><br>yum install net-tools<br><span class="hljs-comment"># ip addr list同样可以查看ip地址</span><br>ip addr list<br><br><span class="hljs-comment"># 3、确保防火墙处于关闭状态</span><br>iptables -L -n<br>systemctl <span class="hljs-built_in">disable</span> firewalld.service<br>systemctl stop firewalld.service<br></code></pre></div></td></tr></table></figure><p>然后打开 xshell 连接 Linux 虚拟机</p><h2 id="Linux系统了解"><a href="#Linux系统了解" class="headerlink" title="Linux系统了解"></a>Linux系统了解</h2><h3 id="终端设备：terminal"><a href="#终端设备：terminal" class="headerlink" title="终端设备：terminal"></a>终端设备：terminal</h3><ul><li>物理终端，也称控制台：console</li><li>虚拟终端：tty</li><li>图形终端</li><li>串行终端：ttyS</li><li>伪终端：pty</li></ul><h3 id="命令行接口：CLI"><a href="#命令行接口：CLI" class="headerlink" title="命令行接口：CLI"></a>命令行接口：CLI</h3><p><code>[root@localhost ~]# </code></p><ul><li>root：当前用户名称</li><li>localhost：当前主机名</li><li>~：用户当前所在目录（current directory），也称工作目录（working directory）</li><li>#：命令提示符，# 为管理员账号，$ 为普通用户</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看终端设备</span><br>tty<br><br><span class="hljs-comment"># 查看接口程序</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$SHELL</span><br></code></pre></div></td></tr></table></figure><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p><code>/dev/pts/0</code></p><ul><li>最左侧 / 表示根目录</li><li>其余 / 表示为文件分隔符，Linux 文件分隔符为 / ，Windows 文件分隔符为 \ </li><li>文件名支持使用除 / 以外的任意字符，最长不能超过 255 个字符</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 获取文件路径的基名basename</span><br>basename /etc/sysconfig/network-scripts/ifcfg-ens33<br>ifcfg-ens33<br><br><span class="hljs-comment"># 获取文件路径的目录名dirname</span><br>dirname /etc/sysconfig/network-scripts/ifcfg-ens33<br>/etc/sysconfig/network-scripts<br></code></pre></div></td></tr></table></figure><h2 id="Linux基础知识"><a href="#Linux基础知识" class="headerlink" title="Linux基础知识"></a>Linux基础知识</h2><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><p>语法通用格式：<code># COMMAND OPTIONS ARGUMENTS</code></p><h4 id="COMMAND"><a href="#COMMAND" class="headerlink" title="COMMAND"></a>COMMAND</h4><p>发起一个命令，请求内核将某个二进制程序运行为一个进程，命令本身就是一个可执行的程序文件，二进制格式的文件（ELF 格式），有可能调用共享库文件。命令分为两种，一种是由 shell 程序自带的命令，成为内置命令，另一种则是独立的可执行文件，文件名即为命令名，称为外部命令。shell 程序是独特的程序，负责解析用户提供的命令，查询通过环境变量，从左到右依次查看。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看文件信息</span><br>file /bin/ls<br><br><span class="hljs-comment"># 查看环境变量</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment"># 查看命令类型</span><br><span class="hljs-built_in">type</span> COMMAND<br></code></pre></div></td></tr></table></figure><h4 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h4><p>用来指定命令的运行特性，选项分为短选项和长选项两种，短选项如<code>-l</code> 、<code>-d</code>，有些命令选项没有<code>-</code> ，多数可合并，<code>-l -d</code>可合并为<code>-ld</code> ，长选项如<code>--help</code>，长选项不能合并，有些选项可以带参数称为选项参数。</p><h4 id="ARGUMENTS"><a href="#ARGUMENTS" class="headerlink" title="ARGUMENTS"></a>ARGUMENTS</h4><p>表示命令的作用对象，即命令对什么生效，多个命令参数之间以空白字符分隔，如<code>ls -ld /var /etc</code>。</p><h3 id="获取命令帮助"><a href="#获取命令帮助" class="headerlink" title="获取命令帮助"></a>获取命令帮助</h3><h4 id="内部命令"><a href="#内部命令" class="headerlink" title="内部命令"></a>内部命令</h4><p><code>help COMMAND</code></p><h4 id="外部命令"><a href="#外部命令" class="headerlink" title="外部命令"></a>外部命令</h4><ul><li>命令自带简要格式的使用帮助，<code>COMMAND --help</code></li><li>使用手册获取帮助，<code>man COMMAND</code>，使用手册位置：<code>/usr/share/man</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用各章节的命令不同</span><br>man1：用户命令；<br>man2：系统调用；<br>man3：C库调用；<br>man4：设备文件及特殊文件；<br>man5：文件格式；（配置文件格式）<br>man6：游戏使用帮助；<br>man7：杂项；<br>man8：管理工具及守护进行；<br><br><span class="hljs-comment"># 查看COMMAND在哪些手册出现过</span><br>whatis COMMAND<br><br><span class="hljs-comment"># 手动更新查询数据库</span><br>makewhatis<br></code></pre></div></td></tr></table></figure><ul><li>阅读手册快捷键<ul><li><code>空格</code>：先后翻一屏</li><li><code>b</code>：向前翻一屏</li><li><code>Ctrl+d</code>：向后翻半屏</li><li><code>Ctrl+u</code>：向前翻半屏</li><li><code>回车</code>：向后翻一行</li><li><code>k</code>：向前翻一行</li><li><code>G</code>：跳转至最后一行</li><li><code>g</code>：跳转到第一行</li><li><code>nG</code>：跳转至第n行</li><li><code>/keyword</code>：从前往后找，不区分大小写，<code>n</code>：往后翻</li><li><code>?keyword</code>：从后往前找，<code>n</code>：往前翻，<code>N</code>：往后翻</li><li><code>-M /PATH/TO/SOMEDIR</code>：到指定目录下查找命令手册并打开之</li><li><code>q</code>：退出手册</li></ul></li></ul><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># printing working directory</span><br>[root@localhost ~]<span class="hljs-comment"># pwd</span><br>/root<br></code></pre></div></td></tr></table></figure><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># change directory</span><br><br><span class="hljs-comment"># 切换回家目录，bash中，~表示家目录</span><br><span class="hljs-built_in">cd</span><br><span class="hljs-built_in">cd</span> ~<br><br><span class="hljs-comment"># 切换回上一次所在目录</span><br><span class="hljs-built_in">cd</span> -<br><br><span class="hljs-comment"># 相关环境变量，$PWD $OLDPWD，.代表当前目录，..代表上一级目录</span><br>[root@localhost ~]<span class="hljs-comment"># cd /etc/sysconfig</span><br>[root@localhost sysconfig]<span class="hljs-comment"># cd .</span><br>[root@localhost sysconfig]<span class="hljs-comment"># cd ..</span><br>[root@localhost etc]<span class="hljs-comment"># cd -</span><br>/etc/sysconfig<br></code></pre></div></td></tr></table></figure><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><p>文件详细属性：<code>drwxr-xr-x. 2 root   root      204 1月  18 11:20 anaconda</code></p><p><code>d</code>：表示文件类型，<code>-</code>，<code>d</code>，<code>b</code>，<code>c</code>，<code>l</code>，<code>s</code>，<code>p</code></p><p><code>rwxr-xr-x</code>：权限信息</p><p><code>rwx</code>：文件属主的权限</p><p><code>r-x</code>：文件数组的权限</p><p><code>r-x</code>：其他用户（非属主、属组）的权限</p><p><code>.</code>：表示该文件为隐藏文件</p><p><code>2</code>：数字表示文件被硬链接的次数</p><p><code>root</code>：文件的属主</p><p><code>root</code>：文件的属组</p><p><code>204 </code>：表示文件的大小，单位为字节</p><p><code>1月  18 11:20</code>：文件最近一次被修改的时间</p><p><code>anaconda</code>：文件名</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># list，列出指定目录下的内容，ls [OPTION]... [FILE]...</span><br><span class="hljs-comment"># -a：显示所有文件，包括隐藏文件；</span><br>[root@localhost ~]<span class="hljs-comment"># ls -a /var/log</span><br>.         boot.log-20210119  firewalld           rhsm      vmware-network.1.log    vmware-vmtoolsd-root.log<br>..        btmp               grubby_prune_debug  secure    vmware-network.2.log    wtmp<br>anaconda  chrony             lastlog             spooler   vmware-network.log      yum.log<br>audit     cron               maillog             tallylog  vmware-vgauthsvc.log.0<br>boot.log  dmesg              messages            tuned     vmware-vmsvc-root.log<br><br><span class="hljs-comment"># -A:显示除.和..之外的所有文件</span><br>[root@localhost ~]<span class="hljs-comment"># ls -A /var/log</span><br>anaconda           btmp    firewalld           messages  tallylog              vmware-network.log        wtmp<br>audit              chrony  grubby_prune_debug  rhsm      tuned                 vmware-vgauthsvc.log.0    yum.log<br>boot.log           cron    lastlog             secure    vmware-network.1.log  vmware-vmsvc-root.log<br>boot.log-20210119  dmesg   maillog             spooler   vmware-network.2.log  vmware-vmtoolsd-root.log<br><br><span class="hljs-comment"># -l,--long：长格式列表，即显示文件的详细属性</span><br>[root@localhost ~]<span class="hljs-comment"># ls -l /var/log</span><br>总用量 1040<br>drwxr-xr-x. 2 root   root      204 1月  18 11:20 anaconda<br>drwx------. 2 root   root       23 1月  18 11:21 audit<br>-rw-------. 1 root   root        0 1月  19 17:46 boot.log<br><br><br><span class="hljs-comment"># -h,--human-readable：对文件大小单位进行换算显示，换算之后并不精确</span><br>[root@localhost ~]<span class="hljs-comment"># ls -lh /var/log</span><br>总用量 1.1M<br>drwxr-xr-x. 2 root   root    204 1月  18 11:20 anaconda<br>drwx------. 2 root   root     23 1月  18 11:21 audit<br>-rw-------. 1 root   root      0 1月  19 17:46 boot.log<br><br><br><span class="hljs-comment"># -d：查看目录自身而非其内部的文件列表，通常与l连用</span><br>[root@localhost ~]<span class="hljs-comment"># ls -ld /var/log</span><br>drwxr-xr-x. 7 root root 4096 1月  19 17:46 /var/<span class="hljs-built_in">log</span><br><br><span class="hljs-comment"># -r：revrese，逆序显示</span><br><span class="hljs-comment"># -R：recursive，递归显示</span><br></code></pre></div></td></tr></table></figure><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># cat concatenate，文本文件查看工具，[OPTION]... [FILE]...</span><br><span class="hljs-comment"># -n：显示文本行编号</span><br>[root@localhost ~]<span class="hljs-comment"># cat -n /etc/issue</span><br>     1\S<br>     2Kernel \r on an \m<br>     3<br><br><span class="hljs-comment"># -E：显示行结束符</span><br>[root@localhost ~]<span class="hljs-comment"># cat -E /etc/issue</span><br>\S$<br>Kernel \r on an \m$<br>$<br></code></pre></div></td></tr></table></figure><h4 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 与cat反过来，逆序打印文件内容</span><br><br>[root@localhost ~]<span class="hljs-comment"># cat /etc/passwd</span><br>root:x:0:0:root:/root:/bin/bash<br>bin:x:1:1:bin:/bin:/sbin/nologin<br>daemon:x:2:2:daemon:/sbin:/sbin/nologin<br>adm:x:3:4:adm:/var/adm:/sbin/nologin<br>lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br>sync:x:5:0:sync:/sbin:/bin/sync<br>shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown<br>halt:x:7:0:halt:/sbin:/sbin/halt<br>mail:x:8:12:mail:/var/spool/mail:/sbin/nologin<br>operator:x:11:0:operator:/root:/sbin/nologin<br>games:x:12:100:games:/usr/games:/sbin/nologin<br>ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin<br>nobody:x:99:99:Nobody:/:/sbin/nologin<br>systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin<br>dbus:x:81:81:System message bus:/:/sbin/nologin<br>polkitd:x:999:998:User <span class="hljs-keyword">for</span> polkitd:/:/sbin/nologin<br>sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin<br>postfix:x:89:89::/var/spool/postfix:/sbin/nologin<br>chrony:x:998:996::/var/lib/chrony:/sbin/nologin<br><br><br>[root@localhost ~]<span class="hljs-comment"># tac /etc/passwd</span><br>chrony:x:998:996::/var/lib/chrony:/sbin/nologin<br>postfix:x:89:89::/var/spool/postfix:/sbin/nologin<br>sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin<br>polkitd:x:999:998:User <span class="hljs-keyword">for</span> polkitd:/:/sbin/nologin<br>dbus:x:81:81:System message bus:/:/sbin/nologin<br>systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin<br>nobody:x:99:99:Nobody:/:/sbin/nologin<br>ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin<br>games:x:12:100:games:/usr/games:/sbin/nologin<br>operator:x:11:0:operator:/root:/sbin/nologin<br>mail:x:8:12:mail:/var/spool/mail:/sbin/nologin<br>halt:x:7:0:halt:/sbin:/sbin/halt<br>shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown<br>sync:x:5:0:sync:/sbin:/bin/sync<br>lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br>adm:x:3:4:adm:/var/adm:/sbin/nologin<br>daemon:x:2:2:daemon:/sbin:/sbin/nologin<br>bin:x:1:1:bin:/bin:/sbin/nologin<br>root:x:0:0:root:/root:/bin/bash<br></code></pre></div></td></tr></table></figure><h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看文件内容类型</span><br>[root@localhost ~]<span class="hljs-comment"># file /etc/fstab</span><br>/etc/fstab: ASCII text<br></code></pre></div></td></tr></table></figure><h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 回显</span><br>[root@localhost ~]<span class="hljs-comment"># echo &#x27;hello world&#x27;</span><br>hello world<br><br><span class="hljs-comment"># -n：不自动进行换行</span><br>[root@localhost ~]<span class="hljs-comment"># echo -n &#x27;hello world&#x27;</span><br>hello world[root@localhost ~]<span class="hljs-comment"># </span><br><br><span class="hljs-comment"># -e：让转义符生效</span><br>[root@localhost ~]<span class="hljs-comment"># echo -e &#x27;hello \n world&#x27;</span><br>hello <br> world<br><br><span class="hljs-comment"># 单引号：强引用，变量引用不执行替换</span><br>[root@localhost ~]<span class="hljs-comment"># echo &#x27;$SHELL&#x27;</span><br><span class="hljs-variable">$SHELL</span><br><br><span class="hljs-comment"># 双引号：弱引用，变量引用会被替换</span><br>[root@localhost ~]<span class="hljs-comment"># echo &quot;$SHELL&quot;</span><br>/bin/bash<br><br><span class="hljs-comment"># 变量引用的正规符号：$&#123;name&#125;</span><br>[root@localhost ~]<span class="hljs-comment"># echo $&#123;SHELL&#125;</span><br>/bin/bash<br></code></pre></div></td></tr></table></figure><h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 关机或重启命令，shutdown [OPTIONS...] [TIME] [WALL...]</span><br><br><span class="hljs-comment"># OPTIONS: -h：关机，-r：重启，-c：取消操作</span><br><span class="hljs-comment"># TIME：now，hh:mm，+m</span><br><span class="hljs-comment"># WALL：即为广播发送的消息</span><br><br><span class="hljs-comment"># 5分钟后重启</span><br>[root@localhost ~]<span class="hljs-comment"># shutdown -r +5</span><br>Shutdown scheduled <span class="hljs-keyword">for</span> 二 2021-01-19 22:26:29 CST, use <span class="hljs-string">&#x27;shutdown -c&#x27;</span> to cancel.<br>[root@localhost ~]<span class="hljs-comment"># </span><br>Broadcast message from root@localhost.localdomain (Tue 2021-01-19 22:21:29 CST):<br><br>The system is going down <span class="hljs-keyword">for</span> reboot at Tue 2021-01-19 22:26:29 CST!<br><br><span class="hljs-comment"># 取消计划重启操作</span><br>[root@localhost ~]<span class="hljs-comment"># shutdown -c</span><br><br>Broadcast message from root@localhost.localdomain (Tue 2021-01-19 22:22:04 CST):<br><br>The system shutdown has been cancelled at Tue 2021-01-19 22:23:04 CST!<br><br><span class="hljs-comment"># 广播&quot;Hello Everyone，I wanna reboot at 10m later&quot;，并设置10分钟后重启</span><br>[root@localhost ~]<span class="hljs-comment"># shutdown -r +10 &quot;Hello Everyone，I wanna reboot at 10m later&quot;</span><br>Shutdown scheduled <span class="hljs-keyword">for</span> 二 2021-01-19 22:33:31 CST, use <span class="hljs-string">&#x27;shutdown -c&#x27;</span> to cancel.<br>[root@localhost ~]<span class="hljs-comment"># </span><br>Broadcast message from root@localhost.localdomain (Tue 2021-01-19 22:23:31 CST):<br><br>Hello Everyone，I wanna reboot at 10m later<br>The system is going down <span class="hljs-keyword">for</span> reboot at Tue 2021-01-19 22:33:31 CST!<br><br><span class="hljs-comment"># 关机</span><br>[root@localhost ~]<span class="hljs-comment"># shutdown -h now</span><br>Connection closing...Socket close.<br><br>Connection closed by foreign host.<br><br>Disconnected from remote host(centos7) at 22:24:19.<br><br></code></pre></div></td></tr></table></figure><h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 显示系统时间，date [OPTION]... [+FORMAT]</span><br><span class="hljs-comment"># 设置系统时间，date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]</span><br><br><span class="hljs-comment"># 显示当前时间</span><br>[root@localhost ~]<span class="hljs-comment"># date</span><br>2021年 01月 22日 星期五 13:35:27 CST<br><br><span class="hljs-comment"># 时间格式输出</span><br>[root@localhost ~]<span class="hljs-comment"># date +&quot;%Y-%m-%d %H:%M:%S&quot;</span><br>2021-01-22 13:43:32<br>[root@localhost ~]<span class="hljs-comment"># date +%F</span><br>2021-01-22<br>[root@localhost ~]<span class="hljs-comment"># date +%T</span><br>13:37:57<br>[root@localhost ~]<span class="hljs-comment"># date +&quot;%F %T&quot;</span><br>2021-01-22 13:38:57<br>[root@localhost ~]<span class="hljs-comment"># date +%s</span><br>1611294293<br></code></pre></div></td></tr></table></figure><h4 id="clock，hwclock"><a href="#clock，hwclock" class="headerlink" title="clock，hwclock"></a>clock，hwclock</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 显示或设置硬件时钟</span><br><span class="hljs-comment"># -s，--hctosys，将系统时间改为硬件时间</span><br><span class="hljs-comment"># -w，--systohc，将硬件时间改为系统时间</span><br></code></pre></div></td></tr></table></figure><h4 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 日历</span><br><span class="hljs-comment"># cal [options] [[[day] month] year]</span><br>[root@localhost ~]<span class="hljs-comment"># cal 1 2021</span><br>      一月 2021     <br>日 一 二 三 四 五 六<br>                1  2<br> 3  4  5  6  7  8  9<br>10 11 12 13 14 15 16<br>17 18 19 20 21 22 23<br>24 25 26 27 28 29 30<br>31<br><br>[root@localhost ~]<span class="hljs-comment"># cal 2021</span><br>                               2021                               <br><br>        一月                   二月                   三月        <br>日 一 二 三 四 五 六   日 一 二 三 四 五 六   日 一 二 三 四 五 六<br>                1  2       1  2  3  4  5  6       1  2  3  4  5  6<br> 3  4  5  6  7  8  9    7  8  9 10 11 12 13    7  8  9 10 11 12 13<br>10 11 12 13 14 15 16   14 15 16 17 18 19 20   14 15 16 17 18 19 20<br>17 18 19 20 21 22 23   21 22 23 24 25 26 27   21 22 23 24 25 26 27<br>24 25 26 27 28 29 30   28                     28 29 30 31<br>31<br>        四月                   五月                   六月        <br>日 一 二 三 四 五 六   日 一 二 三 四 五 六   日 一 二 三 四 五 六<br>             1  2  3                      1          1  2  3  4  5<br> 4  5  6  7  8  9 10    2  3  4  5  6  7  8    6  7  8  9 10 11 12<br>11 12 13 14 15 16 17    9 10 11 12 13 14 15   13 14 15 16 17 18 19<br>18 19 20 21 22 23 24   16 17 18 19 20 21 22   20 21 22 23 24 25 26<br>25 26 27 28 29 30      23 24 25 26 27 28 29   27 28 29 30<br>                       30 31<br>        七月                   八月                   九月        <br>日 一 二 三 四 五 六   日 一 二 三 四 五 六   日 一 二 三 四 五 六<br>             1  2  3    1  2  3  4  5  6  7             1  2  3  4<br> 4  5  6  7  8  9 10    8  9 10 11 12 13 14    5  6  7  8  9 10 11<br>11 12 13 14 15 16 17   15 16 17 18 19 20 21   12 13 14 15 16 17 18<br>18 19 20 21 22 23 24   22 23 24 25 26 27 28   19 20 21 22 23 24 25<br>25 26 27 28 29 30 31   29 30 31               26 27 28 29 30<br><br>        十月                  十一月                 十二月       <br>日 一 二 三 四 五 六   日 一 二 三 四 五 六   日 一 二 三 四 五 六<br>                1  2       1  2  3  4  5  6             1  2  3  4<br> 3  4  5  6  7  8  9    7  8  9 10 11 12 13    5  6  7  8  9 10 11<br>10 11 12 13 14 15 16   14 15 16 17 18 19 20   12 13 14 15 16 17 18<br>17 18 19 20 21 22 23   21 22 23 24 25 26 27   19 20 21 22 23 24 25<br>24 25 26 27 28 29 30   28 29 30               26 27 28 29 30 31<br>31<br><br></code></pre></div></td></tr></table></figure><h4 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 若使用原命令可用 \COMMAND</span><br><span class="hljs-comment"># 获取所有可用别名的定义</span><br>[root@localhost ~]<span class="hljs-comment"># alias</span><br><span class="hljs-built_in">alias</span> cp=<span class="hljs-string">&#x27;cp -i&#x27;</span><br><span class="hljs-built_in">alias</span> egrep=<span class="hljs-string">&#x27;egrep --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> fgrep=<span class="hljs-string">&#x27;fgrep --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> grep=<span class="hljs-string">&#x27;grep --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> l.=<span class="hljs-string">&#x27;ls -d .* --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> ll=<span class="hljs-string">&#x27;ls -l --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> ls=<span class="hljs-string">&#x27;ls --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> mv=<span class="hljs-string">&#x27;mv -i&#x27;</span><br><span class="hljs-built_in">alias</span> rm=<span class="hljs-string">&#x27;rm -i&#x27;</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">which</span>=<span class="hljs-string">&#x27;alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde&#x27;</span><br><br><span class="hljs-comment"># 设置别名，alias NAME=COMMAND，只对当前 shell 进程有效</span><br><span class="hljs-built_in">alias</span> cls=clean<br><br><span class="hljs-comment"># 取消别名，unalias NAME</span><br><span class="hljs-built_in">unalias</span> cls<br></code></pre></div></td></tr></table></figure><h4 id="which"><a href="#which" class="headerlink" title="which"></a>which</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># shows the full path of (shell) commands</span><br>[root@localhost ~]<span class="hljs-comment"># which ls</span><br><span class="hljs-built_in">alias</span> ls=<span class="hljs-string">&#x27;ls --color=auto&#x27;</span><br>/usr/bin/ls<br><br><span class="hljs-comment"># 使用which原命令</span><br>[root@localhost ~]<span class="hljs-comment"># \which ls</span><br>/usr/bin/ls<br><br></code></pre></div></td></tr></table></figure><h4 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># locate the binary, source, and manual page files for a command</span><br>[root@localhost ~]<span class="hljs-comment"># whereis ls</span><br>ls: /usr/bin/ls /usr/share/man/man1/ls.1.gz<br><br><span class="hljs-comment"># -b，只查看二进制程序路径</span><br>[root@localhost ~]<span class="hljs-comment"># whereis -b ls</span><br>ls: /usr/bin/ls<br><br><span class="hljs-comment"># -m，只查看使用手册文件路径</span><br>[root@localhost ~]<span class="hljs-comment"># whereis -m ls</span><br>ls: /usr/share/man/man1/ls.1.gz<br></code></pre></div></td></tr></table></figure><h4 id="who"><a href="#who" class="headerlink" title="who"></a>who</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># show who is logged on</span><br>[root@localhost ~]<span class="hljs-comment"># who</span><br>root     tty1         2021-01-21 18:05<br>root     pts/0        2021-01-23 14:43 (192.168.1.105)<br>root     pts/1        2021-01-23 15:43 (192.168.1.105)<br><br><span class="hljs-comment"># -b，系统此次启动时间</span><br>[root@localhost ~]<span class="hljs-comment"># who -b</span><br>         系统引导 2021-01-21 18:04<br><br><span class="hljs-comment"># -r，运行级别</span><br>[root@localhost ~]<span class="hljs-comment"># who -r</span><br>         运行级别 3 2021-01-21 18:05<br></code></pre></div></td></tr></table></figure><h4 id="w"><a href="#w" class="headerlink" title="w"></a>w</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># Show who is logged on and what they are doing</span><br>[root@localhost ~]<span class="hljs-comment"># w</span><br> 16:18:47 up 18:58,  3 users,  load average: 0.05, 0.03, 0.05<br>USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT<br>root     tty1                      四18    1:35m  0.03s  0.03s -bash<br>root     pts/0    192.168.1.105    14:43    7.00s  0.06s  0.04s w<br>root     pts/1    192.168.1.105    15:43   23.00s  0.01s  0.00s less -s<br></code></pre></div></td></tr></table></figure><h3 id="根目录系统"><a href="#根目录系统" class="headerlink" title="根目录系统"></a>根目录系统</h3><h4 id="文件层级结构：FHS"><a href="#文件层级结构：FHS" class="headerlink" title="文件层级结构：FHS"></a>文件层级结构：FHS</h4><p><code>Filesystem Hierarchy Standard</code></p><ul><li><code>/bin</code> ：所有用户可用的基本命令程序文件</li><li><code>/sbin</code>：供系统管理使用的工具程序</li><li><code>/boot</code>：引导加载器必须用到的各静态文件</li><li><code>/dev</code>：存储特殊文件或设备文件</li><li><code>/etc</code>：系统程序的配置文件，只能为静态</li><li><code>/home</code>：普通用户家目录，一般为<code>/home/USERNAME</code></li><li><code>/root</code>：管理员家目录</li><li><code>/lib</code>：为系统启动或根文件系统上的应用程序（/bin，/sbin等）提供共享库，以及为内核提供内核模块<ul><li><code>./libc.so.*</code>：动态链接的C库</li><li><code>./ld*</code>：运行时链接器/加载器</li><li><code>./modules</code>：用于存储内核模块的目录</li></ul></li><li><code>/lib64</code>：64位系统特有的存放64位共享库的路径</li><li><code>/media</code>：便携式设备挂载点，cdrom, floppy等</li><li><code>/mnt</code>：其它文件系统的临时挂载点</li><li><code>/opt</code>：附加应用程序的安装位置（可选路径）</li><li><code>/srv</code>：当前主机为服务提供的数据</li><li><code>/tmp</code>：为产生临时文件的程序提供用于存储临时文件的目录，可供所有用户执行写入操作，有特殊权限</li><li><code>/usr</code>：<code>usr Hierarchy</code>，全局共享的只读数据路径<ul><li><code>./bin、./sbin</code></li><li><code>./lib、./lib64</code></li><li><code>./include</code>：C程序头文件</li><li><code>./share</code>：命令手册页和自带文档等架构特有的文件的存储位置</li><li><code>./local</code>：让系统管理员安装本地应用程序；也通常用于安装第三方程序</li><li><code>./X11R6</code>：X-Window 程序的安装位置</li><li><code>./src</code>：程序源码文件的存储位置</li></ul></li><li><code>/var</code>：存储发生变化的数据的目录<ul><li><code>./cache</code>：Application cache data</li><li><code>./lib</code>：Variable state information</li><li><code>./local</code>：Variable data for /usr/local</li><li><code>./lock</code>：Lock files</li><li><code>./log</code>：Log files and directories</li><li><code>./opt</code>：Variable data for /opt</li><li><code>./run</code>：Data relevant to running processes</li><li><code>./spool</code>：Application spool data</li><li><code>./tmp</code>：Temporary files preserved between system reboots    </li></ul></li><li><code>/proc</code>：基于内存的虚拟文件系统，用于为内核及进程存储其相关信息，它们多为内核参数，例如<code>net.ipv4.ip_forward</code>， 虚拟为<code>net/ipv4/ip_forward</code>，存储于<code>/proc/sys/</code>，因此其完整路径为<code>/proc/sys/net/ipv4/ip_forward</code></li><li><code>/sys</code>：sysfs 虚拟文件系统提供了一种比 proc 更为理想的访问内核数据的途径，其主要作用在于为管理 Linux 设备提供一种统一模型的的接口</li></ul><h4 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h4><ul><li><code>-</code>：常规文件 file</li><li><code>d</code>：directory，目录文件</li><li><code>b</code>：block device，块设备文件，支持以<code>block</code>为单位进行随机访问</li><li><code>c</code>：character device，字符设备文件<ul><li><code>major number</code>：主设备号，用于标识设备类型，进而确定要加载的驱动程序</li><li><code>minor number</code>：次设备号，用于标识同一类型中的不同设备</li></ul></li><li><code>symbolic link</code>：符号链接文件</li><li><code>pipe</code>：命名管道</li><li><code>socket</code>：套接字文件</li></ul><h3 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h3><h4 id="命令历史"><a href="#命令历史" class="headerlink" title="命令历史"></a>命令历史</h4><p>shell 进程会将其会话中保存此前用户提交执行过的命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># history</span><br>[root@localhost ~]<span class="hljs-comment"># history</span><br>    1  ll /dev<br>    2  ech <span class="hljs-variable">$SHELL</span><br>    3  <span class="hljs-built_in">echo</span> <span class="hljs-variable">$SHELL</span><br>    4  <span class="hljs-built_in">pwd</span><br>    5  <span class="hljs-built_in">history</span><br><br><span class="hljs-comment"># $HISTSIZE，shell 进程可保留的命令历史的条数</span><br>[root@localhost ~]<span class="hljs-comment"># echo $HISTSIZE</span><br>1000<br><br><span class="hljs-comment"># $HISTFILE，持久保存命令历史的文件</span><br>[root@localhost ~]<span class="hljs-comment"># echo $HISTFILE</span><br>/root/.bash_history<br><br><span class="hljs-comment"># -c，删除所有条目从而清空历史列表</span><br>[root@localhost ~]<span class="hljs-comment"># history -c</span><br>[root@localhost ~]<span class="hljs-comment"># history</span><br>    1  <span class="hljs-built_in">history</span><br><br><span class="hljs-comment"># -d offset，删除指定命令历史</span><br><span class="hljs-comment"># -r，从文件读取命令历史到历史列表中</span><br><span class="hljs-comment"># -w，把历史列表中的命令追加到历史文件中</span><br><span class="hljs-comment"># history n，显示最近 n 条命令</span><br><span class="hljs-comment"># !n，再一次执行历史列表中的第 n 条命令</span><br><span class="hljs-comment"># !!，再一次执行上一条命令</span><br><span class="hljs-comment"># !x，再一次执行命令历史列表中最近一个以 x 开头的命令</span><br><span class="hljs-comment"># esc + . ，调用上一条命令的最后一个参数</span><br><span class="hljs-comment"># !$，表示上一条命令的最后一个参数</span><br><span class="hljs-comment"># $HISTCONTROL，ignoredups：忽略重复性，ignorespace：忽略以空白字符开头的命令，ignoreboth：两者</span><br>[root@localhost ~]<span class="hljs-comment"># echo $HISTCONTROL</span><br>ignoredups<br></code></pre></div></td></tr></table></figure><h4 id="命令补全"><a href="#命令补全" class="headerlink" title="命令补全"></a>命令补全</h4><p>shell 程序在接收到命令用户执行命令的请求，分析完成之后，最左侧的字符串会被当成命令</p><p>命令查找机制：查找内部命令，根据 PATH 环境变量中设定的命令，自左而右逐个搜索目录下的文件名</p><p>输入给定的打头字符串，如果唯一标识命令按 <code>Tab</code>则自动补全，如果不唯一，则按两次 <code>Tab</code> 键能显示所有打头列表</p><h4 id="路径补全"><a href="#路径补全" class="headerlink" title="路径补全"></a>路径补全</h4><p> 根据给定的起始路径下，以对应路径下的打头字符串来逐一匹配起始路径下的每个文件，如果唯一标识按 <code>Tab</code>则自动补全，如果不唯一，则按两次 <code>Tab</code> 键能显示所有打头列表</p><h4 id="命令行展开"><a href="#命令行展开" class="headerlink" title="命令行展开"></a>命令行展开</h4><p><code>~</code>，自动展开位用户的家目录，或指定的用户的家目录，<code>&#123;&#125;</code>，可承载一个逗号分隔的路径列表，并能够将其展开位多个路径，如：<code>/tmp/&#123;a,b&#125;</code> 相当于 <code>/tmp/a /tmp/b</code></p><h4 id="命令行状态结果"><a href="#命令行状态结果" class="headerlink" title="命令行状态结果"></a>命令行状态结果</h4><p>bash 通过状态返回值来输出此结果，命令执行完成之后，其返回值保存于 bash 的特殊变量 <code>$?</code> 中，命令正确执行时，有的返回有命令返回值，不同命令，结果各不相同，<code>$COMMAND</code>，引用命令的执行结果</p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>强引用：<code>&#39;&#39;</code>，弱引用：<code>&quot;&quot;</code>，命令引用：``</p><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p><code>Ctrl+a</code>：跳转至命令行行首</p><p><code>Ctrl+e</code>：跳转至命令行行尾</p><p><code>Ctrl+u</code>：删除行首至光标所在处之间的所有字符</p><p><code>Ctrl+k</code>：删除光标所在处至行尾的所有字符</p><p><code>Ctrl+l</code>：清屏，相当于 <code>clear</code></p><h4 id="文件名通配"><a href="#文件名通配" class="headerlink" title="文件名通配"></a>文件名通配</h4><ul><li><code>*</code>：匹配任意长度的任意字符</li><li><code>?</code>：匹配任意单个字符</li><li><code>[]</code>：匹配指定范围内的任意单个字符<ul><li><code>[a-z]</code>，<code>[A-Z]</code>，<code> [0-9]</code>，<code>[a-z0-9]</code></li><li><code>[[:upper:]]</code>：所有大写字母</li><li><code>[[:lower:]]</code>：所有小写字母</li><li><code>[[:alpha:]]</code>：所有字母</li><li><code>[[:digit:]]</code>：所有数字</li><li><code>[[:alnum:]]</code>：所有的字母和数字</li><li><code>[[:space:]]</code>：所有空白字符</li><li><code>[[:punct:]]</code>：所有标点符号</li></ul></li><li><code>[^]</code>：匹配指定范围外的任意单个字符<ul><li><code>[^[:upper:]]</code>：匹配非大写字符</li><li><code>[^0-9]</code>：匹配非数字</li><li><code>[^[:alnum:]]</code>：匹配非字母和数字</li></ul></li></ul><h4 id="命令hash"><a href="#命令hash" class="headerlink" title="命令hash"></a>命令hash</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@study /]<span class="hljs-comment"># hash</span><br>命中    命令<br>   4    /usr/bin/chmod<br>   1    /usr/bin/cat<br>   4    /usr/bin/man<br>  10    /usr/bin/ls<br><br><span class="hljs-comment"># hash -d COMMAND 删除</span><br><span class="hljs-comment"># hash -r 清空</span><br></code></pre></div></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ul><li><p>将所有变量视作字符型，无需事先声明</p></li><li><p>本地变量：作用域仅为当前 shell 进程</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 变量赋值：name=value</span><br><span class="hljs-comment"># 变量引用：$&#123;variable&#125;，$variable</span><br><span class="hljs-comment"># 撤销变量 unset name</span><br></code></pre></div></td></tr></table></figure></li><li><p>环境变量：作用域为当前 shell 进程及其子进程</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 变量赋值</span><br><span class="hljs-comment"># export name=value</span><br><span class="hljs-comment"># name=value</span><br><span class="hljs-comment"># export name</span><br><span class="hljs-comment"># declare -x name=value</span><br><br><span class="hljs-comment"># 变量引用：$&#123;variable&#125;，$variable</span><br><span class="hljs-comment"># bash 内嵌了许多环境变量用于定义 bash 的工作环境</span><br><span class="hljs-comment"># export、declare -x、printenv、env，查看所有环境变量</span><br></code></pre></div></td></tr></table></figure></li><li><p>局部变量：作用域仅为某代码片段</p></li><li><p>位置参数变量：当执行脚本的 shell 进程传递的参数</p></li><li><p>特殊变量：shell 内置的有特殊功能的变量</p></li><li><p>只读变量</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 只读</span><br><span class="hljs-built_in">readonly</span> name<br><span class="hljs-built_in">declare</span> -r name<br></code></pre></div></td></tr></table></figure></li></ul><h4 id="多命令执行"><a href="#多命令执行" class="headerlink" title="多命令执行"></a>多命令执行</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">COMMAND1;COMMAND2;COMMAND3;......<br><br><span class="hljs-comment"># 当命令1失败则不再运行命令2</span><br>COMMAND1 &amp;&amp; COMMAND2<br><br><span class="hljs-comment"># 当命令1成功则不再运行命令2</span><br>COMMAND1 || COMMAND2<br></code></pre></div></td></tr></table></figure><h3 id="目录管理命令"><a href="#目录管理命令" class="headerlink" title="目录管理命令"></a>目录管理命令</h3><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 创建目录，mkdir [OPTION]... DIRECTORY...</span><br><span class="hljs-comment"># -p，自动按需创建父目录</span><br><span class="hljs-comment"># -v，verbose，显示详细过程</span><br><span class="hljs-comment"># -m MODE，创建目录时直接给定权限</span><br><br><span class="hljs-comment"># 创建/tmp/x/y/z，并显示创建详情</span><br>[root@localhost ~]<span class="hljs-comment"># mkdir -p -v /tmp/x/y/z</span><br>mkdir: 已创建目录 <span class="hljs-string">&quot;/tmp/x&quot;</span><br>mkdir: 已创建目录 <span class="hljs-string">&quot;/tmp/x/y&quot;</span><br>mkdir: 已创建目录 <span class="hljs-string">&quot;/tmp/x/y/z&quot;</span><br><br><span class="hljs-comment"># 利用bash命令行展开特性，一条语句创建/tmp/x/y1, /tmp/x/y2, /tmp/x/y1/a, /tmp/x/y1/b</span><br>[root@localhost ~]<span class="hljs-comment"># mkdir -p -v /tmp/x/&#123;y1/&#123;a,b&#125;,y2&#125;</span><br>mkdir: 已创建目录 <span class="hljs-string">&quot;/tmp/x/y1&quot;</span><br>mkdir: 已创建目录 <span class="hljs-string">&quot;/tmp/x/y1/a&quot;</span><br>mkdir: 已创建目录 <span class="hljs-string">&quot;/tmp/x/y1/b&quot;</span><br>mkdir: 已创建目录 <span class="hljs-string">&quot;/tmp/x/y2&quot;</span><br><br><span class="hljs-comment"># 利用bash命令行展开特性，一条语句创建a_c, a_d, b_c, b_d</span><br>[root@localhost ~]<span class="hljs-comment"># mkdir -pv &#123;a,b&#125;_&#123;c,d&#125;</span><br>mkdir: 已创建目录 <span class="hljs-string">&quot;a_c&quot;</span><br>mkdir: 已创建目录 <span class="hljs-string">&quot;a_d&quot;</span><br>mkdir: 已创建目录 <span class="hljs-string">&quot;b_c&quot;</span><br>mkdir: 已创建目录 <span class="hljs-string">&quot;b_d&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 只删除空文件目录，不常用，rmdir [OPTION]... DIRECTORY...</span><br><span class="hljs-comment"># -p，删除某目录之后，如果其父目录为空，则一并删除</span><br><span class="hljs-comment"># -v，显示详细过程</span><br><br><span class="hljs-comment"># 一并删除所有空目录 /tmp/x/y/z</span><br>[root@localhost ~]<span class="hljs-comment"># rmdir -pv /tmp/x/y/z</span><br>rmdir: 正在删除目录 <span class="hljs-string">&quot;/tmp/x/y/z&quot;</span><br>rmdir: 正在删除目录 <span class="hljs-string">&quot;/tmp/x/y&quot;</span><br>rmdir: 正在删除目录 <span class="hljs-string">&quot;/tmp/x&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 tree命令，yum install tree</span><br><span class="hljs-comment"># 显示目录层级结构，tree [options] [directory]</span><br><span class="hljs-comment"># -L，指定显示的层级</span><br></code></pre></div></td></tr></table></figure><h3 id="文本查看命令"><a href="#文本查看命令" class="headerlink" title="文本查看命令"></a>文本查看命令</h3><h4 id="cat-1"><a href="#cat-1" class="headerlink" title="cat"></a>cat</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 文件内容查看，-n显示行号，-E显示行尾结束符</span><br></code></pre></div></td></tr></table></figure><h4 id="tac-1"><a href="#tac-1" class="headerlink" title="tac"></a>tac</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 与 cat 相反，逆行序打印文本内容</span><br></code></pre></div></td></tr></table></figure><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 分屏查看，more FILE</span><br></code></pre></div></td></tr></table></figure><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 与 more 相反，less FILE</span><br></code></pre></div></td></tr></table></figure><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看文件的前 n 行，默认 10 行，head [options] FILE</span><br>[root@localhost ~]<span class="hljs-comment"># head -n 5 /etc/sysconfig/network-scripts/ifcfg-ens33 </span><br>TYPE=<span class="hljs-string">&quot;Ethernet&quot;</span><br>PROXY_METHOD=<span class="hljs-string">&quot;none&quot;</span><br>BROWSER_ONLY=<span class="hljs-string">&quot;no&quot;</span><br>BOOTPROTO=<span class="hljs-string">&quot;dhcp&quot;</span><br>DEFROUTE=<span class="hljs-string">&quot;yes&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看文件的后 n 行，tail [options] FILE</span><br>[root@localhost ~]<span class="hljs-comment"># tail -n 5 /etc/sysconfig/network-scripts/ifcfg-ens33 </span><br>IPV6_ADDR_GEN_MODE=<span class="hljs-string">&quot;stable-privacy&quot;</span><br>NAME=<span class="hljs-string">&quot;ens33&quot;</span><br>UUID=<span class="hljs-string">&quot;6ae13078-476b-45b6-a9d9-1fac0480b8a5&quot;</span><br>DEVICE=<span class="hljs-string">&quot;ens33&quot;</span><br>ONBOOT=<span class="hljs-string">&quot;yes&quot;</span><br><br><span class="hljs-comment"># -f，查看文件尾部内容结束后不退出，跟随显示新增的行，监控log</span><br></code></pre></div></td></tr></table></figure><h4 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># display file or file system status，stat FILE...</span><br>[root@localhost ~]<span class="hljs-comment"># stat /tmp/yum.log </span><br>  文件：<span class="hljs-string">&quot;/tmp/yum.log&quot;</span><br>  大小：0         块：0          IO 块：4096   普通空文件<br>设备：fd00h/64768dInode：67160137    硬链接：1<br>权限：(0600/-rw-------)  Uid：(    0/    root)   Gid：(    0/    root)<br>环境：system_u:object_r:initrc_tmp_t:s0<br>最近访问：2021-01-18 11:17:06.195300428 +0800<br>最近更改：2021-01-18 11:17:06.195300428 +0800<br>最近改动：2021-01-18 11:17:06.195300428 +0800<br>创建时间：-<br><br><span class="hljs-comment"># 最近访问：access time</span><br><span class="hljs-comment"># 最近更改：modify time</span><br><span class="hljs-comment"># 最近改动：change time</span><br></code></pre></div></td></tr></table></figure><h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># change file timestamps,touch [OPTION]... FILE...</span><br><span class="hljs-comment"># -c，指定的文件路径不存在时不予创建</span><br><span class="hljs-comment"># -a：仅修改access time</span><br><span class="hljs-comment"># -m：仅修改吗，modify time</span><br><span class="hljs-comment"># -t STAMP：指定时间戳，[[CC]YY]MMDDhhmm[.ss]</span><br></code></pre></div></td></tr></table></figure><h3 id="文件管理命令"><a href="#文件管理命令" class="headerlink" title="文件管理命令"></a>文件管理命令</h3><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># copy files and directories，</span><br><span class="hljs-comment"># 单源复制：cp [OPTION]... [-T] SOURCE DEST</span><br><span class="hljs-comment"># 多源复制：cp [OPTION]... SOURCE... DIRECTORY，cp [OPTION]... -t DIRECTORY SOURCE...</span><br><span class="hljs-comment"># -i：交互式复制，即覆盖之前提醒用户确认</span><br><span class="hljs-comment"># -f：强制覆盖目标文件</span><br><span class="hljs-comment"># -r：递归目录</span><br><span class="hljs-comment"># -d：复制符号链接本身，而非其指向的源文件</span><br><span class="hljs-comment"># -a：等价于 -dR --preserve=all，用于归档</span><br><span class="hljs-comment"># --perserve=...：指定保留对应属性，默认：mode,ownership,timestamps，额外：context, links, xattr, all</span><br></code></pre></div></td></tr></table></figure><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># move (rename) files</span><br><span class="hljs-comment"># mv [OPTION]... [-T] SOURCE DEST</span><br><span class="hljs-comment"># mv [OPTION]... SOURCE... DIRECTORY</span><br><span class="hljs-comment"># mv [OPTION]... -t DIRECTORY SOURCE...</span><br><span class="hljs-comment"># -i：交互式复制，即覆盖之前提醒用户确认</span><br><span class="hljs-comment"># -f：强制覆盖目标文件</span><br></code></pre></div></td></tr></table></figure><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># remove files or directories</span><br><span class="hljs-comment"># rm [OPTION]... FILE...</span><br><span class="hljs-comment"># -i：交互式复制，即覆盖之前提醒用户确认</span><br><span class="hljs-comment"># -f：强制覆盖目标文件</span><br><span class="hljs-comment"># -r：递归目录</span><br><span class="hljs-comment"># 所有不用文件建议不用删除，而是移动到固定目录</span><br></code></pre></div></td></tr></table></figure><h3 id="IO-重定向与管道"><a href="#IO-重定向与管道" class="headerlink" title="IO 重定向与管道"></a>IO 重定向与管道</h3><h4 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># &gt;，覆盖输出</span><br>[root@localhost /]<span class="hljs-comment"># head -n 5 /etc/passwd</span><br>root:x:0:0:root:/root:/bin/bash<br>bin:x:1:1:bin:/bin:/sbin/nologin<br>daemon:x:2:2:daemon:/sbin:/sbin/nologin<br>adm:x:3:4:adm:/var/adm:/sbin/nologin<br>lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br><br>[root@localhost /]<span class="hljs-comment"># head -n 5 /etc/passwd &gt; /tmp/head_5_etc_passwd.txt</span><br><br>[root@localhost /]<span class="hljs-comment"># cat /tmp/head_5_etc_passwd.txt</span><br>root:x:0:0:root:/root:/bin/bash<br>bin:x:1:1:bin:/bin:/sbin/nologin<br>daemon:x:2:2:daemon:/sbin:/sbin/nologin<br>adm:x:3:4:adm:/var/adm:/sbin/nologin<br>lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br><br><span class="hljs-comment"># &gt;&gt;，追加输出</span><br>[root@localhost /]<span class="hljs-comment"># tail -n 5 /etc/passwd</span><br>dbus:x:81:81:System message bus:/:/sbin/nologin<br>polkitd:x:999:998:User <span class="hljs-keyword">for</span> polkitd:/:/sbin/nologin<br>sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin<br>postfix:x:89:89::/var/spool/postfix:/sbin/nologin<br>chrony:x:998:996::/var/lib/chrony:/sbin/nologin<br><br>[root@localhost /]<span class="hljs-comment"># tail -n 5 /etc/passwd &gt;&gt; /tmp/head_5_etc_passwd.txt</span><br><br>[root@localhost /]<span class="hljs-comment"># cat /tmp/head_5_etc_passwd.txt</span><br>root:x:0:0:root:/root:/bin/bash<br>bin:x:1:1:bin:/bin:/sbin/nologin<br>daemon:x:2:2:daemon:/sbin:/sbin/nologin<br>adm:x:3:4:adm:/var/adm:/sbin/nologin<br>lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br>dbus:x:81:81:System message bus:/:/sbin/nologin<br>polkitd:x:999:998:User <span class="hljs-keyword">for</span> polkitd:/:/sbin/nologin<br>sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin<br>postfix:x:89:89::/var/spool/postfix:/sbin/nologin<br>chrony:x:998:996::/var/lib/chrony:/sbin/nologin<br><br><span class="hljs-comment"># set -C，禁止覆盖输出重定向至已存在的文件</span><br><span class="hljs-comment"># set +C，关闭上述功能</span><br><span class="hljs-comment"># 错误输出重定向：2&gt;，2&gt;&gt;</span><br><span class="hljs-comment"># 合并正常输出流和错误输出流：(1) &amp;&gt;，&amp;&gt;&gt;（2） COMMAND &gt; /path/to/somefile 2&gt;&amp;1</span><br></code></pre></div></td></tr></table></figure><h4 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># &lt;，通过输入设备键入输出</span><br><span class="hljs-comment"># tr，tr [OPTION]... SET1 [SET2]</span><br><span class="hljs-comment"># 把输入的数据当中的字符，凡是在SET1定义范围内出现的，通通对位转换为SET2出现的字符，不修改原文件</span><br><span class="hljs-comment"># tr SET1 SET2 &lt; /PATH/FROM/SOMEFILE</span><br><span class="hljs-comment"># tr -d SET1 &lt; /PATH/FROM/SOMEFILE，指定移除指定SET1定义范围内出现得字符</span><br>[root@localhost /]<span class="hljs-comment"># tr [a-z] [A-Z]</span><br><span class="hljs-built_in">where</span> are you?<br>WHERE ARE YOU?<br>How are you?    <br>HOW ARE YOU?<br>^C<br><br><span class="hljs-comment"># &lt;&lt;，指定分界符，一般为EOF</span><br>[root@localhost /]<span class="hljs-comment"># cat &gt; /tmp/cat.out &lt;&lt; EOF</span><br>&gt; <span class="hljs-built_in">where</span> are you?<br>&gt; how are you<br>&gt; EOF<br>[root@localhost /]<span class="hljs-comment"># cat ^C</span><br>[root@localhost /]<span class="hljs-comment"># cat /tmp/cat.out </span><br><span class="hljs-built_in">where</span> are you?<br>how are you<br></code></pre></div></td></tr></table></figure><h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># |，COMMAND1 | COMMAND2 | COMMAND3 | ...</span><br><span class="hljs-comment"># 连接程序，实现将前一个命令的输出直接定向后一个程序当作输入数据流</span><br>[root@localhost /]<span class="hljs-comment"># cat /etc/issue | tr &#x27;a-z&#x27; &#x27;A-Z&#x27;</span><br>\S<br>KERNEL \R ON AN \M<br><br><span class="hljs-comment"># tee，COMMAND | tee /PATH/TO/SOMEFILE</span><br>[root@localhost /]<span class="hljs-comment"># cat /etc/issue | tee /tmp/issue.tee | tr &#x27;a-z&#x27; &#x27;A-Z&#x27;</span><br>\S<br>KERNEL \R ON AN \M<br><br>[root@localhost /]<span class="hljs-comment"># cat /tmp/issue.tee</span><br>\S<br>Kernel \r on an \m<br></code></pre></div></td></tr></table></figure><h3 id="用户与组"><a href="#用户与组" class="headerlink" title="用户与组"></a>用户与组</h3><h4 id="用户类别"><a href="#用户类别" class="headerlink" title="用户类别"></a>用户类别</h4><ul><li>管理员：0</li><li>普通用户：1-65635<ul><li>系统用户：1-499(CentOS6), 1-999(CentOS7)</li><li>登录用户：500-60000(CentOS6), 1000-60000(CentOS7)</li></ul></li></ul><p>名称解析：Username &lt;–&gt; UID  名称解析库：<code>/etc/passwd</code></p><h4 id="组类别"><a href="#组类别" class="headerlink" title="组类别"></a>组类别</h4><ul><li>管理员组：0</li><li>普通用户组：1-65635<ul><li>系统组：1-499(CentOS6), 1-999(CentOS7)</li><li>登录组：500-60000(CentOS6), 1000-60000(CentOS7)</li></ul></li><li>用户的基本组</li><li>用户的附加组</li><li>私有组：组名同用户名，且只包含一个用户</li><li>公共组：组内包含了多个用户</li></ul><p>名称解析：groupname &lt;–&gt; gid  名称解析库：<code>/etc/group</code></p><h4 id="认证信息"><a href="#认证信息" class="headerlink" title="认证信息"></a>认证信息</h4><p>通过比对事先存储的，与登录时提供的信息是否一致</p><p>密码使用策略：</p><ol><li>使用随机密码</li><li>最短长度不要低于8位</li><li>应该使用大写字母、小写字母、数字和标点符号四类字符中至少三类</li><li>定期更换</li></ol><p>加密算法：</p><ol><li><p>对称加密：加密和解密使用同一个密码</p></li><li><p>非对称加密：加密和解密使用的一对儿密钥</p></li><li><p>单向加密：只能加密，不能解密；提取数据特征码</p><ul><li><p>算法：</p><ul><li>md5: message digest, 128bits</li><li>sha：secure hash algorithm, 160bits</li><li>sha224</li><li>sha256</li><li>sha384</li><li>sha512</li></ul><p>etc/passwd：用户的信息库</p><p>格式为 ：name:password:UID:GID:GECOS:directory:shell<br>name: 用户名<br>password：可以是加密的密码，也可是占位符x；<br>UID：用户ID；<br>GID：用户所属的主组的ID号；<br>GECOS：注释信息<br>directory：用户的家目录；<br>shell：用户的默认shell，登录时默认shell程序；</p><p>/etc/shadow：用户密码<br>用户名:加密的密码:最近一次修改密码的时间:最短使用期限:最长使用期限:警告期段:过期期限:保留字段</p><p>/etc/group：组的信息库<br>格式为：group_name:password:GID:user_list<br>user_list：该组的用户成员；以此组为附加组的用户的用户列表；</p><h4 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h4></li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 添加组，groupadd [选项] group_name</span><br><span class="hljs-comment"># -g GID：指定GID；默认是上一个组的GID+1</span><br><span class="hljs-comment"># -r: 创建系统组</span><br></code></pre></div></td></tr></table></figure><h4 id="groupmod"><a href="#groupmod" class="headerlink" title="groupmod"></a>groupmod</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 修改组属性，groupmod [选项] GROUP</span><br><span class="hljs-comment"># -g GID：修改GID；</span><br><span class="hljs-comment"># -n new_name：修改组名；</span><br></code></pre></div></td></tr></table></figure><h4 id="groupdel"><a href="#groupdel" class="headerlink" title="groupdel"></a>groupdel</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 删除组，groupdel [选项] GROUP</span><br></code></pre></div></td></tr></table></figure><h4 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 创建用户,useradd [选项] 登录名</span><br><span class="hljs-comment"># 创建用户时的诸多默认设定配置文件为/etc/login.defs</span><br><span class="hljs-comment"># -u, --uid UID：指定UID；</span><br><span class="hljs-comment"># -g, --gid GROUP：指定基本组ID，此组得事先存在；</span><br><span class="hljs-comment"># -G, --groups GROUP1[,GROUP2,...[,GROUPN]]]：指明用户所属的附加组，多个组之间用逗号分隔；</span><br><span class="hljs-comment"># -c, --comment COMMENT：指明注释信息；</span><br><span class="hljs-comment"># -d, --home HOME_DIR：以指定的路径为用户的家目录；通过复制/etc/skel此目录并重命名实现；指定的家目录路径如果事先存在，则不会为用户复制环境配置文件；</span><br><span class="hljs-comment"># -s, --shell SHELL：指定用户的默认shell，可用的所有shell列表存储在/etc/shells文件中；</span><br><span class="hljs-comment"># -r, --system：创建系统用户；</span><br><span class="hljs-comment"># useradd -D：显示创建用户的默认配置；</span><br><span class="hljs-comment"># useradd -D 选项: 修改默认选项的值，修改的结果保存于/etc/default/useradd文件中；</span><br></code></pre></div></td></tr></table></figure><h4 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 修改用户属性，usermod [选项] 登录名</span><br><span class="hljs-comment"># -u, --uid UID：修改用户的ID为此处指定的新UID；</span><br><span class="hljs-comment"># -g, --gid GROUP：修改用户所属的基本组；</span><br><span class="hljs-comment"># -G, --groups GROUP1[,GROUP2,...[,GROUPN]]]：修改用户所属的附加组；原来的附加组会被覆盖；</span><br><span class="hljs-comment"># -a, --append：与-G一同使用，用于为用户追加新的附加组；</span><br><span class="hljs-comment"># -c, --comment COMMENT：修改注释信息；</span><br><span class="hljs-comment"># -d, --home HOME_DIR：修改用户的家目录；用户原有的文件不会被转移至新位置；</span><br><span class="hljs-comment"># -m, --move-home：只能与-d选项一同使用，用于将原来的家目录移动为新的家目录；</span><br><span class="hljs-comment"># -l, --login NEW_LOGIN：修改用户名；</span><br><span class="hljs-comment"># -s, --shell SHELL：修改用户的默认shell；</span><br><span class="hljs-comment"># -L, --lock：锁定用户密码；即在用户原来的密码字符串之前添加一个&quot;!&quot;；</span><br><span class="hljs-comment"># -U, --unlock：解锁用户的密码；</span><br></code></pre></div></td></tr></table></figure><h4 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 删除用户,userdel [选项] 登录</span><br><span class="hljs-comment"># -r：删除用户时一并删除其家目录；</span><br></code></pre></div></td></tr></table></figure><h4 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># passwd：修改用户自己的密码；</span><br><span class="hljs-comment"># passwd USERNAME：修改指定用户的密码，但仅root有此权限；</span><br><span class="hljs-comment"># -l, -u：锁定和解锁用户；</span><br><span class="hljs-comment"># -d：清除用户密码串；</span><br><span class="hljs-comment"># -e DATE: 过期期限，日期；</span><br><span class="hljs-comment"># -i DAYS：非活动期限；</span><br><span class="hljs-comment"># -n DAYS：密码的最短使用期限；</span><br><span class="hljs-comment"># -x DAYS：密码的最长使用期限；</span><br><span class="hljs-comment"># -w DAYS：警告期限；</span><br><span class="hljs-comment"># --stdin：echo &quot;PASSWORD&quot; | passwd --stdin USERNAME</span><br></code></pre></div></td></tr></table></figure><h4 id="gpasswd"><a href="#gpasswd" class="headerlink" title="gpasswd"></a>gpasswd</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 组密码文件：/etc/gshadow，gpasswd [选项] group</span><br><span class="hljs-comment"># -a USERNAME：向组中添加用户</span><br><span class="hljs-comment"># -d USERNAME：从组中移除用户</span><br></code></pre></div></td></tr></table></figure><h4 id="newgrp"><a href="#newgrp" class="headerlink" title="newgrp"></a>newgrp</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 临时切换指定的组为基本组，newgrp [-] [group]</span><br><span class="hljs-comment"># -: 会模拟用户重新登录以实现重新初始化其工作环境；</span><br></code></pre></div></td></tr></table></figure><h4 id="chage"><a href="#chage" class="headerlink" title="chage"></a>chage</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 更改用户密码过期信息，chage [选项] 登录名</span><br><span class="hljs-comment"># -d，-E，-W，-m，-M</span><br></code></pre></div></td></tr></table></figure><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 显示用户的真和有效ID，id [OPTION]... [USER]</span><br><span class="hljs-comment"># -u: 仅显示有效的UID；</span><br><span class="hljs-comment"># -g: 仅显示用户的基本组ID; </span><br><span class="hljs-comment"># -G：仅显示用户所属的所有组的ID；</span><br><span class="hljs-comment"># -n: 显示名字而非ID；</span><br></code></pre></div></td></tr></table></figure><h4 id="su"><a href="#su" class="headerlink" title="su"></a>su</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># switch user</span><br><span class="hljs-comment"># 登录式切换：会通过读取目标用户的配置文件来重新初始化</span><br>su - USERNAME<br>su -l USERNAME<br><span class="hljs-comment"># 非登录式切换：不会读取目标用户的配置文件进行初始化</span><br>su USERNAME<br><span class="hljs-comment"># 注意：管理员可无密码切换至其它任何用户；</span><br><span class="hljs-comment">#  -c &#x27;COMMAND&#x27;：仅以指定用户的身份运行此处指定的命令；</span><br>su - USERNAME -c <span class="hljs-string">&#x27;COMMAND&#x27;</span><br></code></pre></div></td></tr></table></figure><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><ul><li><code>mode：rwxrwxrwx</code><ul><li>左三位：定义 user（owner）的权限</li><li>中三位：定义 group 的权限</li><li>右三位：定义 other 的权限</li></ul></li><li><code>r</code>：<code>readable</code>，读权限</li><li><code>w</code>：<code>writable</code>，写权限</li><li><code>x</code>：<code>excutable</code>，执行权限</li><li><code>ownership：user,group,other</code></li></ul><h4 id="权限组合机制"><a href="#权限组合机制" class="headerlink" title="权限组合机制"></a>权限组合机制</h4><ul><li><code>---</code>、<code>000</code>、0</li><li><code>--x</code>、<code>001</code>、1</li><li><code>-w-</code>、<code>010</code>、2</li><li><code>-wx</code>、<code>011</code>、3</li><li><code>r--</code>、<code>100</code>、4</li><li><code>r-x</code>、<code>101</code>、5</li><li><code>rw-</code>、<code>110</code>、6</li><li><code>rwx</code>、<code>111</code>、7</li></ul><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 更改权限，u:属主、g:属组、o:其他、a:所有</span><br><span class="hljs-comment"># chmod [options] mode file...</span><br><span class="hljs-comment"># 用户只能修改属主为自己的文件</span><br><br><span class="hljs-comment"># 指定所有权限设置，u=,g=,o=,a=</span><br>[root@study /]<span class="hljs-comment"># ll txt</span><br>-rw-r--r--. 1 root root 541 4月   9 21:34 txt<br>[root@study /]<span class="hljs-comment"># chmod g=rw- txt</span><br>[root@study /]<span class="hljs-comment"># ll txt</span><br>-rw-rw-r--. 1 root root 541 4月   9 21:34 txt<br><br><span class="hljs-comment"># 指定单个权限设置，u-r,o+x,g-w,+r,+x</span><br>[root@study /]<span class="hljs-comment"># chmod g-w txt</span><br>[root@study /]<span class="hljs-comment"># ll txt</span><br>-rw-r--r--. 1 root root 541 4月   9 21:34 txt<br>[root@study /]<span class="hljs-comment"># chmod +x txt</span><br>[root@study /]<span class="hljs-comment"># ll txt</span><br>-rwxr-xr-x. 1 root root 541 4月   9 21:34 txt<br><br><span class="hljs-comment"># 进制表示权限修改</span><br>[root@study /]<span class="hljs-comment"># chmod 660 txt</span><br>[root@study /]<span class="hljs-comment"># ll txt</span><br>-rw-rw----. 1 root root 541 4月   9 21:34 txt<br><br><span class="hljs-comment"># -R，--recursive，递归修改</span><br></code></pre></div></td></tr></table></figure><h4 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 修改属主</span><br></code></pre></div></td></tr></table></figure><h4 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 修改数组</span><br></code></pre></div></td></tr></table></figure><h4 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 文件权限反向掩码，遮罩码</span><br><span class="hljs-comment"># 文件默认不能拥有执行权限，如果减得的结果中有执行权限则需要加1</span><br>[root@study /]<span class="hljs-comment"># umask</span><br>0022<br><span class="hljs-comment"># umask MASK 设置 umask</span><br></code></pre></div></td></tr></table></figure><h4 id="install"><a href="#install" class="headerlink" title="install"></a>install</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 复制文件并设置权限</span><br>install [options] [-s] [--strip] <span class="hljs-built_in">source</span> dest<br>install [options] [-s] [--strip] <span class="hljs-built_in">source</span>... directory<br>install [options] [-d,--directory] directory...<br><br><span class="hljs-comment"># -d, --directory</span><br><span class="hljs-comment"># -m mode, --mode=mode</span><br><span class="hljs-comment"># -o owner, --owner=owner</span><br><span class="hljs-comment"># -g group, --group=group</span><br></code></pre></div></td></tr></table></figure><h4 id="mktemp"><a href="#mktemp" class="headerlink" title="mktemp"></a>mktemp</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 创建临时文件或临时目录</span><br>[root@study /]<span class="hljs-comment"># mytemp=$(mktemp /tmp/XXXXXXX)</span><br>[root@study /]<span class="hljs-comment"># echo $mytemp</span><br>/tmp/ptfJw0h<br><br><span class="hljs-comment"># -d 创建临时目录</span><br></code></pre></div></td></tr></table></figure><h3 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h3><blockquote><p>命令的堆积而已</p></blockquote><h4 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h4><p>第一行指定解释器路径，用于指明解释执行当前脚本的解释器程序文件，常用的有：<code>#!/bin/bash</code>、<code>#!/usr/bin/python</code>、<code>#!/usr/bin/perl</code>，脚本文件为 <code>.sh</code></p><p>解释器会自动忽略空白行和加 <code>#</code> 的注释行</p><h4 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h4><p>第一种：<code>chmod +x file.sh</code>、<code>./file.sh</code></p><p>第二种：<code>bash file.sh</code></p><h4 id="bash的配置文件"><a href="#bash的配置文件" class="headerlink" title="bash的配置文件"></a>bash的配置文件</h4><h5 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h5><p>为交互式登录的 shell 进程提供配置</p><p>仅管理员可修改</p><p>全局：<code>/etc/profile</code>, <code>/etc/profile.d/*.sh</code></p><p>用户：<code>~/.bash_profile</code></p><p>功能:</p><ol><li>用于定义环境变量</li><li>运行命令或脚本</li></ol><h5 id="bashrc"><a href="#bashrc" class="headerlink" title="bashrc"></a>bashrc</h5><p>为非交互式登录的 shell 进程提供配置</p><p>全局：<code>/etc/bashrc</code></p><p>用户：<code>~/.bashrc</code></p><p>功能:</p><ol><li>定义本地变量</li><li>定义命令别名</li></ol><h5 id="交互式登录"><a href="#交互式登录" class="headerlink" title="交互式登录"></a>交互式登录</h5><ul><li>直接通过某终端输入账号密码打开的 shell 进程</li><li>使用 su 命令: su - USERNAME,或者使用 su -l USERNAME执行的登录切换</li></ul><h5 id="非交互式登录"><a href="#非交互式登录" class="headerlink" title="非交互式登录"></a>非交互式登录</h5><ul><li>su USERNAME 执行的登录切换</li><li>图形界面下打开的终端</li><li>运行脚本</li></ul><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># grep, egrep, fgrep - 打印匹配给定模式的行</span><br>grep [options] PATTERN [FILE...]<br>grep [options] [-e PATTERN | -f FILE] [FILE...]<br><br>[reajason@study ~]$ grep <span class="hljs-string">&quot;UUID&quot;</span> /etc/fstab<br>UUID=4da0c9b1-d833-434b-a700-6abe448403ec /boot<br><br><span class="hljs-comment"># --color=auto，匹配到的文本高亮显示</span><br><span class="hljs-comment"># -i, --ignore-case 忽略模式 PATTERN 和输入文件中的大小写的分别</span><br><span class="hljs-comment"># -o, --only-matching 只显示匹配的行中与 PATTERN 相匹配的部分</span><br><span class="hljs-comment"># -v, --invert-match 变匹配的意义，只选择不匹配的行</span><br><span class="hljs-comment"># -q, --quiet, --silent 不向标准输出写任何东西，只返回状态吗，echo $?</span><br><span class="hljs-comment"># -A NUM, --after-context=NUM 打印出紧随匹配的行之后的下文 NUM 行</span><br><span class="hljs-comment"># -B NUM, --before-context=NUM 打印出匹配的行之前的上文  NUM 行</span><br><span class="hljs-comment"># -C NUM, --context=NUM 打印出匹配的行的上下文前后各 NUM 行</span><br><br>[reajason@study ~]$ grep <span class="hljs-string">&quot;root&quot;</span> /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>operator:x:11:0:operator:/root:/sbin/nologin<br>[reajason@study ~]$ grep -A 1 <span class="hljs-string">&quot;root&quot;</span> /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>bin:x:1:1:bin:/bin:/sbin/nologin<br>--<br>operator:x:11:0:operator:/root:/sbin/nologin<br>games:x:12:100:games:/usr/games:/sbin/nologin<br>[reajason@study ~]$ grep -B 1 <span class="hljs-string">&quot;root&quot;</span> /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>--<br>mail:x:8:12:mail:/var/spool/mail:/sbin/nologin<br>operator:x:11:0:operator:/root:/sbin/nologin<br>[reajason@study ~]$ grep -C 1 <span class="hljs-string">&quot;root&quot;</span> /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>bin:x:1:1:bin:/bin:/sbin/nologin<br>--<br>mail:x:8:12:mail:/var/spool/mail:/sbin/nologin<br>operator:x:11:0:operator:/root:/sbin/nologin<br>games:x:12:100:games:/usr/games:/sbin/nologin<br></code></pre></div></td></tr></table></figure><h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 输出文件中的行数、单词数、字节数</span><br><br>[reajason@study ~]$ wc /etc/passwd<br>  43   87 2271 /etc/passwd<br><br><span class="hljs-comment"># -l: lines</span><br><span class="hljs-comment"># -w：words</span><br><span class="hljs-comment"># -c: bytes</span><br></code></pre></div></td></tr></table></figure><h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 在文件的每一行中提取片断</span><br><span class="hljs-comment"># -d CHAR：以指定的字符为分隔符</span><br><span class="hljs-comment"># -f FIELDS：挑选出的字段</span><br></code></pre></div></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 对文本文件的行排序</span><br><span class="hljs-comment"># -n：基于数值大小而非字符进行排序；</span><br><span class="hljs-comment"># -t CHAR：指定分隔符；</span><br><span class="hljs-comment"># -k #：用于排序比较的字段；</span><br><span class="hljs-comment"># -r：逆序排序；</span><br><span class="hljs-comment"># -f：忽略字符大小写</span><br><span class="hljs-comment"># -u：重复的行只保留一份；</span><br></code></pre></div></td></tr></table></figure><h4 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 删除排序文件中的重复行</span><br><span class="hljs-comment"># -c：显示每行的重复次数；</span><br><span class="hljs-comment"># -d：仅显示重复过的的行；</span><br></code></pre></div></td></tr></table></figure><h4 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 文件比较</span><br><br><span class="hljs-comment"># diff  /PATH/TO/OLDFILE  /PATH/TO/NEWFILE &gt; /PATH/TO/PATCH_FILE</span><br><br><span class="hljs-comment"># -u：使用unfied机制，即显示要修改的行的上下文，默认为3行；</span><br></code></pre></div></td></tr></table></figure><h4 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 向文件打补丁</span><br><span class="hljs-comment"># patch [OPTIONS] -i /PATH/TO/PATCH_FILE /PATH/TO/OLDFILE</span><br><br><span class="hljs-comment"># patch /PATH/TO/OLDFILE &lt; /PATH/TO/PATCH_FILE</span><br></code></pre></div></td></tr></table></figure><h3 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h3><h4 id="基本模式"><a href="#基本模式" class="headerlink" title="基本模式"></a>基本模式</h4><ol><li>编辑模式</li><li>输入模式</li><li>末行模式</li></ol><h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><h4 id="模式转换"><a href="#模式转换" class="headerlink" title="模式转换"></a>模式转换</h4><h5 id="编辑模式-gt-输入模式"><a href="#编辑模式-gt-输入模式" class="headerlink" title="编辑模式 -&gt; 输入模式"></a>编辑模式 -&gt; 输入模式</h5><figure class="highlight mathematica"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica">i：insert，在光标处输入<br>a：append，在光标后方一个字符输入<br>o：在光标所在处下方新的一行输入<br><span class="hljs-keyword">I</span>：在光标所在处的行首输入<br>A：在光标所在处的行尾输入<br><span class="hljs-keyword">O</span>：在光标所在处上方新的一行输入<br></code></pre></div></td></tr></table></figure><h5 id="输入模式-gt-编辑模式"><a href="#输入模式-gt-编辑模式" class="headerlink" title="输入模式 -&gt; 编辑模式"></a>输入模式 -&gt; 编辑模式</h5><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">Esc</span><br></code></pre></div></td></tr></table></figure><h5 id="编辑模式-gt-末行模式"><a href="#编辑模式-gt-末行模式" class="headerlink" title="编辑模式 -&gt; 末行模式"></a>编辑模式 -&gt; 末行模式</h5><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">:<br></code></pre></div></td></tr></table></figure><h5 id="末行模式-gt-编辑模式"><a href="#末行模式-gt-编辑模式" class="headerlink" title="末行模式 -&gt; 编辑模式"></a>末行模式 -&gt; 编辑模式</h5><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">Esc</span><br></code></pre></div></td></tr></table></figure><h4 id="打开文件-1"><a href="#打开文件-1" class="headerlink" title="打开文件"></a>打开文件</h4><p><code>vim file</code>、<code>vim +n file</code>、<code>vim +/reg file</code></p><h4 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h4><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir">ZZ   保存并退出<br><span class="hljs-symbol">:q</span>   退出<br><span class="hljs-symbol">:q!</span>  强制退出，不保存<br><span class="hljs-symbol">:wq!</span> 保存并退出<br><span class="hljs-symbol">:x</span>   保存并退出<br><span class="hljs-symbol">:w</span> /PATH/FILE  另存为<br></code></pre></div></td></tr></table></figure><h4 id="光标跳转"><a href="#光标跳转" class="headerlink" title="光标跳转"></a>光标跳转</h4><h5 id="字符间跳转"><a href="#字符间跳转" class="headerlink" title="字符间跳转"></a>字符间跳转</h5><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">h:</span> ←<br><span class="hljs-symbol">j:</span> ↓<br><span class="hljs-symbol">k:</span> ↑<br><span class="hljs-symbol">l:</span> →<br></code></pre></div></td></tr></table></figure><h5 id="单词间跳转"><a href="#单词间跳转" class="headerlink" title="单词间跳转"></a>单词间跳转</h5><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">w:</span> 下一个单词的词首<br><span class="hljs-symbol">e:</span> 当前或后一个单词词尾<br><span class="hljs-symbol">b:</span> 当前或前一个单词词首<br></code></pre></div></td></tr></table></figure><h5 id="行首行尾跳转"><a href="#行首行尾跳转" class="headerlink" title="行首行尾跳转"></a>行首行尾跳转</h5><figure class="highlight makefile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs makefile"><span class="hljs-section">^: 跳转到行首第一个非空白字符</span><br><span class="hljs-section">0: 跳转至行首</span><br><span class="hljs-section">$: 跳转至行尾</span><br></code></pre></div></td></tr></table></figure><h5 id="行间跳转"><a href="#行间跳转" class="headerlink" title="行间跳转"></a>行间跳转</h5><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">nG:</span> 跳转到第 n 行<br><span class="hljs-symbol">gg:</span> 跳转第一行<br><span class="hljs-symbol">G:</span>  跳转最后一行<br></code></pre></div></td></tr></table></figure><h5 id="句间跳转"><a href="#句间跳转" class="headerlink" title="句间跳转"></a>句间跳转</h5><figure class="highlight clojure"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs clojure">()<br></code></pre></div></td></tr></table></figure><h5 id="段间跳转"><a href="#段间跳转" class="headerlink" title="段间跳转"></a>段间跳转</h5><figure class="highlight clojure"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs clojure">&#123;&#125;<br></code></pre></div></td></tr></table></figure><h4 id="翻屏"><a href="#翻屏" class="headerlink" title="翻屏"></a>翻屏</h4><figure class="highlight groovy"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs groovy">Ctrl+<span class="hljs-attr">f:</span> 向下翻一屏<br>Ctrl+<span class="hljs-attr">b:</span> 向上翻一屏<br>Ctrl+<span class="hljs-attr">d:</span> 向下翻半屏<br>Ctrl+<span class="hljs-attr">u:</span> 向上翻半屏<br><span class="hljs-attr">Enter:</span> 按行向后翻<br></code></pre></div></td></tr></table></figure><h4 id="编辑命令"><a href="#编辑命令" class="headerlink" title="编辑命令"></a>编辑命令</h4><h5 id="字符编辑"><a href="#字符编辑" class="headerlink" title="字符编辑"></a>字符编辑</h5><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">x:</span>  删除光标所在处的字符<br><span class="hljs-meta">#x: 删除光标处起始的#个字符</span><br><span class="hljs-symbol">xp:</span> 交换光标所在处的字符与其后面的字符的位置<br></code></pre></div></td></tr></table></figure><h5 id="替换命令"><a href="#替换命令" class="headerlink" title="替换命令"></a>替换命令</h5><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">r:</span> 替换光标所在处的字符<br></code></pre></div></td></tr></table></figure><h5 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h5><figure class="highlight ldif"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ldif"><span class="hljs-attribute">d$</span>: 删除光标所在处到行尾<br><span class="hljs-attribute">d^</span>: 删除光标所在处到行首<br><span class="hljs-attribute">dw</span>: <br><span class="hljs-attribute">de</span>: <br><span class="hljs-attribute">db</span>: <br><span class="hljs-attribute">dd</span>: 删除光标所在一整行<br><span class="hljs-comment">#dd: 删除光标所在处的行起始的共#行</span><br></code></pre></div></td></tr></table></figure><h5 id="粘贴命令"><a href="#粘贴命令" class="headerlink" title="粘贴命令"></a>粘贴命令</h5><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">p:</span> 整行粘贴则在下方另起一行，否则直接粘贴在其后<br><span class="hljs-symbol">P:</span> 整行粘贴则在上方另起一行，否则直接粘贴在其前<br></code></pre></div></td></tr></table></figure><h5 id="复制命令"><a href="#复制命令" class="headerlink" title="复制命令"></a>复制命令</h5><figure class="highlight http"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http"><span class="hljs-attribute">y</span>: 复制，类似于 d 命令<br><br><span class="hljs-attribute">yy</span>: 复制一整行<br></code></pre></div></td></tr></table></figure><h5 id="改变命令"><a href="#改变命令" class="headerlink" title="改变命令"></a>改变命令</h5><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">c:</span> 删除并进入输入模式<br></code></pre></div></td></tr></table></figure><h4 id="可视化模式"><a href="#可视化模式" class="headerlink" title="可视化模式"></a>可视化模式</h4><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">v:</span> 按字符选定<br><span class="hljs-symbol">V:</span> 按行选定<br></code></pre></div></td></tr></table></figure><h4 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h4><figure class="highlight groovy"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs groovy"><span class="hljs-attr">u:</span> 撤销<br>Ctrl+<span class="hljs-attr">r:</span> 取消撤销<br></code></pre></div></td></tr></table></figure><h4 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h4><blockquote><p>内建命令行接口</p></blockquote><h5 id="地址定界"><a href="#地址定界" class="headerlink" title="地址定界"></a>地址定界</h5><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs clean">#：第 # 行<br>#,#：第 # 到 # 行<br>#,+#：第 # 行 偏移 # 行<br>%：全文<br>/reg/：第一次被匹配的文本 <br></code></pre></div></td></tr></table></figure><h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><figure class="highlight excel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs excel">/reg：从光标所在处往后查找所有匹配字符<br>?reg：从光标所在处往前查找所有匹配字符<br><span class="hljs-built_in">n</span>：下一个<br><span class="hljs-built_in">N</span>：上一个<br></code></pre></div></td></tr></table></figure><h5 id="查找并替换"><a href="#查找并替换" class="headerlink" title="查找并替换"></a>查找并替换</h5><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">s<span class="hljs-regexp">/要查找的内容/</span>替换的内容/修饰符<br><br>修饰符：i：忽略大小写<br>   g：全局替换<br></code></pre></div></td></tr></table></figure><h4 id="多文件模式"><a href="#多文件模式" class="headerlink" title="多文件模式"></a>多文件模式</h4><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:next</span> 下一个文件<br><span class="hljs-selector-pseudo">:prev</span> 前一个文件<br><span class="hljs-selector-pseudo">:last</span> 最后一个<br><br><span class="hljs-selector-pseudo">:wqall</span> 保存所有文件并推出<br><span class="hljs-selector-pseudo">:wall</span> 保存所有文件<br><span class="hljs-selector-pseudo">:qall</span> 退出所有文件<br></code></pre></div></td></tr></table></figure><h4 id="多窗口机制"><a href="#多窗口机制" class="headerlink" title="多窗口机制"></a>多窗口机制</h4><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-deletion">-o：水平分割窗口</span><br><span class="hljs-deletion">-O：垂直分割窗口</span><br>Ctrl+w,arrow：切换<br>Ctrl+w,s：水平分割<br>Ctrl+w,v：垂直分割<br></code></pre></div></td></tr></table></figure><h4 id="定制Vim"><a href="#定制Vim" class="headerlink" title="定制Vim"></a>定制Vim</h4><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-builtin-name">set</span> number（<span class="hljs-builtin-name">set</span> nu）：显示行号<br><span class="hljs-builtin-name">set</span> nomber（<span class="hljs-builtin-name">set</span> nonu）：取消显示行号<br><span class="hljs-builtin-name">set</span> ai：自动缩进<br><span class="hljs-builtin-name">set</span> noai：取消自动缩进<br><span class="hljs-builtin-name">set</span> hlsearch：高亮搜索<br><span class="hljs-builtin-name">set</span> nohlsearch：取消高亮搜索<br>syntax on：语法高亮<br>syntax off：取消语法高亮<br><span class="hljs-builtin-name">set</span> lc：忽略大小写<br><span class="hljs-builtin-name">set</span> nocl：取消忽略大小写 <br></code></pre></div></td></tr></table></figure><h3 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h3><h4 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h4><p>依赖于事先构建好的索引库</p><ul><li>系统自动实现（周期性任务）</li><li>手动更新数据库（updatedb）</li></ul><p>工作特性</p><ul><li>查找速度快</li><li>模糊查找</li><li>非实时查找</li></ul><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-deletion">-b：只匹配 basename</span><br><span class="hljs-deletion">-c：统计出多少符合条件的数量</span><br><span class="hljs-deletion">-r：使用正则表达式</span><br></code></pre></div></td></tr></table></figure><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>工作特性</p><ul><li>查找速度慢</li><li>精确查找</li><li>实时查找</li></ul><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">find [<span class="hljs-string">OPTION</span>] [<span class="hljs-string">查找起始路径</span>][<span class="hljs-symbol">查找条件</span>][<span class="hljs-string">处理动作</span>]<br><br>-name pattern：查找文件名（精确查找） pattern 为 gloB 通配符<br>-iname pattern：不区分大小写<br>-user USERNAEM：查找属主<br>-group GROUPNAME：查找属组<br>-uid UID：查找属主 uid<br>-gid GID：查找属组 gid<br>-nouser：查找没有属主<br>-nogroup：查找没有属组<br>-type TYPE：查找文件类型<br><span class="hljs-code">f:普通文件</span><br><span class="hljs-code">d:目录文件</span><br><span class="hljs-code">l:符号链接文件</span><br><span class="hljs-code">b:块设备文件</span><br><span class="hljs-code">c:字符设备文件</span><br><span class="hljs-code">p:管道文件</span><br><span class="hljs-code">s:套接字文件</span><br><span class="hljs-code">-size [+|-]#</span><br><span class="hljs-code">#为单位，k,M,G</span><br><span class="hljs-code">-atime/-amin [+|-]#</span><br><span class="hljs-code">根据访问时间查找</span><br><span class="hljs-code">-mtime/-mmin [+|-]#</span><br><span class="hljs-code">根据修改时间查找</span><br><span class="hljs-code">-ctime/-cmin [+|-]#</span><br><span class="hljs-code">根据改变时间查找</span><br><span class="hljs-code"></span><br><span class="hljs-code">-prem mode</span><br><span class="hljs-code"></span><br><span class="hljs-code">处理动作：</span><br><span class="hljs-code"></span><br><span class="hljs-code">默认动作为 -print</span><br><span class="hljs-code">-ls：输出文件详细信息</span><br><span class="hljs-code">-delete：删除查找的文件</span><br><span class="hljs-code">-fls /PATH：ls的输出信息保存指定文件</span><br><span class="hljs-code">-ok COMMAND &#123;&#125;\; ：对查找的每个文件执行命令</span><br></code></pre></div></td></tr></table></figure><h3 id="特殊权限"><a href="#特殊权限" class="headerlink" title="特殊权限"></a>特殊权限</h3><h4 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h4><p>默认情况下，用户发起的进程，进程的属主是其发起者，因此其以发起者的身份在运行。如果此程序拥有 SUID 权限（u=rws），则程序运行为进程时，进程的属主不是发起者，而是程序文件自己的属主。</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">chmod u+s <span class="hljs-keyword">FILE</span><br></code></pre></div></td></tr></table></figure><h4 id="SGID"><a href="#SGID" class="headerlink" title="SGID"></a>SGID</h4><p>当目录属组有写权限时，且有 SGID 权限时（g=rws），那么所有属于此目录的属组，且以属组身份在此目录中新建文件或目录时，新文件的属组不是用户的基本组，而是此目录的属组。</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">chmod u+s <span class="hljs-keyword">FILE</span><br></code></pre></div></td></tr></table></figure><h4 id="STIKY"><a href="#STIKY" class="headerlink" title="STIKY"></a>STIKY</h4><p>对于属组或全局可写得到目录，组内的所有用户或系统上的所有系统的所有用户对此目录中都能创建新文件或删除所有的已有文件，如果此类目录设置 Stiky 权限（o=rwt），则每个用户能创建新文件，且只能删除自己的文件。</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">chmod o+t <span class="hljs-keyword">FILE</span><br></code></pre></div></td></tr></table></figure><h4 id="facl"><a href="#facl" class="headerlink" title="facl"></a>facl</h4><p>额外赋权机制，另一层让普通用户能控制赋权给另外的用户或租的赋权机制</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 获取文件的 facl 权限</span><br>getfacl FLIE<br><br><span class="hljs-comment"># 设置文件的 facl 权限</span><br>setfacl -m u:USERNAME:MODE FILE<br>setfacl -m g:GROUPNAME:MODE FILE<br><br><span class="hljs-comment"># 撤销赋权</span><br>setfacl -x u:USERNAME FILE<br>setfacl -x g:GROUPNAME FILE<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>支付宝多账号同步</title>
    <link href="/2020/11/07/AlipayAutoSync/"/>
    <url>/2020/11/07/AlipayAutoSync/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>主要实现功能为支付宝多账号切换 + 进入运动进行步数同步</p>          </div> <a id="more"></a><div class="note note-success">            <p>本脚本所使用的autojs版本为 —&gt; <a href="https://lingsiki.lanzoui.com/in80Mi4ve3a">Auto.js_4.1.1 Alpha2</a><br>实现原理：利用三星健康管理刷三星健康的步数，然后把三星健康的步数同步到每一个小号上</p>          </div><h3 id="一、基本功能"><a href="#一、基本功能" class="headerlink" title="一、基本功能"></a>一、基本功能</h3><ol><li>支付宝刷步数</li><li>支付宝账号切换</li><li>运动同步以及捐步</li></ol><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><h4 id="1、关闭支付宝"><a href="#1、关闭支付宝" class="headerlink" title="1、关闭支付宝"></a>1、关闭支付宝</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 关闭支付宝函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">closeAlipay</span>(<span class="hljs-params"></span>)</span>&#123;<br>    appName = app.getPackageName(<span class="hljs-string">&#x27;支付宝&#x27;</span>)<br>    app.openAppSetting(appName)<br>    sleep(<span class="hljs-number">1000</span>)<br>    <span class="hljs-keyword">var</span> obj = text(<span class="hljs-string">&#x27;结束运行&#x27;</span>).findOne(<span class="hljs-number">5000</span>)<br>    clickCenter(obj)<br>    <span class="hljs-keyword">var</span> btn = idContains(<span class="hljs-string">&#x27;button1&#x27;</span>).findOne(<span class="hljs-number">1000</span>)<br>    <span class="hljs-keyword">if</span> (btn)&#123;<br>        btn.click()<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;支付宝关闭成功！\n开启任务&quot;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2、支付宝刷步数"><a href="#2、支付宝刷步数" class="headerlink" title="2、支付宝刷步数"></a>2、支付宝刷步数</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 利用三星健康 + 三星健康管理实现支付宝刷步数</span><br><span class="hljs-comment"> * 环境搭建（Root手机）：</span><br><span class="hljs-comment"> * 1、下载刷步数三件套（https://lingsiki.lanzoui.com/b0ejfe25a）。</span><br><span class="hljs-comment"> * 2、edxp激活应用变量模块，并且设置三星健康、支付宝和三星健康管理模拟机型为三星型号手机。</span><br><span class="hljs-comment"> * 3、进入三星健康设置-关于三星健康点击版本号十次开启开发者模式-然后进入数据权限开启支付宝和三星健康管理的所有权限。</span><br><span class="hljs-comment"> * 4、进入支付宝的支付宝运动-右上角三点进入设置，开启记录运动数据。</span><br><span class="hljs-comment"> * 5、保持三星健康在后台，打开三星健康管理增加步数，进入三星健康等一会儿即可同步步数，最后关闭重启支付宝，进入运动查看同步情况</span><br><span class="hljs-comment"> * 6、若失败可能是机型伪装的问题，也有可能是第一天刷步数可能延迟会有点大，第二天以后一般都是秒同步的</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;步数=count * 12000&#125;</span> </span>count </span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">steps</span>(<span class="hljs-params">count</span>) </span>&#123;<br>    launchApp(<span class="hljs-string">&#x27;三星健康&#x27;</span>);<br>    sleep(<span class="hljs-number">1000</span>);<br>    sleep(<span class="hljs-number">1000</span>);<br>    app.launch(<span class="hljs-string">&quot;com.samsung.android.app.health.dataviewer&quot;</span>);<br>    idContains(<span class="hljs-string">&quot;floatingActionButton&quot;</span>).waitFor()<br>    sleep(<span class="hljs-number">1000</span>)<br>    sleep(<span class="hljs-number">1000</span>)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; count; index++) &#123;<br>        idContains(<span class="hljs-string">&quot;floatingActionButton&quot;</span>).findOne().click()<br>        sleep(<span class="hljs-number">500</span>)<br>        click(<span class="hljs-number">800</span>, <span class="hljs-number">1750</span>)<br>        sleep(<span class="hljs-number">500</span>)<br>    &#125;<br>    launchApp(<span class="hljs-string">&#x27;三星健康&#x27;</span>);<br>    text(<span class="hljs-string">&#x27;主页&#x27;</span>).waitFor();<br>    <span class="hljs-keyword">var</span> obj = idContains(<span class="hljs-string">&#x27;goal&#x27;</span>).findOne()<br>    clickCenter(obj);<br>    sleep(<span class="hljs-number">5000</span>)<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>        step = idContains(<span class="hljs-string">&#x27;current_steps&#x27;</span>).findOne().text()<br>        <span class="hljs-keyword">if</span> (step != <span class="hljs-string">&#x27;0&#x27;</span>)&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;当前刷步数为：&quot;</span> + step)<br>            <span class="hljs-keyword">return</span> step;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3、支付宝登录"><a href="#3、支付宝登录" class="headerlink" title="3、支付宝登录"></a>3、支付宝登录</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 支付宝登录函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;账号&#125;</span> </span>accont </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;密码&#125;</span> </span>key </span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params">accont, key</span>) </span>&#123;<br>    <span class="hljs-comment">// 进入支付宝密码登录界面</span><br>    app.startActivity(app.intent(&#123;<br>        action: <span class="hljs-string">&quot;VIEW&quot;</span>,<br>        data: <span class="hljs-string">&quot;alipayqr://platformapi/startapp?appId=20000008&quot;</span>,<br>    &#125;));<br>    textMatches(<span class="hljs-string">&quot;换个账号登录&quot;</span>).findOne(<span class="hljs-number">5000</span>)<br>    click(<span class="hljs-string">&quot;换个账号登录&quot;</span>)<br>    sleep(<span class="hljs-number">400</span>)<br>    setText(<span class="hljs-number">0</span>, accont);<br>    textMatches(<span class="hljs-string">&quot;下一步&quot;</span>).findOne(<span class="hljs-number">5000</span>)<br>    click(<span class="hljs-string">&quot;下一步&quot;</span>)<br>    textContains(<span class="hljs-string">&quot;换个方式登录&quot;</span>).waitFor()<br>    <span class="hljs-keyword">var</span> obj = textMatches(<span class="hljs-regexp">/短信验证码登录|指纹登录|换个方式登录/</span>).findOne().text()<br>    <span class="hljs-keyword">if</span> (obj == <span class="hljs-string">&quot;短信验证码登录&quot;</span> || obj == <span class="hljs-string">&quot;指纹登录&quot;</span>) &#123;<br>        sleep(<span class="hljs-number">500</span>)<br>        textMatches(<span class="hljs-regexp">/换个验证方式|换个方式登录/</span>).findOne()<br>        clickCenter(text(<span class="hljs-string">&quot;换个方式登录&quot;</span>).findOne(<span class="hljs-number">2000</span>))<br>        clickCenter(text(<span class="hljs-string">&quot;换个验证方式&quot;</span>).findOne(<span class="hljs-number">2000</span>))<br>        text(<span class="hljs-string">&quot;密码登录&quot;</span>).findOne()<br>        sleep(<span class="hljs-number">400</span>)<br>        <span class="hljs-keyword">while</span> (!click(<span class="hljs-string">&quot;密码登录&quot;</span>)) &#123; &#125;<br>        sleep(<span class="hljs-number">200</span>)<br>        setText(<span class="hljs-number">0</span>, accont);<br>        sleep(<span class="hljs-number">200</span>);<br>        setText(<span class="hljs-number">1</span>, key);<br>        sleep(<span class="hljs-number">200</span>)<br>        idContains(<span class="hljs-string">&quot;loginButton&quot;</span>).findOne().click()<br>        <span class="hljs-built_in">console</span>.log(accont, <span class="hljs-string">&quot;登录成功&quot;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        sleep(<span class="hljs-number">400</span>)<br>        setText(<span class="hljs-number">1</span>, key);<br>        sleep(<span class="hljs-number">400</span>)<br>        idContains(<span class="hljs-string">&quot;loginButton&quot;</span>).findOne().click()<br>        <span class="hljs-built_in">console</span>.log(accont, <span class="hljs-string">&quot;登录成功&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4、步数同步"><a href="#4、步数同步" class="headerlink" title="4、步数同步"></a>4、步数同步</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 进入支付宝运动步数同步以及捐步</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">go_sports</span>(<span class="hljs-params"></span>) </span>&#123;<br>    sleep(<span class="hljs-number">2000</span>)<br>    app.startActivity(&#123;<br>        data: <span class="hljs-string">&quot;alipayqr://platformapi/startapp?saId=20000869&quot;</span><br>    &#125;)<br>    textContains(<span class="hljs-string">&quot;走路线&quot;</span>).waitFor();<br>    swipe(device.width / <span class="hljs-number">9</span> * <span class="hljs-number">8</span>, device.height / <span class="hljs-number">3</span>, device.width / <span class="hljs-number">9</span> * <span class="hljs-number">8</span>, device.height / <span class="hljs-number">3</span> * <span class="hljs-number">2</span>, <span class="hljs-number">500</span>)<br>    sleep(<span class="hljs-number">5000</span>)<br>    <span class="hljs-keyword">var</span> obj1 = text(<span class="hljs-string">&#x27;去捐步&#x27;</span>).findOne(<span class="hljs-number">1000</span>)<br>    <span class="hljs-keyword">if</span> (obj1 != <span class="hljs-literal">null</span>)&#123;<br>        clickCenter(text(<span class="hljs-string">&#x27;去捐步&#x27;</span>).findOne())<br>        sleep(<span class="hljs-number">3000</span>)<br>        text(<span class="hljs-string">&#x27;立即捐步&#x27;</span>).findOne()<br>        sleep(<span class="hljs-number">200</span>)<br>        <span class="hljs-keyword">while</span> (!click(<span class="hljs-string">&quot;立即捐步&quot;</span>)) &#123;&#125;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;捐步成功&#x27;</span>)<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;已经捐完步数了&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="5、进入蚂蚁森林"><a href="#5、进入蚂蚁森林" class="headerlink" title="5、进入蚂蚁森林"></a>5、进入蚂蚁森林</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 进入蚂蚁森林</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">enterForest</span>(<span class="hljs-params"></span>)</span>&#123;<br>    sleep(<span class="hljs-number">2000</span>)<br>    app.startActivity(&#123;<br>        data: <span class="hljs-string">&quot;alipayqr://platformapi/startapp?saId=60000002&quot;</span><br>    &#125;)<br>    sleep(<span class="hljs-number">8000</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h3><p>下载链接：<a href="https://github.com/ReaJason/AutoJsScripts/blob/master/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%A4%9A%E8%B4%A6%E5%8F%B7%E5%88%87%E6%8D%A2%E6%AD%A5%E6%95%B0%E5%90%8C%E6%AD%A5%E8%84%9A%E6%9C%AC.js">GitHub地址链接</a></p><h3 id="四、运行效果"><a href="#四、运行效果" class="headerlink" title="四、运行效果"></a>四、运行效果</h3><iframe height="400" width="500" src="//player.bilibili.com/player.html?aid=670137563&bvid=BV17a4y1s7nP&cid=253887490&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="五、注意事项"><a href="#五、注意事项" class="headerlink" title="五、注意事项"></a>五、注意事项</h3><ol><li>安装autojs之后，点击右小角新建文件，将完整代码粘贴进去，开启无障碍模式即可运行</li><li>使用时修改小号账号和密码，以及大号账号和密码即可</li><li>每一部手机的脚本运行效果可能会不一样，因为软件的局限性</li><li>可以根据autojs的文档自己编写脚本 —&gt; <a href="https://hyb1996.github.io/AutoJs-Docs/#/">AutoJs-Docs</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>AutoJs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Script</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
